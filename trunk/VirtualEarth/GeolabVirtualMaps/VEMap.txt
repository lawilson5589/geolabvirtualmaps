
var L_invalidinvoketarget_text = "Invalid invoke target specified.", L_invaliddirections_text = "Invalid argument passed; both start and end must be present.", L_invalidpageindex_text = "Invalid search results page index is passed.", L_invalidelement_text = "Invalid element id; unable to find the element in the document body.", L_noheadelement_text = "Head element is missing for the current document; cannot initialize the API framework.", L_noserviceurl_text = "Either a service url or script url is required to create VENetwork instance.", L_noscripturl_text = "Invalid script source url is assigned; cannot download the assigned script.", L_nostylesurl_text = "Invalid style source url is assigned; cannot attach the assigned styles.", L_invalidwhatwhere_text = "Invalid what/where parameters; either 'what' or 'where' must be present.", L_notinitialized_text = "Map is not loaded; cannot perform this operation.", L_noroute_text = "Cannot calculate route at this point; try again later.", L_invalidpushpin_text = "Invalid pushpin instance.", L_invalidpushpinid_text = "Invalid pushpin id; either id is empty or another pushpin already exists with that id.", L_invalidpolylineid_text = "Invalid polyline id; either id is empty or another polyline already exists with that id.", L_invalidpolygonid_text = "Invalid polygon id; either id is empty or another polygon already exists with that id.", L_invalidargument_text = "Invalid argument; input argument '%1' is not a valid '%2' value.", L_invalidlayerid_text = "Invalid layer id; either id is empty or another layer already exists with that id.", L_invalidlayertype_text = "Invalid layer type.", L_invalidlayersource_text = "Invalid layer source; either layer is empty or does not exist.", L_invalidsourceid_text = "Invalid source id; either id is empty or another tile source already exists with that id.", L_invalidminmaxzoom_text = "Min zoom is greater than max zoom.", L_invalidopacity_text = "Invalid opacity value.", L_loadxml_text = "Unable to load source file.", L_Help_Text = "Help", L_ErrorServerBusy_Text = "The server is temporarily unavailable. Try again later.", L_error_text = "Error", L_close_text = "close", L_what_text = "What", L_where_text = "Where", L_find_text = "Find", L_selectlocation_text = "Select a location", L_Start_Text = "Start", L_End_Text = "End", L_DirectionsGetDirections_Text = "Get directions", L_loading_text = ".. Loading ..", L_arriveat_text = "Arrive at", L_startat_text = "Start at", L_step_text = "Step %1 of %2", L_DirectionsStep_Text = "Step", L_CollectionManagerViewerDefaultTitle_Text = "Shared Collection", L_CollectionManagerUnsavedCollectionTitle_Text = "Unsaved Collection", L_AnnotationConfDefaultTitle_Text = "Untitled item", L_TrafficPopupSeverity_Text = "Severity", L_TrafficPopupLocation_Text = "Location", L_TrafficPopupDescription_Text = "Description", L_TrafficPopupStartTime_Text = "Start time", L_TrafficPopupEstEndTime_Text = "Est. end time", L_TrafficManagerSerious_Text = "Serious", L_TrafficManagerModerate_Text = "Moderate", L_TrafficManagerMinor_Text = "Minor", L_TrafficManager_Zoomout_Text = "Zoom out to view Traffic information", L_TrafficManager_Zoomin_Text = "Zoom in to view Traffic information", L_ClientTokenInvalid = "Invalid client token.", L_ClientTokenExpired = "Expired client token.", L_Shp_IncorrectPoints = "The number of points does not match the specified VEShape type.", L_Shp_IncorrectLineWidth = "The line width must be a positive integer.", L_Shp_IncorrectZoomLevel = "The specified  zoom level is invalid.  The valid range is 1 to 21,inclusive.", L_Shp_IncorrectZoomLevel2 = "Max zoom is less than min zoom.", L_shp_Notinitialized_text = "Shape is not initialized.", L_ShpExist_text = "This shape has already been added to layer.", L_invalidwhere_text = "Invalid argument; input argument 'where' is not a valid 'string, VELatLong, VELatLongRectangle, or VEPlace ' value.", L_invalidnonnegativeint_text = "Invalid argument; input argument '%1' must be a non-negative int value.", L_invalidbetweenint_text = "Invalid argument; input argument '%1' must be between %2 and %3, inclusive.", L_DashboardRoad_Text = "Road", L_DashboardAerial_Text = "Aerial", L_DashboardBirdsEye_Text = "Bird's eye", L_DashboardBirdsEyeText_Text = "See this location in bird's eye view", L_Dashboard3DText_Text = "See this location in Virtual Earth 3D", L_DashboardShowLabels_Text = "Show labels", L_ObliqueZoomBarSelectZoom_Text = "Choose the zoom level", L_ObliqueCompassSelectDirection_Text = "Change the direction of the view", L_ObliqueSelectorSelectThumbnail_Text = "Choose a thumbnail to display an image from the surrounding area", L_ObliqueModeImageNotAvailable_Text = "Bird's eye images are not available for this area.", L_MinimapHybrid_Text = "H", L_MinimapRoad_Text = "R", L_MinimapHideToolTip_Text = "Hide mini map", L_MinimapShowToolTip_Text = "Show mini map", L_MinimapLargerToolTip_Text = "Larger mini map", L_MinimapSmallerToolTip_Text = "Smaller mini map", L_MinimapRoadToolTip_Text = "Switch the mini map to road view.", L_MinimapHybridToolTip_Text = "Switch the mini map to hybrid view.", L_MinimapDragToolTip_Text = "Drag to move the map.", L_MinimapReticuleDragToolTip_Text = "Drag to center map.", L_ScaleBarMiles_Text = "miles", L_ScaleBarKilometers_Text = "km", L_ScaleBarMeters_Text = "m", L_ScaleBarYards_Text = "yds", L_NavActionFlatland_Text = "2D", L_NavActionView3D_Text = "3D", L_NavActionRoad_Text = "Road", L_NavActionAerial_Text = "Aerial", L_NavActionHybrid_Text = "Hybrid", L_NavActionHideToolTip_Text = "Minimize navigation control", L_NavActionShowToolTip_Text = "Maximize navigation control", L_NavActionFlatlandToolTip_Text = "See maps in 2D view.", L_NavActionView3DToolTip_Text = "See maps in 3D view with Virtual Earth 3D (Beta).", L_NavActionOrthoToolTip_Text = "Switch to map view.", L_NavActionObliqueToolTip_Text = "Switch to bird's eye view.", L_NavActionStreetSideToolTip_Text = "Street-level view", L_NavAction3DOrthoToolTip_Text = "Look down", L_NavAction3DObliqueToolTip_Text = "Look down at an angle", L_NavAction3DStreetSideToolTip_Text = "Look toward horizon", L_ZoomBarMinusToolTip_Text = "Zoom out", L_ZoomBarPlusToolTip_Text = "Zoom in", L_ZoomBarSliderToolTip_Text = "Move slider to zoom in or zoom out.", L_NavActionTitleAlternate_Text = "Choose view", L_BrowserNotSupported_Text = "To use this feature, open Live Search in Windows Internet Explorer version 6 or 7. For more information, and to download the latest version, visit the Microsoft Internet Explorer website (%1%3%2).", L_x64BrowserNotSupported_Text = "To use this feature, open Live Search in the 32-bit version of Windows Internet Explorer.", L_NoHardwareAcceleration_Text = "Virtual Earth 3D has detected that hardware acceleration is turned off.", L_GeoRssInvalidFormatError_Text = "The GeoRSS file you have tried to import is improperly formatted.", L_MapControlNavteq_Text = "&copy; 2006 NAVTEQ", L_MapControlImageCourtesyOfNASA_Text = "Image courtesy of NASA", L_MapControlHarrisCorp_Text = "&copy; Harris Corp, Earthstar Geographics LLC", L_MapControlImageCourtesyOfUSGS_Text = "Image courtesy of USGS", L_MapControlImageCourtesyOfPictometry_Text = "&copy; 2005 Pictometry International Corp.", L_MapControlImageCourtesyOfEarthData_Text = "&copy; EarthData", L_MapControlImageCourtesyOfGetmapping_Text = "&copy; Getmapping plc", L_MapControlImageCourtesyOfAND_Text = "&copy; AND", L_MapControlImageCourtesyOfBlom_Text = "&copy; 2006 Blom", L_MapCopyrightMicrosoft = "&copy; 2006 Microsoft Corporation", L_MapControlPlatformName_Text = "Virtual Earth", L_MapControlImageCourtesyOfGeoEye_Text = "&copy; 2006 GeoEye", L_MapControlImageCourtesyOfMapDataSciences_Text = "&copy; 2006 MapData Sciences Pty Ltd", L_MapControlImageCourtesyOfZenrin_Text = "&copy; 2006 Zenrin", L_MapControlImageCourtesyOfPasco_Text = "&copy; 2005 Pasco", L_SupportedBrowserDownloadUrl_Text = "http://www.microsoft.com/windows/ie/downloads/default.mspx";
_VERegisterNamespaces("MapControl");
MapControl.Features = {PlatformName:L_MapControlPlatformName_Text, Copyright:{Navteq:L_MapControlNavteq_Text, ImageCourtesyOfNASA:L_MapControlImageCourtesyOfNASA_Text, HarrisCorp:L_MapControlHarrisCorp_Text, ImageCourtesyOfUSGS:L_MapControlImageCourtesyOfUSGS_Text, ImageCourtesyOfPictometry:L_MapControlImageCourtesyOfPictometry_Text}, Image:{PoweredLogo:"logo_powered_by.png"}, MapStyle:{Road:true, Shaded:true, Aerial:true, Hybrid:true, BirdsEye:true, View3D:true}, BirdsEyeAtZoomLevel:10, ScaleBarKilometers:false, Traffic:{Flow:{Slow:"0-25 mph", Moderate:"25-45 mph", Fast:"45+ mph"}}};

function _VERegisterNamespaces() {
    for (var d = 0; d < arguments.length; d++) {
        var b = arguments[d].split("."), c = window;
        for (var a = 0; a < b.length; a++) {
            if (!c[b[a]]) {
                c[b[a]] = new Object;
            }
            c = c[b[a]];
        }
    }
}

_VERegisterNamespaces("Msn.MVC");
Msn.MVC.AbstractView = function () {this._contextPin = null;};
Msn.MVC.AbstractView.prototype.OnBeforeSwitchAway = function () {};
Msn.MVC.AbstractView.prototype.ShowShimIfSupported = function () {};
Msn.MVC.AbstractView.prototype.UpdateShimIfSupported = function () {};
_VERegisterNamespaces("Msn.MVC");
Msn.MVC.FlatlandView = function () {this._superObj = Msn.MVC.FlatlandView.prototype;this._mapDrawingView = null;};
Msn.MVC.FlatlandView.prototype = new Msn.MVC.AbstractView;
Msn.MVC.FlatlandView.prototype.OnBeforeSwitchAway = function () {if (window.__drawingLoaded) {this._ClearAllCollectionLayers();VE_MapDispatch.Clear();}};
_VERegisterNamespaces("Msn.MVC");
Msn.MVC.View3D = function () {this._superObj = Msn.MVC.View3D.prototype;this._hackUniqueLayerId = "UniqueLayer_Hack";this._entityIdShapePostfix = "_Shape";this._spacecontrol = null;};
Msn.MVC.View3D.prototype = new Msn.MVC.AbstractView;
Msn.MVC.View3D.prototype.OnBeforeSwitchAway = function () {this._SetView3DControl(null);};
Msn.MVC.View3D.prototype._SetView3DControl = function (a) {this._spacecontrol = a;};
Msn.MVC.View3D.prototype.ShowShimIfSupported = function (b, a) {ShowShim(b, a);};
Msn.MVC.View3D.prototype.UpdateShimIfSupported = function (b, a) {UpdateIFrameShim(b, a);};
_VERegisterNamespaces("Msn.MVC");
Msn.MVC.ViewFacade = function () {this._mvcFlatlandView = null;this._mvcView3D = null;this._curMvcView = null;};
Msn.MVC.ViewFacade.prototype.OnSwitchToFlatlandView = function () {if (this._mvcFlatlandView == null) {this._mvcFlatlandView = new Msn.MVC.FlatlandView;}if (this._curMvcView == this._mvcFlatlandView) {return;}if (this._curMvcView != null) {this._curMvcView.OnBeforeSwitchAway();}this._curMvcView = this._mvcFlatlandView;if (window.__drawingLoaded) {this._curMvcView.OnAllCollectionLayersRepaint();}};
Msn.MVC.ViewFacade.prototype.OnSwitchToView3D = function (a) {if (this._mvcView3D == null) {this._mvcView3D = new Msn.MVC.View3D;}this._mvcView3D._SetView3DControl(a);if (this._curMvcView == this._mvcView3D) {return;}if (this._curMvcView != null) {this._curMvcView.OnBeforeSwitchAway();}this._curMvcView = this._mvcView3D;if (window.__drawingLoaded) {this._curMvcView.OnAllCollectionLayersRepaint();}};
Msn.MVC.ViewFacade.prototype.ShowShimIfSupported = function (b, a) {if (this._curMvcView == null) {return;}return this._curMvcView.ShowShimIfSupported(b, a);};
Msn.MVC.ViewFacade.prototype.UpdateShimIfSupported = function (b, a) {if (this._curMvcView == null) {return;}return this._curMvcView.UpdateShimIfSupported(b, a);};
var mvcViewFacade = new Msn.MVC.ViewFacade, windowWidth = 0, windowHeight = 0, scrollbarWidth = null;

function $ID(a) {
    var b = document;
    return b.getElementById(a);
}


function $CE(a) {
    var b = document;
    return b.createElement(a);
}


function $CENS(a) {
    var b = document;
    return b.createElementNS(a);
}


function GetWindowWidth() {
    var a = 0;
    if (typeof window.innerWidth == "number") {
        a = window.innerWidth;
    } else if (document.documentElement &&
        document.documentElement.clientWidth) {
        a = document.documentElement.clientWidth;
    } else if (document.body && document.body.clientWidth) {
        a = document.body.clientWidth;
    }
    if (!a || a < 100) {
        a = 100;
    }
    return a;
}


function GetWindowHeight() {
    var a = 0;
    if (typeof window.innerHeight == "number") {
        a = window.innerHeight;
    } else if (document.documentElement &&
        document.documentElement.clientHeight) {
        a = document.documentElement.clientHeight;
    } else if (document.body && document.body.clientHeight) {
        a = document.body.clientHeight;
    }
    if (!a || a < 100) {
        a = 100;
    }
    return a;
}


function GetScrollbarWidth() {
    if (scrollbarWidth) {
        return scrollbarWidth;
    }
    if (navigator.userAgent.indexOf("IE") >= 0) {
        var a = document.createElement("div"), b = null;
        a.style.visible = "hidden";
        a.style.overflowY = "scroll";
        a.style.position = "absolute";
        a.style.width = 0;
        document.body.insertAdjacentElement("afterBegin", a);
        b = a.offsetWidth;
        a.parentNode.removeChild(a);
        if (!b) {
            b = 16;
        }
        scrollbarWidth = b;
        return b;
    } else {
        return 0;
    }
}


function GetUrlPrefix() {
    var a = window.location.pathname.lastIndexOf("/"), b = window.location.protocol + "//" + window.location.hostname + window.location.pathname.substring(0, a + 1);
    return b;
}


function GetUrlParameterString() {
    var a = window.location.search;
    if (a.length == 0 || a.indexOf("?") == -1) {
        return "";
    }
    return a.substr(a.indexOf("?") + 1);
}


function CheckWipExistence() {
    var a = GetUrlParameterString();
    if (a != "" && a.indexOf("wip=") > -1) {
        return true;
    }
    return false;
}


function GetUrlParameters() {
    var b = [], d = GetUrlParameterString();
    if (!d) {
        return b;
    }
    var e = d.split("&");
    for (var c = 0; c < e.length; c++) {
        var a = e[c].split("=");
        if (a.length == 2 && a[0] && a[1]) {
            b.push(unescape(a[0]));
            b.push(unescape(a[1]));
        }
    }
    return b;
}


function ParseShiftKeyForLinks(a) {
    if (a.shiftKey) {
        return false;
    }
    return true;
}


function GetEvent(a) {
    return a ? a : window.event;
}


function CancelEvent(a) {
    a.cancelBubble = true;
    a.returnValue = false;
}


function IgnoreEvent(a) {
    a = GetEvent(a);
    CancelEvent(a);
    return false;
}


function GetMouseX(a) {
    var b = 0;
    if (a.pageX) {
        b = a.pageX;
    } else if (a.clientX) {
        if (document.documentElement &&
            document.documentElement.scrollLeft) {
            b = a.clientX + document.documentElement.scrollLeft;
        } else if (document.body) {
            b = a.clientX + document.body.scrollLeft;
        }
    }
    return b;
}


function GetMouseY(a) {
    var b = 0;
    if (a.pageY) {
        b = a.pageY;
    } else if (a.clientY) {
        if (document.documentElement &&
            document.documentElement.scrollTop) {
            b = a.clientY + document.documentElement.scrollTop;
        } else if (document.body) {
            b = a.clientY + document.body.scrollTop;
        }
    }
    return b;
}


function GetMouseScrollDelta(a) {
    if (a.wheelDelta) {
        return a.wheelDelta;
    } else if (a.detail) {
        return - a.detail;
    }
    return 0;
}


function IsLeftMouseButton(a) {
    var b = Msn.VE.Environment.BrowserInfo;
    if (b.Type == Msn.VE.BrowserType.MSIE) {
        return a.button == 1 || a.button == 3 || a.type == "click";
    } else if (b.Type == Msn.VE.BrowserType.Firefox) {
        return a.button == 0;
    } else {
        return false;
    }
}


function IsRightMouseButton(a) {
    var b = Msn.VE.Environment.BrowserInfo;
    if (b.Type == Msn.VE.BrowserType.MSIE) {
        return a.button == 2 || a.button == 3 || a.type == "contextmenu";
    } else if (b.Type == Msn.VE.BrowserType.Firefox) {
        return a.button == 2;
    } else {
        return false;
    }
}


function IsMiddleMouseButton(b) {
    var a = Msn.VE.Environment.BrowserInfo;
    if (a.Type == Msn.VE.BrowserType.MSIE) {
        return b.button == 4;
    } else if (a.Type == Msn.VE.BrowserType.Firefox) {
        return b.button == 1;
    } else {
        return false;
    }
}


function GetTarget(b) {
    if (!b) {
        b = window.event;
    }
    var a = null;
    if (b.srcElement) {
        a = b.srcElement;
    } else if (b.target) {
        a = b.target;
    }
    if (a && a.nodeType) {
        if (a.nodeType == 3) {
            a = targ.parentNode;
        }
    }
    return a;
}


function GetLeftPosition(c) {
    var a = c, b = 0;
    while (a) {
        b += a.offsetLeft;
        a = a.offsetParent;
    }
    if (navigator.userAgent.indexOf("Mac") != -1 &&
        typeof document.body.leftMargin != "undefined") {
        b += document.body.leftMargin;
    }
    return b;
}


function GetTopPosition(c) {
    var a = c, b = 0;
    while (a) {
        b += a.offsetTop;
        a = a.offsetParent;
    }
    if (navigator.userAgent.indexOf("Mac") != -1 &&
        typeof document.body.topMargin != "undefined") {
        b += document.body.topMargin;
    }
    return b;
}

_VERegisterNamespaces("Msn.VE");
Msn.VE.DistanceUnit = {Kilometers:"km", Miles:"mi"};
Msn.VE.DistanceUnit.IsValidType = function (a) {if (typeof a == "string") {if (a == Msn.VE.DistanceUnit.Miles || a == Msn.VE.DistanceUnit.Kilometers) {return true;}}return false;};

function VEException(b, c, a) {
    this.source = b;
    this.name = c;
    this.message = a;
}

VEException.prototype.Name = this.name;
VEException.prototype.Source = this.source;
VEException.prototype.Message = this.message;

function MathFloor(a) {
    return Math.floor(a);
}


function MathCeil(a) {
    return Math.ceil(a);
}


function MathMax(a, b) {
    return Math.max(a, b);
}


function MathMin(a, b) {
    return Math.min(a, b);
}


function MathAbs(a) {
    return Math.abs(a);
}


function MathRound(a) {
    return Math.round(a);
}


function DegToRad(a) {
    return a * Math.PI / 180;
}


function RadToDeg(a) {
    return a * 180 / Math.PI;
}


function MatrixMultiply(e, b) {
    if (!e || !b || e[0].length != b.length) {
        return;
    }
    var g = e.length, h = b[0].length, d = new Array(g), i = b.length;
    for (var a = 0; a < g; a++) {
        d[a] = new Array(h);
        for (var c = 0; c < h; c++) {
            d[a][c] = 0;
            for (var f = 0; f < i; f++) {
                d[a][c] += e[a][f] * b[f][c];
            }
        }
    }
    return d;
}


function VEParameter(b, a) {
    this.Name = b;
    this.Value = a;
}

VEParameter.prototype.Name = this.name;
VEParameter.prototype.Value = this.value;

function VENetwork(c, a, b) {
    if (c != null && c != "undefined") {
        this.ServiceUrl = c;
    }
    if (a != null && a != "undefined") {
        Msn.VE.API.Globals.veonbegininvokeevent = a;
    }
    if (b != null && b != "undefined") {
        Msn.VE.API.Globals.veonendinvokeevent = b;
    }
}


function BeginInvoke(f, c, h, g) {
    if (this.ServiceUrl == null ||
        this.ServiceUrl == "undefined" || this.ServiceUrl.length == 0) {
        throw new VEException("VENetwork:BeginInvoke", "err_noserviceurl", L_noserviceurl_text);
    }
    if (Msn.VE.API.Globals.veonbegininvokeevent) {
        Msn.VE.API.Globals.veonbegininvokeevent();
    }
    var e = VENetwork.GetExecutionID();
    if (c) {
        var b = this.ServiceUrl + "?";
        for (var d = 0; d < c.length; d++) {
            b = b + c[d].Name;
            b = b + "=";
            b = b + c[d].Value;
            b = b + "&";
        }
    } else {
        var b = this.ServiceUrl;
    }
    if (Msn.VE.API.Globals.vedebug) {
        alert(b);
    }
    var a = document.createElement("script");
    a.type = "text/javascript";
    a.language = "javascript";
    a.id = e;
    a.src = b;
    if (navigator.userAgent.indexOf("IE") >= 0) {
        a.onreadystatechange = function () {if (a && ("loaded" == a.readyState || "complete" == a.readyState)) {a.onreadystatechange = null;EndInvoke(g, h, f, a, e);}};
    } else {
        a.onload = function () {a.onload = null;EndInvoke(g, h, f, a, e);};
    }
    VENetwork.GetAttachTarget().appendChild(a);
}


function EndInvoke(endInvokeTarget, fnCallback, endInvokeMethod, elScript, executionId) {
    var objects = null;
    if (endInvokeMethod) {
        eval("if(typeof " + endInvokeMethod + " == 'function') {objects = " + endInvokeMethod + "();}");
    }
    document.getElementsByTagName("head")[0].removeChild(elScript);
    elScript = null;
    if (fnCallback != null && fnCallback != "undefined") {
        fnCallback(objects, endInvokeTarget);
    }
    if (Msn.VE.API.Globals.veonendinvokeevent) {
        Msn.VE.API.Globals.veonendinvokeevent();
    }
}

VENetwork.GetExecutionID = function () {var a = new Date, b = Date.UTC(a.getFullYear(), a.getMonth(), a.getDate(), a.getHours(), a.getMinutes(), a.getSeconds(), a.getMilliseconds());b += Math.round(Math.random() * 1000000);return b;};

function GetXmlHttp() {
    var a = null;
    try {
        a = new ActiveXObject("Msxml2.XMLHTTP");
    } catch (b) {
        try {
            a = new ActiveXObject("Microsoft.XMLHTTP");
        } catch (c) {
            a = null;
        }
    }
    if (!a && typeof XMLHttpRequest != "undefined") {
        a = new XMLHttpRequest;
    }
    return a;
}

VENetwork.AttachStyleSheetCallback = function (a) {if (a) {a();}};
VENetwork.AttachStyleSheet = function (a, b, d, c) {if (a == null || a == "undefined" || a.length == 0) {throw new VEException("VENetwork:AttachStylesheet", "err_nostylesurl", "");}elStyle = document.createElement("link");if (d == true) {elStyle.rel = "alternate stylesheet";} else {elStyle.rel = "stylesheet";}if (c) {elStyle.media = c;}elStyle.type = "text/css";elStyle.rev = "stylesheet";elStyle.id = VENetwork.GetExecutionID();elStyle.href = a;VENetwork.GetAttachTarget().appendChild(elStyle);if (navigator.userAgent.indexOf("IE") >= 0) {elStyle.onreadystatechange = function () {if (elStyle && ("loaded" == elStyle.readyState || "complete" == elStyle.readyState)) {elStyle.onreadystatechange = null;VENetwork.AttachStyleSheetCallback(b);}};} else {VENetwork.AttachStyleSheetCallback(b);}return;};
VENetwork.DownloadScriptCallback = function (a, b) {if (a) {a(b);}};
VENetwork.DownloadScript = function (b, c, d) {if (b == null || b == "undefined" || b.length == 0) {throw new VEException("VENetwork:DownloadScript", "err_noscripturl", L_noscripturl_text);}var a = document.createElement("script");a.type = "text/javascript";a.language = "javascript";a.id = VENetwork.GetExecutionID();a.src = b;if (navigator.userAgent.indexOf("IE") >= 0) {a.onreadystatechange = function () {if (a && ("loaded" == a.readyState || "complete" == a.readyState)) {a.onreadystatechange = null;VENetwork.DownloadScriptCallback(c, d);}};} else {a.onload = function () {a.onload = null;VENetwork.DownloadScriptCallback(c, d);};}VENetwork.GetAttachTarget().appendChild(a);return;};
VENetwork.DownloadXml = function (e, c, b, d) {var a = GetXmlHttp();a.open(c, e, true);a.onreadystatechange = function () {if (a.readyState == 4) {if (b) {b(a.responseXML, d);}a = null;}};a.send(null);};
VENetwork.GetAttachTarget = function () {if (document.getElementsByTagName("head")[0] != null) {return document.getElementsByTagName("head")[0];} else {throw new VEException("VENetwork:cstr", "err_noheadelement", L_noheadelement_text);}};
VENetwork.prototype.BeginInvoke = BeginInvoke;
VENetwork.prototype.EndInvoke = EndInvoke;
_VERegisterNamespaces("Msn.Drawing");
var MC_PointID = 10000, MC_PolylineID = 30000, MC_PolygonID = 50000, MC_SYMBOL_IID = 70000, MC_TEXT_IID = 90000, MC_ENTITY_IID = 200000, MC_COL_IID = 1000, MC_GEO_TYPE_SYMBOL = "Symbol", MC_GEO_TYPE_POINT = "Point", MC_GEO_TYPE_POLYLINE = "Polyline", MC_GEO_TYPE_POLYGON = "Polygon", MC_GEO_TYPE_TEXT = "Text", MC_GEO_TYPE_COL = "Collection", MC_GEO_TYPE_ENTITY = "Entity", VEShapeType = {Pushpin:"Point", Polyline:"Polyline", Polygon:"Polygon"};
Msn.Drawing.GetGeoUID = function (b) {var a = "";switch (b) {case VEShapeType.Polygon:a = MC_PolygonID++;break;case VEShapeType.Pushpin:a = MC_PointID++;break;case VEShapeType.Polyline:a = MC_PolylineID++;break;case MC_GEO_TYPE_SYMBOL:a = MC_SYMBOL_IID++;break;case MC_GEO_TYPE_TEXT:a = MC_TEXT_IID++;break;case MC_GEO_TYPE_COL:a = MC_COL_IID++;break;case MC_GEO_TYPE_ENTITY:a = MC_ENTITY_IID++;break;default:;}return a.toString();};
Msn.Drawing.Exception = function (a) {this.message = a;this.name = "Msn.Drawing.Exception";};
Msn.Drawing.Exception.prototype.toString = function () {return this.name + ": " + this.message;};
Msn.Drawing.Point = function (a, b) {this.id = 0;this.points = [];this.points.push(a);this.points.push(b);this.iid = Msn.Drawing.GetGeoUID(VEShapeType.Pushpin);};
Msn.Drawing.Point.prototype.type = VEShapeType.Pushpin;
Msn.Drawing.Point.prototype.name = null;
Msn.Drawing.Point.prototype.symbol = null;
Msn.Drawing.Point.prototype.isLabel = true;
Msn.Drawing.Point.prototype.isOnLegend = false;
Msn.Drawing.Point.prototype.Destroy = function () {this.symbol = null;this.points = null;};
Msn.Drawing.Point.prototype.toString = function () {return this.points[0] + "," + this.points[1];};
Msn.Drawing.PolyLine = function (a) {this.id = 0;this.iid = Msn.Drawing.GetGeoUID(VEShapeType.Polyline);this.points = a ? a : [];this.minX = null;this.minY = null;this.maxX = null;this.maxY = null;this.length = -1;};
Msn.Drawing.PolyLine.prototype.toString = function () {if (this.points != null) {return this.points.join(" ");} else {return "";}};
Msn.Drawing.PolyLine.prototype.minX = null;
Msn.Drawing.PolyLine.prototype.minY = null;
Msn.Drawing.PolyLine.prototype.maxX = null;
Msn.Drawing.PolyLine.prototype.maxY = null;
Msn.Drawing.PolyLine.prototype.iid = Msn.Drawing.GetGeoUID(VEShapeType.Polyline);
Msn.Drawing.PolyLine.prototype.labelPosX = null;
Msn.Drawing.PolyLine.prototype.labelPosY = null;
Msn.Drawing.PolyLine.prototype.name = null;
Msn.Drawing.PolyLine.prototype.type = VEShapeType.Polyline;
Msn.Drawing.PolyLine.prototype.symbol = null;
Msn.Drawing.PolyLine.prototype.isLabel = true;
Msn.Drawing.PolyLine.prototype.isOnLegend = false;
Msn.Drawing.PolyLine.prototype.Destroy = function () {this.symbol = null;this.points = null;this.minX = null;this.minY = null;this.maxX = null;this.maxY = null;};
Msn.Drawing.PolyLine.prototype.GetLength = function () {if (this.length < 0) {this.length = CalculateShapeLengthP(this.points);}return this.length;};
Msn.Drawing.PolyLine.prototype.SetLength = function (a) {this.length = a;};
Msn.Drawing.Polygon = function (a) {this.id = 0;this.iid = Msn.Drawing.GetGeoUID(VEShapeType.Polygon);this.points = a;this.length = -1;this.area = -1;this.minX = null;this.minY = null;this.maxX = null;this.maxY = null;};
Msn.Drawing.Polygon.prototype.labelPosX = null;
Msn.Drawing.Polygon.prototype.labelPosY = null;
Msn.Drawing.Polygon.prototype.symbol = null;
Msn.Drawing.Polygon.prototype.isLabel = true;
Msn.Drawing.Polygon.prototype.isOnLegend = false;
Msn.Drawing.Polygon.prototype.type = VEShapeType.Polygon;
Msn.Drawing.Polygon.prototype.name = null;
Msn.Drawing.Polygon.prototype.Destroy = function () {this.symbol = null;this.points = null;this.minX = null;this.minY = null;this.maxX = null;this.maxY = null;};
Msn.Drawing.Polygon.prototype.GetLength = function () {if (this.length < 0) {this.length = CalculateShapeLength(this);}return this.length;};
Msn.Drawing.Polygon.prototype.SetLength = function (a) {this.length = a;};
Msn.Drawing.Polygon.prototype.GetArea = function () {if (this.area < 0) {this.area = CalculateAreaP(this.points);}if (this.area < 0) {this.area = CalculateAreaP(this.points, false);}return this.area;};
Msn.Drawing.Polygon.prototype.SetArea = function (a) {this.area = a;};
Msn.Drawing.Stroke = function () {this.width = 1;this.linecap = "round";this.opacity = 1;this.linejoin = "miter";this.color = new Msn.Drawing.Color(255, 255, 255, 1);this.fillcolor = new Msn.Drawing.Color(0, 255, 0, 1);};
Msn.Drawing.Color = function (d, c, b, a) {this.R = d ? d : 0;this.G = c ? c : 0;this.B = b ? b : 0;this.A = a ? a : 0;this.ToHexString = function () {return "#" + Number(this.R).toString(16) + (this.R < 16 ? "0" : "") + Number(this.G).toString(16) + (this.G < 16 ? "0" : "") + Number(this.B).toString(16) + (this.B < 16 ? "0" : "");};};
VEShapeStyle = function () {this.iid = Msn.Drawing.GetGeoUID(MC_GEO_TYPE_SYMBOL);this.id = this.iid;};
VEShapeStyle.prototype.point_type = "v:rect";
VEShapeStyle.prototype.name = "symbol";
VEShapeStyle.prototype.highlight_stroke_color = "#336666";
VEShapeStyle.prototype.highlight_fill_color = "#FFCC33";
VEShapeStyle.prototype.shape_drawtype = "v:shape";
VEShapeStyle.prototype.shape_fill = "false";
VEShapeStyle.prototype.shape_filled = "false";
VEShapeStyle.prototype.shape_unselectable = "off";
VEShapeStyle.prototype.style_zIndex = 60;
VEShapeStyle.prototype.style_position = "absolute";
VEShapeStyle.prototype.style_filter = "alpha(opacity=30)";
VEShapeStyle.prototype.style_width = "10";
VEShapeStyle.prototype.style_height = "10";
VEShapeStyle.prototype.style_visibility = "visible";
VEShapeStyle.prototype.style_display = "block";
VEShapeStyle.prototype.stroke_drawtype = "v:stroke";
VEShapeStyle.prototype.stroke_on = "true";
VEShapeStyle.prototype.stroke_joinstyle = "miter";
VEShapeStyle.prototype.stroke_endcap = "round";
VEShapeStyle.prototype.stroke_opacity = "1";
VEShapeStyle.prototype.stroke_color = "#0000FF";
VEShapeStyle.prototype.stroke_weight = "2pt";
VEShapeStyle.prototype.stroke_style = "Single";
VEShapeStyle.prototype.stroke_filltype = "solid";
VEShapeStyle.prototype.stroke_color2 = "red";
VEShapeStyle.prototype.stroke_dashstyle = "Solid";
VEShapeStyle.prototype.stroke_startarrow = "none";
VEShapeStyle.prototype.stroke_startarrowwidth = "medium";
VEShapeStyle.prototype.stroke_startarrowlength = "medium";
VEShapeStyle.prototype.stroke_endarrow = "none";
VEShapeStyle.prototype.stroke_endarrowwidth = "medium";
VEShapeStyle.prototype.stroke_endarrowlength = "medium";
VEShapeStyle.prototype.fill_drawtype = "v:fill";
VEShapeStyle.prototype.fill_color = "#008000";
VEShapeStyle.prototype.fill_colors = "30% yellow";
VEShapeStyle.prototype.fill_color2 = "blue";
VEShapeStyle.prototype.fill_type = "solid";
VEShapeStyle.prototype.fill_opacity = "0.3";
VEShapeStyle.prototype.fill_on = "false";
VEShapeStyle.prototype.textbox_drawtype = "v:textbox";
VEShapeStyle.prototype.textbox_text = "name";
VEShapeStyle.prototype.textbox_color = "#FFFFFF";
VEShapeStyle.prototype.textbox_bold = false;
VEShapeStyle.prototype.textbox_italic = false;
VEShapeStyle.prototype.textbox_underscore = false;
VEShapeStyle.prototype.textbox_font = "Arial";
VEShapeStyle.prototype.textbox_size = 7;
VEShapeStyle.prototype.imagedata_on = false;
VEShapeStyle.prototype.imagedata_src = null;
VEShapeStyle.prototype.isOn = false;
VEShapeStyle.prototype.textbox_OffsetX = 0;
VEShapeStyle.prototype.textbox_OffsetY = 0;
VEShapeStyle.prototype.textbox_backcolor = "#0000FF";
VEShapeStyle.textbox_color_opacity = "1";
VEShapeStyle.textbox_backcolor_opacity = "1";
VEShapeStyle.prototype.img_offsetX = 0;
VEShapeStyle.prototype.img_offsetY = 0;
VEShapeStyle.prototype.img_width = 22;
VEShapeStyle.prototype.img_height = 22;
VEShapeStyle.prototype.Clone = function () {var a = new VEShapeStyle;a.point_type = this.point_type;a.name = this.name;a.line_color = this.line_color;a.line_width = this.line_width;a.line_dasharray = this.line_dasharray;a.highlight_stroke_color = this.highlight_stroke_color;a.highlight_fill_color = this.highlight_fill_color;a.shape_drawtype = this.shape_drawtype;a.shape_fill = this.shape_fill;a.shape_filled = this.shape_filled;a.shape_unselectable = this.shape_unselectable;a.style_zIndex = this.style_zIndex;a.style_position = this.style_position;a.style_filter = this.style_filter;a.style_width = this.style_width;a.style_height = this.style_height;a.style_visibility = this.style_visibility;a.style_display = this.style_display;a.stroke_drawtype = this.stroke_drawtype;a.stroke_on = this.stroke_on;a.stroke_joinstyle = this.stroke_joinstyle;a.stroke_endcap = this.stroke_endcap;a.stroke_opacity = this.stroke_opacity;a.stroke_color = this.stroke_color;a.stroke_weight = this.stroke_weight;a.stroke_style = this.stroke_style;a.stroke_filltype = this.stroke_filltype;a.stroke_color2 = this.stroke_color2;a.stroke_dashstyle = this.stroke_dashstyle;a.stroke_startarrow = this.stroke_startarrow;a.stroke_startarrowwidth = this.stroke_startarrowwidth;a.stroke_startarrowlength = this.stroke_startarrowlength;a.stroke_endarrow = this.stroke_endarrow;a.stroke_endarrowwidth = this.stroke_endarrowwidth;a.stroke_endarrowlength = this.stroke_endarrowlength;a.fill_drawtype = this.fill_drawtype;a.fill_color = this.fill_color;a.fill_colors = this.fill_colors;a.fill_color2 = this.fill_color2;a.fill_type = this.fill_type;a.fill_opacity = this.fill_opacity;a.fill_on = this.fill_on;a.textbox_drawtype = this.textbox_drawtype;a.textbox_text = this.textbox_text;a.textbox_color = this.textbox_color;a.textbox_bold = this.textbox_bold;a.textbox_italic = this.textbox_italic;a.textbox_underscore = this.textbox_underscore;a.textbox_backcolor = this.textbox_backcolor;a.imagedata_on = this.imagedata_on;a.imagedata_src = this.imagedata_src;a.isOn = this.isOn;a.textbox_OffsetX = this.textbox_OffsetX;a.textbox_OffsetY = this.textbox_OffsetY;a.img_offsetX = this.img_offsetX;a.img_offsetY = this.img_offsetY;a.img_width = this.img_width;a.img_height = this.img_height;return a;};

function VE_MapLineClip() {
    var b = -360, c = 360, d = -180, e = 180, a = {LEFT:1, RIGHT:2, BOTTOM:4, TOP:8};

    function h(i, s, u, t, v) {
        b = s;
        c = t;
        d = u;
        e = v;
        if (typeof i == "undefined" || i == null || i.length < 4) {
            return null;
        }
        var m = false, o = i.length;
        if (i[o - 2] == i[0] && i[o - 1] == i[1]) {
            m = true;
        }
        var f = [];
        for (var l = 0; l < i.length; l++) {
            f.push(i[l]);
        }
        var k = a.LEFT;
        while (k <= 8) {
            var q = f[f.length - 2], r = f[f.length - 1];
            f.push(q);
            f.push(r);
            var h = [], p = f.length;
            for (var j = 0; j < p - 2; j = j + 2) {
                g(h, k, f[j], f[j + 1], f[j + 2], f[j + 3]);
            }
            if (m) {
                var n = h.length;
                if (h[n - 2] != h[0] || h[n - 1] != h[1]) {
                    h.push(h[0]);
                    h.push(h[1]);
                }
            }
            f = null;
            k = k * 2;
            f = h;
        }
        return f;
    }


    function g(g, j, h, i, k, l) {
        var n = f(h, i), o = f(k, l);
        if ((j & n) == 0 && (j & o) == 0) {
            g.push(h);
            g.push(i);
        } else if ((j & n) == 0 || (j & o) == 0) {
            var m = (j & n) == 0 ? true : false;
            if (j == a.LEFT) {
                var q = i + (l - i) * (b - h) / (k - h);
                if (m) {
                    g.push(h);
                    g.push(i);
                }
                g.push(b);
                g.push(q);
            } else if (j == a.RIGHT) {
                var q = i + (l - i) * (c - h) / (k - h);
                if (m) {
                    g.push(h);
                    g.push(i);
                }
                g.push(c);
                g.push(q);
            } else if (j == a.TOP) {
                var p = h + (k - h) * (e - i) / (l - i);
                if (m) {
                    g.push(h);
                    g.push(i);
                }
                g.push(p);
                g.push(e);
            } else if (j == a.BOTTOM) {
                var p = h + (k - h) * (d - i) / (l - i);
                if (m) {
                    g.push(h);
                    g.push(i);
                }
                g.push(p);
                g.push(d);
            }
        }
    }


    function f(g, h) {
        var f = 0;
        if (g < b) {
            f = f | a.LEFT;
        } else if (g > c) {
            f = f | a.RIGHT;
        }
        if (h < d) {
            f = f | a.BOTTOM;
        } else if (h > e) {
            f = f | a.TOP;
        }
        return f;
    }

    this.Clip = h;
}

VE_LineClip = new VE_MapLineClip;
var L_GraphicsInitError_Text = "Your Web browser does not support SVG or VML. Some graphics features may not function properly.";
_VERegisterNamespaces("Msn.Drawing");
Msn.Drawing.Graphic = function () {};
Msn.Drawing.Graphic.CreateGraphic = function (f, c) {if (document.all) {return new Msn.Drawing.VMLGraphic(f, c);} else {var b = 0, e = 0, g = new RegExp("Firefox/(.*)"), d = g.exec(navigator.userAgent);if (d[1]) {var a = d[1].split(".");if (a) {b = a[0];e = a[1];if (parseInt(b) > 0 && parseInt(e) >= 5 || parseInt(b) >= 2) {return new Msn.Drawing.SVGGraphic(f, c);}}}throw new Msn.Drawing.Exception(L_GraphicsInitError_Text);}};
Msn.Drawing.BaseGraphic = function () {this._stroke = new Msn.Drawing.Stroke;};
Msn.Drawing.BaseGraphic.prototype.CreatePrimitive = function () {};
Msn.Drawing.BaseGraphic.prototype.DrawPrimitive = function (d, c, a) {var b = new VEShapeStyle;if (a._stroke) {b.stroke_weight = a._stroke.width;b.stroke_joinstyle = a._stroke.linejoin;b.stroke_color = a._stroke.color.ToHexString();b.stroke_dashstyle = a._stroke.linecap;b.stroke_opacity = a._stroke.color.A.toString();b.fill_color = a._stroke.fillcolor.ToHexString();b.fill_opacity = a._stroke.fillcolor.A.toString();}c.symbol = b;var e = a.CreatePrimitive(d, c, "");return e;};
Msn.Drawing.BaseGraphic.prototype.SetStroke = function (a) {this._stroke = a;};
Msn.Drawing.VMLGraphic = function (c, d) {Msn.Drawing.BaseGraphic.call();var g = new Msn.Drawing.Color(255, 0, 0, 1), f = new Msn.Drawing.Color(255, 0, 0, 1), e = 1, a = c;c.unselectable = "on";var b = [];this.DrawPrimitive = function (f, e) {var c = Msn.Drawing.VMLGraphic.prototype.DrawPrimitive(d, f, this);if (a && c) {if (e) {a.appendChild(wrapVmlElementInDiv(c));} else {a.appendChild(c);}b.push(c);}};this.resetOffset = function () {};this.SetZIndex = function (a) {e = a;};this.Clear = function () {var a = null, c = null;while ((a = b.pop())) {c = a.parentElement;if (c) {c.removeChild(a);}a = null;}};this.Destroy = function () {this.Clear();a = null;};};
Msn.Drawing.VMLGraphic.prototype = new Msn.Drawing.BaseGraphic;
Msn.Drawing.VMLGraphic.prototype.CreatePrimitive = function (d, a) {var b = null;if (a.type == VEShapeType.Pushpin) {if (a.symbol.shape_drawtype == "v:oval" || a.symbol.shape_drawtype == "v:rect" || a.symbol.shape_drawtype == "v:roundrect") {b = document.createElement(a.symbol.shape_drawtype);} else {b = document.createElement("v:roundrect");}var f = LatLongtoRoundedPixel(d, a.points[1], a.points[0]);b.style.width = a.symbol.style_width;b.style.height = a.symbol.style_height;b.style.left = -5 + f.x + d.GetOffsetX() + "px";b.style.top = -5 + f.y + d.GetOffsetY() + "px";b.style.position = a.symbol.style_position;} else {b = document.createElement("v:shape");var g = null;g = GetVmlPath(d, a);var h = d.GetMapWidth(), i = d.GetMapHeight();b.style.top = d.GetOffsetY() + "px";b.style.left = d.GetOffsetX() + "px";b.style.width = h + "px";b.style.height = i + "px";b.coordsize = h + " " + i;b.style.position = a.symbol.style_position;b.path = g;}b.id = a.id != 0 ? a.id : a.iid;b.style.zIndex = a.symbol.style_zIndex;b.unselectable = a.symbol.shape_unselectable;var c = document.createElement("v:stroke");c.joinstyle = a.symbol.stroke_joinstyle;c.endcap = a.symbol.stroke_endcap;c.opacity = a.symbol.stroke_opacity;c.dashstyle = a.symbol.stroke_dashstyle;c.filltype = a.symbol.stroke_filltype;c.color2 = a.symbol.stroke_color2;c.color = a.symbol.stroke_color;c.weight = a.symbol.stroke_weight;c.linestyle = a.symbol.stroke_style;if (a.type == VEShapeType.Polygon) {var e = document.createElement("v:fill");e.color = a.symbol.fill_color;e.colors = a.symbol.fill_colors;e.color2 = a.symbol.fill_color2;e.type = a.symbol.fill_type;e.opacity = a.symbol.fill_opacity;b.appendChild(e);} else if (a.type == VEShapeType.Polyline) {b.fill = false;b.filled = false;} else if (a.type == VEShapeType.Pushpin) {b.style.filter = a.symbol.style_filter;b.style.zIndex = a.symbol.style_zIndex;b.style.display = a.symbol.style_display;b.unselectable = a.symbol.shape_unselectable;b.fill = true;b.filled = true;b.fillcolor = a.symbol.fill_color;}b.appendChild(c);return b;};
Msn.Drawing.SVGGraphic = function (c, b) {Msn.Drawing.BaseGraphic.call();var g = new Msn.Drawing.Color(255, 0, 0, 1), f = new Msn.Drawing.Color(0, 255, 0, 1);_curmap = b;this._svgLayer = null;var d = 60, e = c, a = [];this.DrawPrimitive = function (d) {var c = Msn.Drawing.SVGGraphic.prototype.DrawPrimitive(b, d, this);if (c) {a.push(c);}};this.resetOffset = function () {_curmap.resetSvgLayer();};this.SetZIndex = function (a) {d = a;if (this._svgLayer != null) {this._svgLayer.SetZIndex(a);}};this.Destroy = function () {this.Clear();};this.Clear = function () {if (this._svgLayer == null) {return;}var b = null, c = null;while ((b = a.pop())) {c = b.parentNode;if (c) {c.removeChild(b);}b = null;}};};
Msn.Drawing.SVGGraphic.prototype = new Msn.Drawing.BaseGraphic;
Msn.Drawing.SVGGraphic.prototype.CreatePrimitive = function (a, b, c) {this._svgLayer = a.getSvgLayer();return this._svgLayer.addShape(b, c);};
Msn.Drawing.SvgLayer = function (f, g) {var c = g, b = null, e = false, h = false;if (e == false) {e = true;b = document.createElementNS("http://www.w3.org/2000/svg", "svg");b.setAttribute("height", "100%");b.setAttribute("width", "100%");f.appendChild(b);this.lineDashStyles = [];var a = this.lineDashStyles;a[0] = new Array("Solid", "none");a[1] = new Array("ShortDash", "6,2");a[2] = new Array("ShortDot", "2,2");a[3] = new Array("ShortDashDot", "6,2,2,2");a[4] = new Array("ShortDashDotDot", "6,2,2,2,2,2");a[5] = new Array("Dot", "2,6");a[6] = new Array("Dash", "10,6");a[7] = new Array("LongDash", "20,6");a[8] = new Array("DashDot", "10,6,2,6");a[9] = new Array("LongDashDot", "20,6,2,6");a[10] = new Array("LongDashDotDot", "20,6,2,6,2,6");}this.addShape = function (e) {if (b == null) {return;}var a = null;if (e.type == VEShapeType.Pushpin) {a = document.createElementNS("http://www.w3.org/2000/svg", "rect");var h = LatLongtoRoundedPixel(c, e.points[1], e.points[0]);a.setAttribute("x", h.x - 6);a.setAttribute("y", h.y - 6);a.setAttribute("width", "6pt");a.setAttribute("height", "6pt");a.setAttribute("stroke-width", e.symbol.stroke_weight);a.setAttribute("stroke", e.symbol.stroke_color);a.setAttribute("fill", e.symbol.fill_color);b.appendChild(a);} else if (e.type == VEShapeType.Polyline || e.type == VEShapeType.Polygon) {a = document.createElementNS("http://www.w3.org/2000/svg", "polyline");a.setAttribute("points", GetSvgPath(c, e.points));a.setAttribute("stroke", e.symbol.stroke_color);a.setAttribute("stroke-width", e.symbol.stroke_weight);a.setAttribute("stroke-linejoin", e.symbol.stroke_joinstyle);a.setAttribute("stroke-opacity", d(e.symbol.stroke_opacity));var g = this.lineDashStyles;for (var f = 0; f < g.length; f++) {if (e.symbol.stroke_dashstyle == g[f][0]) {a.setAttribute("stroke-dasharray", g[f][1]);}}if (e.type == VEShapeType.Polyline) {a.setAttribute("fill", "none");} else {a.setAttribute("fill", e.symbol.fill_color);a.setAttribute("fill-opacity", d(e.symbol.fill_opacity));}}if (a) {a.setAttribute("id", e.id != 0 ? e.id : e.iid);b.appendChild(a);}return a;};
function d(b) {var a = parseFloat(b);if (a == NaN) {a = 0.3;} else if (a > 1) {a /= 100;} else if (a < 0) {a = 0;}return a;}
this.SetZIndex = function (a) {if (!c.bShowSVG) {return;}c.GetsvgDiv().style.zIndex = a;};};

function GetSvgPath(f, c) {
    var b = "", a = 0, d = c.length / 2, g = 0;
    while (a < d) {
        var e = LatLongtoRoundedPixel(f, c[a * 2 + 1], c[a * 2]);
        b = b.concat(e.x, ",", e.y);
        a++;
        if (a < d) {
            b += ",";
        }
    }
    return b;
}


function LatLongtoRoundedPixel(b, d, e) {
    var c;
    if (typeof VEMap != "undefined" && VEMap.prototype.isPrototypeOf(b)) {
        c = new VELatLong(d, e);
    } else {
        c = new Msn.VE.LatLong(d, e);
    }
    var a = b.LatLongToPixel(c, b.GetZoomLevel());
    if (!a) {
        return null;
    }
    a.x = MathRound(a.x);
    a.y = MathRound(a.y);
    return a;
}


function GetVmlPath(g, a) {
    var c = a.points;
    if (!c) {
        return null;
    }
    var d = ["m "], b = 0, h = c.length;
    if (h >= 4) {
        var e = LatLongtoRoundedPixel(g, c[b * 2 + 1], c[b * 2]);
        if (!e) {
            return null;
        }
        d.push(e.x);
        d.push(",");
        d.push(e.y);
        d.push(" l ");
        ++b;
    }
    var f = false;
    if (a.type != VEShapeType.Pushpin) {
        if (a.minX == null ||
            a.minY == null || a.maxX == null || a.maxY == null) {
            f = false;
            a.minX = 360;
            a.minY = 360;
            a.maxX = -360;
            a.maxY = -360;
        } else {
            f = true;
        }
    }
    while (b < h / 2) {
        if (!f) {
            a.minX = Math.min(a.minX, c[b * 2]);
            a.minY = Math.min(a.minY, c[b * 2 + 1]);
            a.maxX = Math.max(a.maxX, c[b * 2]);
            a.maxY = Math.max(a.maxY, c[b * 2 + 1]);
        }
        var e = LatLongtoRoundedPixel(g, c[b * 2 + 1], c[b * 2]);
        if (!e) {
            return null;
        }
        d.push(e.x);
        d.push(",");
        d.push(e.y);
        d.push(" ");
        ++b;
    }
    d.push(" e");
    return d.join("");
}


function GetCurrentMapViewBounds(b) {
    var o = b.GetCenterLongitude(), p = b.GetCenterLatitude(), a = b.LatLongToPixel(new Msn.VE.LatLong(p, o)), h = b.GetMapWidth(), g = b.GetMapHeight();
    if (!a || isNaN(a.x) || isNaN(a.y)) {
        return new Msn.VE.Bounds(0, 0, - Infinity, - Infinity, Infinity, Infinity);
    }
    var l, n, k, m, j = false, q = b.GetMapStyle(), c = b.PixelToLatLong(new VEPixel(a.x - h / 2, a.y + g / 2)), d = b.PixelToLatLong(new VEPixel(a.x + h / 2, a.y - g / 2));
    if (q == "o") {
        var e = b.PixelToLatLong(new VEPixel(a.x - h / 2, a.y - g / 2)), f = b.PixelToLatLong(new VEPixel(a.x + h / 2, a.y + g / 2));
        if (c != null && d != null && e != null && f != null) {
            l = Math.min(c.longitude, d.longitude, e.longitude, f.longitude);
            n = Math.min(c.latitude, d.latitude, e.latitude, f.latitude);
            k = Math.max(c.longitude, d.longitude, e.longitude, f.longitude);
            m = Math.max(c.latitude, d.latitude, e.latitude, f.latitude);
        } else {
            j = true;
        }
    } else if (c != null && d != null) {
        l = Math.min(c.longitude, d.longitude);
        n = Math.min(c.latitude, d.latitude);
        k = Math.max(c.longitude, d.longitude);
        m = Math.max(c.latitude, d.latitude);
    } else {
        j = true;
    }
    var i = null;
    if (j) {
        i = new Msn.VE.Bounds(0, 0, - Infinity, - Infinity, Infinity, Infinity);
    } else {
        i = new Msn.VE.Bounds(0, 0, l, n, k, m);
    }
    return i;
}


function GetBufferedMapViewBounds(b, a) {
    var c = null, e = Math.abs(a.x2 - a.x1), d = Math.abs(a.y2 - a.y1);
    c = new Msn.VE.Bounds(0, 0, a.x1 - b * e, a.y1 - b * d, a.x2 + b * e, a.y2 + b * d);
    return c;
}


function IsContainedInView(a, b) {
    var c = false;
    if (b.x1 > a.x1 && b.y1 > a.y1 && b.x2 < a.x2 && b.y2 < a.y2) {
        c = true;
    }
    return c;
}

Msn.Drawing.ComputeBoundingBox = function (a) {if (typeof a == "undefined" || a == null || a.length == 0) {return null;}var c = [], f = Infinity, g = Infinity, d = - Infinity, e = - Infinity;for (var b = 0; b < a.length; b = b + 2) {f = Math.min(f, a[b]);g = Math.min(g, a[b + 1]);d = Math.max(d, a[b]);e = Math.max(e, a[b + 1]);}c[0] = f;c[1] = g;c[2] = d;c[3] = e;return c;};

function IsBoundsIntersect(a, b) {
    if (a == null) {
        return true;
    }
    if (b == null) {
        return true;
    }
    if (a.x2 < b.x1 || a.x1 > b.x2 || a.y2 < b.y1 || a.y1 > b.y2) {
        return false;
    }
    return true;
}


function IsDisplayShape(d, c, e, g, f, h) {
    if (c == 0) {
        return true;
    }
    if (e == f && g == h) {
        return true;
    }
    var a = null, b = null;
    a = d.LatLongToPixel(new Msn.VE.LatLong(g, e));
    b = d.LatLongToPixel(new Msn.VE.LatLong(h, f));
    if (a == null || b == null) {
        return true;
    }
    if (Math.abs(b.y - a.y) > c || Math.abs(b.x - a.x) > c) {
        return true;
    } else {
        return false;
    }
}


function IsRecIntersect(c, d, a, b, g, h, e, f) {
    if (a < g || c > e || b < h || d > f) {
        return false;
    }
    return true;
}


function wrapVmlElementInDiv(a) {
    var c = Msn.VE.Css.Functions.getComputedStyle, b = document.createElement("div");
    b.className = "VmlContainer";
    b.style.left = c(a, "left");
    b.style.top = c(a, "top");
    b.style.width = c(a, "width");
    b.style.height = c(a, "height");
    a.style.position = "relative";
    a.style.left = "0px";
    a.style.top = "0px";
    a.style.width = "100%";
    a.style.height = "100%";
    b.appendChild(a);
    return b;
}


function VEColorToHexString(c, b, a) {
    return "#" + Number(c).toString(16) + (c < 16 ? "0" : "") + Number(b).toString(16) + (b < 16 ? "0" : "") + Number(a).toString(16) + (a < 16 ? "0" : "");
}


function VEHexStringToColor() {
    this.Convert = function (a) {a = a.toUpperCase();var b = hTov(a.substring(0, 1)), c = hTov(a.substring(1, 2)), d = hTov(a.substring(2, 3)), e = hTov(a.substring(3, 4)), f = hTov(a.substring(4, 5)), g = hTov(a.substring(5, 6)), h = b * 16 + c, i = d * 16 + e, j = f * 16 + g;return new VEColor(h, i, j, 1);};

    function hTov(h) {
        var v = 0;
        if (h == "A") {
            v = 10;
        } else if (h == "B") {
            v = 11;
        } else if (h == "C") {
            v = 12;
        } else if (h == "D") {
            v = 13;
        } else if (h == "E") {
            v = 14;
        } else if (h == "F") {
            v = 15;
        } else {
            v = eval(h);
        }
        return v;
    }

}

_VERegisterNamespaces("Msn.VE");
$MVEM = new (function () {this.IsEnabled = function (a) {if (a == undefined) {throw new VEException("$MVEM.IsEnabled", "err_invalidfeature", "Specified feature is invalid.");}return a;};});

function VEException(b, c, a) {
    this.source = b;
    this.name = c;
    this.message = a;
}

VEException.prototype.Name = this.name;
VEException.prototype.Source = this.source;
VEException.prototype.Message = this.message;
_VERegisterNamespaces("Msn.VE.UI");
Msn.VE.UI.IEGlyphStates = {Unselected:"-unselected", Hover:"-hover", Pressed:"-pressed"};
Msn.VE.UI.IEGlyph = function (j, l) {var k = Msn.VE.UI, a, d, c, b;m();
function m() {a = document.createElement("div");if (j) {a.id = j;}b = l || "ieglyph";d = b + k.IEGlyphStates.Hover;c = b + k.IEGlyphStates.Pressed;a.className = b;if (!document.all) {return;}a.attachEvent("onmouseover", e);a.attachEvent("onmousedown", i);a.attachEvent("onmouseup", e);a.attachEvent("onmouseout", f);window.attachEvent("onunload", n);}
this.getElement = function () {return a;};this.setContent = function (b) {a.innerHTML = b;};
function n() {a.detachEvent("onmouseover", e);a.detachEvent("onmousedown", i);a.detachEvent("onmouseup", e);a.detachEvent("onmouseout", f);a = null;d = null;c = null;b = null;}

function e() {f();h(d);}

function i() {h(c);}

function f() {g(d);g(c);}

function h(b) {a.className += " " + b;}

function g(b) {var c = new RegExp(" " + b, "g");a.className = a.className.replace(c, "");}
};

function setScrollPosition(a, b, c) {
    if (!a) {
        return;
    }
    a.scrollTop = c;
    a.scrollLeft = b;
}


function pseudoHover(a) {
    if (!document.all) {
        return;
    }
    var c = function () {a.className += " ms_pseudoHover";}, b = function () {a.className = a.className.replace(/\s*ms_pseudoHover/g, "");};
    a.attachEvent("onmouseenter", c);
    a.attachEvent("onmouseleave", b);
    window.attachEvent("onunload", d);

    function d() {
        a.detachEvent("onmouseenter", c);
        a.detachEvent("onmouseleave", b);
    }

}


function pseudoHoverForChildren(d, a) {
    if (!document.all) {
        return;
    }
    if (!a) {
        a = "LI";
    }
    var c = d.getElementsByTagName(a);
    for (var b = 0; b < c.length; b++) {
        this.pseudoHover(c[b]);
    }
}


function pseudoHoverRemove(a) {
    if (!document.all) {
        return;
    }
    a.className = a.className.replace(/\s*ms_pseudoHover/g, "");
}


function setElementCursor(b, a) {
    b.style.cursor = a;
}


function setElementStyle(c, h, b, a) {
    var i = Msn.VE.Css;
    if (!a) {
        a = Msn.VE.Css.Units.Pixels;
    }
    switch (h) {
      case style.Height:
        d(c, b, a);
        break;
      case style.Width:
        e(c, b, a);
        break;
      case style.Top:
        g(c, b, a);
        break;
      case style.Left:
        f(c, b, a);
        break;
      default:;
    }

    function d(c, a, b) {
        try {
            c.style.height = a + b;
        } catch (d) {
        }
    }


    function e(c, b, a) {
        try {
            c.style.width = b + a;
        } catch (d) {
        }
    }


    function g(b, c, a) {
        try {
            b.style.top = c + a;
        } catch (d) {
        }
    }


    function f(b, c, a) {
        try {
            b.style.left = c + a;
        } catch (d) {
        }
    }

}

_VERegisterNamespaces("Msn.VE.Css");
Msn.VE.CurrentDomain = typeof Msn.VE.API != "undefined" && Msn.VE.API != null ? Msn.VE.API.Globals.vecurrentdomain : ".";
Msn.VE.Css = {Style:{Height:0, Width:1, Top:2, Left:3, Bottom:4, Right:5, Position:6, Margin:7, Padding:8, Display:9, Visibility:10}, Units:{Auto:"auto", Pixels:"px", Points:"pt", Ems:"em", Percentage:"%"}, Position:{Static:"static", Relative:"relative", Absolute:"absolute"}, Display:{None:"none", Block:"block", Table:"table", Inline:"inline"}, Visibility:{Visible:"visible", Hidden:"hidden"}, Cursors:{Auto:"auto", Default:"default", Crosshair:"crosshair", Pointer:"pointer", Move:"move", Wait:"wait", Text:"text", Help:"help", NResize:"n-resize", NEResize:"ne-resize", NWResize:"nw-resize", SResize:"s-resize", SEResize:"se-resize", SWResize:"sw-resize", EResize:"e-resize", WResize:"w-resize", CustomCursors:null, defineCustomCursors:function (c) {Msn.VE.Css.Cursors.CustomCursors = c;var b, d = c.length;for (b = 0; b < d; b++) {var a = c[b];Msn.VE.Css.Cursors[a.name] = "url(\"" + a.domain + a.path + "\"), " + a.fallback;}}}, RegEx:{RectClip:/rect\((auto|\d+px|\d*\.*\d+em|\d*\.*\d+pt)\s*,*\s*(auto|\d+px|\d*\.*\d+em|\d*\.*\d+pt)\s*,*\s*(auto|\d+px|\d*\.*\d+em|\d*\.*\d+pt)\s*,*\s*(auto|\d+px|\d*\.*\d+em|\d*\.*\d+pt)\)/}, Functions:{addClass:function (a) {this.alterClass(a, arguments, true);}, removeClass:function (a) {this.alterClass(a, arguments, false);}, alterClass:function (a, e, g) {var c, h = e.length;for (c = 1; c < h; c++) {var d = e[c], d = e[c].replace(/^\s*/, "").replace(/\s*$/, "");if (d.indexOf(" ") != -1) {continue;}var f = new RegExp("(^| )" + d + "( |$)", "i");if (g) {if (!f.test(a.className)) {if (a.className == "") {a.className = d;} else {a.className += " " + d;}}} else {var b = a.className;b = b.replace(f, "$1");b = b.replace(/ $/, "");a.className = b;}}}, getComputedStyle:function (b, c) {var a = null;if (document.defaultView && document.defaultView.getComputedStyle && typeof document.defaultView.getComputedStyle != "undefined") {a = document.defaultView.getComputedStyle(b, null);} else {a = b.currentStyle;}return a[c];}, setClip:function (c, d, e) {var b = Msn.VE.Css.Functions.getClip(c, 0), f = Msn.VE.Css.RegEx.RectClip, a = f.exec(b);a[d] = e;if (d == 0) {c.style.clip = a[0];} else {a[d] = e;a.shift();b = "rect(" + a.join(" ") + ")";c.style.clip = b;}}, getClip:function (d, e) {var b = d.style.clip;if (b == "") {var b = Msn.VE.Css.Functions.getComputedStyle(d, "clip");if (b == "auto") {b = "rect(auto auto auto auto)";} else if (typeof b == "undefined" || b == null) {var c = d.currentStyle;if (typeof c != "undefined" && c != null) {b = "rect(" + c.clipTop + " " + c.clipRight + " " + c.clipBottom + " " + c.clipLeft + ")";}}}var f = Msn.VE.Css.RegEx.RectClip, a = f.exec(b);if (e == 0) {return a[0];}a[1] = a[1] == "auto" ? 0 : a[1];a[4] = a[4] == "auto" ? 0 : a[4];a[2] = a[2] == "auto" ? d.offsetWidth : a[2];a[3] = a[3] == "auto" ? d.offsetHeight : a[3];if (e == 5) {return a;} else {return a[e];}}}};
_VERegisterNamespaces("Msn.VE");
Msn.VE.OSType = {Windows:1, Windows95:2, Windows98:3, WindowsMillenium:4, WindowsNT:5, WindowsNT4:6, Windows2000:7, Windows2000SP1:8, WindowsXP:9, WindowsXPSP2:10, WindowsServer2003:11, WindowsServer2003SP1:12, WindowsVista:13, MacOS:30, MacOS9:31, MacOSX:32, Linux:40, Unknown:100};
Msn.VE.CLRType = {CLR10:1, CLR11:2, CLR20:4, CLR30:8};
Msn.VE.BrowserType = {Firefox:1, MSIE:2, Opera:3, Unknown:10};
Msn.VE.BrowserCaps = {VML:1, SVG:2, WindowlessSelectElement:4, RightMouseButton:8, AddFavourite:16, VectorCapable:3};
Msn.VE.BrowserInfo = function () {var a = this;this.Type = null;this.BrowserCaps = 0;this.CLRType = 0;this.MajorVersion = null;this.MinorVersion = null;this.versionString = null;this.UserAgent = null;this.OSType = null;this.Locale = null;if (arguments.length == 0) {this.UserAgent = window.navigator.userAgent;this.currentBrowser = true;} else {this.UserAgent = arguments[0];this.currentBrowser = false;if (arguments.length >= 2) {this.Locale = arguments[1];}}this.IsCompatibleWith = function (c) {for (var b = 0; b < c.length; b++) {var a = c[b];if (a.Type == this.Type && (this.MajorVersion > a.MajorVersion || a.MajorVersion == this.MajorVersion && a.MinorVersion >= this.MinorVersion)) {return true;}}return false;};
function b() {if (a.UserAgent.indexOf("Mac") == -1 && (a.UserAgent.indexOf("Gecko") != -1 || a.UserAgent.indexOf("MSIE") != -1)) {a.BrowserCaps |= Msn.VE.BrowserCaps.RightMouseButton;}}

function c() {if (a.UserAgent.indexOf("MSIE 7") != -1 || a.UserAgent.indexOf("Gecko") != -1) {a.BrowserCaps |= Msn.VE.BrowserCaps.WindowlessSelectElement;}}

function j() {if (a.UserAgent.indexOf("Mac") == -1 && (a.UserAgent.indexOf("MSIE 5") != -1 || a.UserAgent.indexOf("MSIE 6") != -1 || a.UserAgent.indexOf("MSIE 7") != -1)) {a.BrowserCaps |= Msn.VE.BrowserCaps.VML;}}

function i() {if (a.UserAgent.indexOf("MSIE") == -1) {var c = 0, e = 0, f = new RegExp("Firefox/(.*)"), d = f.exec(a.UserAgent);if (d[1]) {var b = d[1].split(".");if (b) {c = b[0];e = b[1];if (parseInt(c) > 0 && parseInt(e) >= 5) {a.BrowserCaps |= Msn.VE.BrowserCaps.SVG;}}}}}

function h() {try {if (a.UserAgent.indexOf("MSIE") != -1) {a.BrowserCaps |= Msn.VE.BrowserCaps.AddFavourite;}} catch (b) {}}
this.GetVersionString = function () {if (this.versionString == null) {if (a.UserAgent.indexOf("Win") != -1 && a.UserAgent.indexOf("MSIE") != -1) {var b = null, c;try {b = document.createElement("<DIV STYLE='behavior:url(#default#clientCaps); display: none' ID='__clientCaps'>");document.body.appendChild(b);c = b.getComponentVersion("{89820200-ECBD-11CF-8B85-00AA005B4383}", "componentid");} catch (d) {c = a.MajorVersion + "." + a.MinorVersion;} finally {if ($ID("__clientCaps") != null) {$ID("__clientCaps").parentNode.removeChild(b);}}this.versionString = c;} else if (a.MajorVersion != null && a.MajorVersion != null) {this.versionString = a.MajorVersion + "." + a.MinorVersion;} else {this.versionString = "";}}return this.versionString;};
function e() {if (a.UserAgent.indexOf("MSIE") != -1) {var c = new RegExp("MSIE ([0-9]).([0-9])"), b = c.exec(a.UserAgent);if (b != null) {a.MajorVersion = parseInt(b[1]);a.MinorVersion = parseInt(b[2]);return;}} else if (a.UserAgent.indexOf("Firefox") != -1) {var c = new RegExp("Firefox/([0-9]).([0-9])(.*)"), b = c.exec(a.UserAgent);if (b != null) {a.MajorVersion = parseInt(b[1]);a.MinorVersion = parseInt(b[2]);return;}} else if (a.UserAgent.indexOf("Opera") != -1) {var c = new RegExp("Opera/([0-9]).([0-9])"), b = c.exec(a.UserAgent);if (b != null) {a.MajorVersion = parseInt(b[1]);a.MinorVersion = parseInt(b[2]);return;}}a.MajorVersion = null;a.MinorVersion = null;}

function g() {if (a.UserAgent.indexOf("Mac OS X") != -1) {a.OSType = Msn.VE.OSType.MacOSX;} else if (a.UserAgent.indexOf("Mac") != -1) {a.OSType = Msn.VE.OSType.MacOS;} else if (a.UserAgent.indexOf("Linux") != -1) {a.OSType = Msn.VE.OSType.Linux;} else if (a.UserAgent.indexOf("Win95") != -1 || a.UserAgent.indexOf("Windows 95") != -1) {a.OSType = Msn.VE.OSType.Windows95;} else if (a.UserAgent.indexOf("Win98") != -1 || a.UserAgent.indexOf("Windows 98") != -1) {a.OSType = Msn.VE.OSType.Windows98;} else if (a.UserAgent.indexOf("Win 9x 4.90") != -1) {a.OSType = Msn.VE.OSType.WindowsMillenium;} else if (a.UserAgent.indexOf("Windows NT 4.0") != -1) {a.OSType = Msn.VE.OSType.WindowsNT4;} else if (a.UserAgent.indexOf("Windows NT 5.01") != -1) {a.OSType = Msn.VE.OSType.Windows2000SP1;} else if (a.UserAgent.indexOf("Windows NT 5.0") != -1) {a.OSType = Msn.VE.OSType.Windows2000;} else if (a.UserAgent.indexOf("Windows NT 5.1") != -1 && a.UserAgent.indexOf("SV1") != -1) {a.OSType = Msn.VE.OSType.WindowsXPSP2;} else if (a.UserAgent.indexOf("Windows NT 5.1") != -1) {a.OSType = Msn.VE.OSType.WindowsXP;} else if (a.UserAgent.indexOf("Windows NT 5.2") != -1 && a.UserAgent.indexOf("SV1") != -1) {a.OSType = Msn.VE.OSType.WindowsServer2003SP1;} else if (a.UserAgent.indexOf("Windows NT 5.2") != -1) {a.OSType = Msn.VE.OSType.WindowsServer2003;} else if (a.UserAgent.indexOf("Windows NT 6.0") != -1) {a.OSType = Msn.VE.OSType.WindowsVista;} else if (a.UserAgent.indexOf("Windows NT") != -1) {a.OSType = Msn.VE.OSType.WindowsNT;} else if (a.UserAgent.indexOf("Win") != -1) {a.OSType = Msn.VE.OSType.Windows;} else {a.OSType = Msn.VE.OSType.Unknown;}}

function d() {if (a.UserAgent.indexOf(".NET CLR 1.0") != -1) {a.CLRType |= Msn.VE.CLRType.CLR10;}if (a.UserAgent.indexOf(".NET CLR 1.1") != -1) {a.CLRType |= Msn.VE.CLRType.CLR11;}if (a.UserAgent.indexOf(".NET CLR 2.0") != -1) {a.CLRType |= Msn.VE.CLRType.CLR20;}if (a.UserAgent.indexOf(".NET CLR 3.0") != -1) {a.CLRType |= Msn.VE.CLRType.CLR30;}}

function f() {if (a.Locale != null) {return;}if (a.UserAgent.indexOf("MSIE") != -1) {if (navigator.browserLanguage) {a.Locale = navigator.browserLanguage;}if (navigator.userLanguage) {a.Locale = navigator.userLanguage;}if (navigator.systemLanguage) {a.Locale = navigator.systemLanguage;}} else if (a.UserAgent.indexOf("Gecko") != -1) {var c = new RegExp("; (.*); rv:"), b = c.exec(a.UserAgent);if (b[1]) {a.Locale = b[1].substring(b[1].lastIndexOf(" "), b[1].length + 1);}} else if (a.UserAgent.indexOf("Opera") != -1) {var c = new RegExp(" (.*))"), b = c.exec(a.UserAgent);if (b[1]) {a.Locale = b[1].substring(b[1].lastIndexOf(" "), b[1].length + 1);}} else {a.Locale = "en-US";}}

function k() {if (a.UserAgent.indexOf("Gecko") != -1) {a.Type = Msn.VE.BrowserType.Firefox;} else if (a.UserAgent.indexOf("MSIE") != -1) {a.Type = Msn.VE.BrowserType.MSIE;} else if (a.UserAgent.indexOf("Opera") != -1) {a.Type = Msn.VE.BrowserType.Opera;} else {a.Type = Msn.VE.BrowserType.Unknown;}e();g();d();f();h();i();j();c();b();}
k();};
Msn.VE.Environment = function () {};
Msn.VE.Environment.Redirect = function (a) {window.location.href = a;};
Msn.VE.Environment.BrowserInfo = new Msn.VE.BrowserInfo;
_VERegisterNamespaces("Msn.VE");
Msn.VE.PushPinTypes = {Default:0, SearchResult:1, Annotation:2, Direction:3, DirectionTemp:4, TrafficLight:5, TrafficOthers:6, YouAreHere:7, AdStandard:8, AdWide:9, AdCategory:10, AdRoofStandard:11, AdRoofWide:12, DirectionStep:13, Context:14};
Msn.VE.MapActionMode = {ModeUnknown:0, Mode2D:1, Mode3D:2, ModeOblique:3};
Msn.VE.LineJoinMode = {Straight:"miter", Round:"round"};
Msn.VE.Css.Cursors.defineCustomCursors([{name:"Grab", domain:".", path:"/cursors/grab.cur", fallback:"move"}, {name:"Grabbing", domain:".", path:"/cursors/grabbing.cur", fallback:"move"}, {name:"Target", domain:".", path:"/cursors/target.cur", fallback:"crosshair"}]);
Msn.VE.MapControl = function (p_elSource, p_htParams, p_parentAPIControl) {var offsetMeters = 20971520, baseMetersPerPixel = 163840, buffer = 0, maxTilePixelBuffer = 768, animatedMovementEnabled = true, zoomTotalSteps = 6, keyboardPanSpeed = 15, panToLatLongSpeed = 15, earthRadius = 6378137, earthCircumference = earthRadius * 2 * Math.PI, projectionOffset = earthCircumference * 0.5, minZoom = 1, maxZoom = 19, emptyTile = "http://virtualearth.msn.com/i/spacer.gif", minLatitude = -85, maxLatitude = 85, minLongitude = -180, maxLongitude = 180, tileSize = 256, generations = new Object, vemanifestdomain = "http://local.live.com", zoomLevelToAdjustObliqueToOrthro = 18, kbInputZIndex = 0, containerZIndex = 0, mapZIndex = 1, swapZIndex = 1, baseZIndex = 2, debugZIndex = 3, baseZIndex = 11, topZIndex = 20, p_this = this, m_clientToken = null, cssCursors = Msn.VE.Css.Cursors, cssFn = Msn.VE.Css.Functions, roadStyle = "r", shadedStyle = "s", hybridStyle = "h", aerialStyle = "a", obliqueStyle = "o", mapTiles = "Road", trafficTiles = "Traffic", marketMaxZoom = 1, currentView = new Msn.VE.MapView(p_this), preferredView = new Msn.VE.MapView(p_this), previousZoomLevel = 1, previousCenter = null, lastViewChangeType = null, previousMapStyle = null, lastOrthoZoomLevel = 15, lastOrthoMapStyle = roadStyle, x = 0, y = 0, width = 0, height = 0, trafficAvailable = false, tileLayerManager = new VETileLayerManager, originX = 0, originY = 0, offsetX = 0, offsetY = 0, tileViewportX1 = 0, tileViewportY1 = 0, tileViewportX2 = 0, tileViewportY2 = 0, tileViewportWidth = 0, tileViewportHeight = 0, dragging = false, keyboardPan = false, lastMouseX = 0, lastMouseY = 0, zooming = false, zoomCounter = 0, panning = false, panCounter = 0, panningX = 0, panningY = 0, panLatitude = null, panLongitude = null, pushpins = [], lines = [], map = document.createElement("div"), keyboard = document.createElement("input");keyboard.id = "wl_ve_mapInput";var logo = null, scaleBar = null, copyright = null, dashboardContainer = null, dashboard = null, minimapControl = null, minimapContainer = null, mouseZoomDisabled = false, isMinimap = false, boxTool = null, panTool = null, targetTool = null, currentTool = null, orthoMode = null, obliqueMode = null, threeDMode = null, currentMode = null, previousMode = null, Initialized2D = false, currentBounds = null, defaultEventTable = [], customEventTable = [], debug = false, graphicCanvas = null, svgLayer = null, svgDiv = null, bShowSVG = true;this.GetsvgDiv = function () {return svgDiv;};var mapCenterOffset = new VEPixel(0, 0), resizeInProgress = false, view3DCreated = false, spacecontrol = false, spacediv = null, spaceCameraIsFlying = false, init3dparam = null, resizeTimer = null, traffic3dAdded = false, initial3dView = null, cameraUpdateCount = 0;
function SetChildDiv(a) {map.appendChild(a);}

function EnableGeoCommunity(a) {hijackMouseMove = a;}

function IsGeoCommunityEnabled() {return hijackMouseMove;}

function GetOffsetX() {return offsetX;}

function GetOffsetY() {return offsetY;}
this.Init = function () {generations[roadStyle] = 66;generations[aerialStyle] = 66;generations[hybridStyle] = 66;generations[obliqueStyle] = 66;orthoMode = new OrthoMode;orthoMode.Init();if (p_htParams.clientToken) {m_clientToken = p_htParams.clientToken;}if (p_htParams.obliqueEnabled && p_htParams.obliqueUrl) {obliqueMode = new ObliqueMode;obliqueMode.SetGUID(p_htParams.mapGUID);obliqueMode.SetClientToken(p_htParams.clientToken);obliqueMode.Init(p_htParams.obliqueUrl);}threeDMode = new ThreeDMode;threeDMode.Init();UpdateFromParent();map.className = "MSVE_Map";map.style.zIndex = mapZIndex;p_elSource.appendChild(map);cssFn.addClass(p_elSource, "MSVE_MapContainer");keyboard.className = "MSVE_KeyboardInput";p_elSource.appendChild(keyboard);if (!p_htParams.fixedView) {p_elSource.attachEvent("onmousedown", MouseDown);p_elSource.attachEvent("onmouseup", MouseUp);p_elSource.attachEvent("onmousemove", MouseMove);p_elSource.attachEvent("ondblclick", MouseDoubleClick);p_elSource.attachEvent("oncontextmenu", ContextMenu);p_elSource.attachEvent("onclick", MouseClick);p_elSource.attachEvent("onmouseout", MouseOut);p_elSource.attachEvent("onmouseover", MouseOver);p_elSource.attachEvent("onmouseenter", MouseEnter);p_elSource.attachEvent("onmouseleave", MouseLeave);}if (p_htParams.buffer != undefined && p_htParams.buffer != null) {SetTilePixelBuffer(p_htParams.buffer);}var startIn3DMode = false;if (p_htParams.mapMode != "undefined" && p_htParams.mapMode != null && p_htParams.mapMode == Msn.VE.MapActionMode.Mode3D || p_htParams.altitude && p_htParams.altitude > -1000 || p_htParams.tilt && p_htParams.tilt != -90 || p_htParams.direction && p_htParams.direction != 0) {SetMapTiles();startIn3DMode = true;currentMode = threeDMode;}init3dparam = p_htParams.mapGUID;if ((p_htParams.latitude != null && typeof p_htParams.latitude != "undefined" && p_htParams.longitude != null && typeof p_htParams.longitude != "undefined" && p_htParams.zoomlevel != null && typeof p_htParams.zoomlevel != "undefined" || p_htParams.boundingBox != null && typeof p_htParams.boundingBox != "undefined") && p_htParams.mapstyle != null && typeof p_htParams.mapstyle != "undefined") {try {var initialView = new Msn.VE.MapView(p_this);initialView.SetMapStyle(ValidateMapStyle(p_htParams.mapstyle), p_htParams.obliqueSceneId);if (p_htParams.boundingBox) {initialView.SetLatLongRectangle(p_htParams.boundingBox);if (startIn3DMode) {initialView.Resolve(orthoMode, width, height);}} else {initialView.SetZoomLevel(eval(p_htParams.zoomlevel));initialView.SetCenterLatLong(new Msn.VE.LatLong(eval(p_htParams.latitude), eval(p_htParams.longitude)));}if (p_htParams.altitude) {initialView.SetAltitude(p_htParams.altitude);}if (p_htParams.tilt) {initialView.SetTilt(p_htParams.tilt);}if (p_htParams.direction) {initialView.SetDirection(p_htParams.direction);}if (!startIn3DMode) {SetMapTiles();}currentView = initialView;} catch (a) {if (!startIn3DMode) {SetDefaultView();} else {currentView = initialView;}}} else if (!startIn3DMode) {SetDefaultView();} else {currentView = initialView;}if (startIn3DMode) {this.Init3DOnly();} else {this.Init2DOnly();}if (typeof p_htParams.hideCopyright == "undefined" || !p_htParams.hideCopyright) {copyright = new Copyright(p_elSource);copyright.Init();copyright.Update();}if (typeof p_htParams.showMinimap != "undefined" && p_htParams.showMinimap) {var loadMinimapNow = false;if (obliqueMode != null && p_htParams.mapstyle == obliqueStyle) {loadMinimapNow = true;}CreateMinimap(null, null, null, loadMinimapNow);}if (p_htParams.showMapModeSwitch != false) {p_htParams.showMapModeSwitch = true;}if (p_htParams.showDashboard) {CreateDashboard(p_htParams.dashboardX, p_htParams.dashboardY, p_htParams.dashboardSize, p_htParams.dashboardId, p_htParams.showMapModeSwitch);}if (startIn3DMode) {copyright.Hide();}p_this.SetCursor(cssCursors.Grab);};AttachEvent("onstartmapstyleoblique", function () {targetTool.trackMovement();});AttachEvent("onendmapstyleoblique", function () {targetTool.ignoreMovement();});AttachEvent("onchangeview", function () {if (currentView.mapStyle == obliqueStyle) {var b = GetObliqueScene();if (b != null) {var a = Msn.VE.Geometry, c = new a.Point(GetLeftPosition(p_elSource) + (map.offsetLeft - originX), GetTopPosition(p_elSource) + (map.offsetTop - originY)), d = 2 / currentView.zoomLevel, f = new a.Point(c.x + b.GetWidth() / d, c.y + b.GetHeight() / d), e = new a.Rectangle(c, f);e.scale(-256);targetTool.setBoundingArea(e);a = null;b = null;}}});this.Init2DOnly = function (a) {mvcViewFacade.OnSwitchToFlatlandView();currentView.doRoadShading = typeof p_htParams.doRoadShading != "undefined" && p_htParams.doRoadShading == true;if (!p_htParams.fixedView) {boxTool = new BoxTool;boxTool.Init();panTool = new PanTool;panTool.Init();currentTool = panTool;keyboard.attachEvent("onkeydown", KeyDown);keyboard.attachEvent("onkeyup", KeyUp);keyboard.attachEvent("onblur", StopKeyboardPan);p_elSource.attachEvent("onmousewheel", MouseWheel);if (window.addEventListener && navigator.product && navigator.product == "Gecko") {p_elSource.addEventListener("DOMMouseScroll", MouseWheel, false);}}targetTool = new TargetTool;targetTool.init();if (!p_htParams.disableLogo) {logo = new Logo(p_elSource);logo.Init();}if (typeof copyright != "undefined" && copyright != null) {copyright.Show();}if (obliqueMode && currentMode != obliqueMode) {obliqueMode.UpdateAvailability();}graphicCanvas = GetGraphic(this);tileLayerManager.Active = true;SetMapTiles();if (currentView == null) {SetDefaultView();} else {if (a == true || !Initialized2D) {SetView(currentView);Initialized2D = true;}SetView(null);}if (p_htParams.showScaleBar) {scaleBar = new ScaleBar(p_elSource);scaleBar.Init();scaleBar.SetOffset(0, 10);AttachEvent("onendzoom", scaleBar.Update);AttachEvent("onendpan", scaleBar.Update);AttachEvent("onobliquechange", scaleBar.Update);AttachEvent("onresize", scaleBar.Reposition);}Fire("oninitmode", Msn.VE.MapActionMode.Mode2D);};this.Init3DOnly = function () {if (dashboardContainer) {if (window.navigator.userAgent.indexOf("Firefox") < 0) {UpdateIFrameShim(dashboardContainer);}}var b;try {if (currentView == null) {b = SetDefaultView();} else {var a = currentView.MakeCopy();if (currentView.mapStyle == obliqueStyle) {a.SetMapStyle(lastOrthoMapStyle);a.SetZoomLevel(a.GetZoomLevel() + zoomLevelToAdjustObliqueToOrthro);}a.SetCenterLatLong(new Msn.VE.LatLong(currentView.latlong.latitude, currentView.latlong.longitude));b = SetView(a);}} catch (d) {b = false;}if (!b) {this._Disable3DMode(true);return;}if (!view3DCreated) {return;}mvcViewFacade.OnSwitchToView3D(spacecontrol);if (typeof p_htParams.hideCopyright == "undefined" || !p_htParams.hideCopyright) {spacecontrol.ShowCopyright = true;}if (typeof copyright != "undefined" && copyright != null) {copyright.Hide();}if (p_htParams.showScaleBar) {spacecontrol.ShowScale = true;}if (window.locale) {spacecontrol.CurrentLocale = window.locale;spacecontrol.DisplayMetricUnits = MapControl.Features.ScaleBarKilometers;}var c = "Road";if (currentView.mapStyle == "a") {c = "Aerial";spacecontrol.ShowAtmosphere = true;}if (currentView.mapStyle == "h") {c = "Hybrid";spacecontrol.ShowAtmosphere = true;}if (currentView.mapStyle == "r") {spacecontrol.TexturesVisible = false;if (spacecontrol.HardwareClassificationLevel < 3) {c = "LowRoad";}spacecontrol.ShowAtmosphere = false;} else {spacecontrol.TexturesVisible = true;}spacecontrol.AddImageSource("Terrain", "Texture", vemanifestdomain + "/Manifests/" + c + "ContentManifest.xml", 0, 1);if (3 == spacecontrol.HardwareClassificationLevel) {spacecontrol.AddElevationSource("Terrain", "DEM", vemanifestdomain + "/Manifests/HighDemContentManifest.xml", 0);spacecontrol.AddModelSource("Model", "Model", vemanifestdomain + "/Manifests/ModelContentManifest.xml");} else if (2 == spacecontrol.HardwareClassificationLevel) {spacecontrol.AddElevationSource("Terrain", "DEM", vemanifestdomain + "/Manifests/DemContentManifest.xml", 0);spacecontrol.AddModelSource("Model", "Model", vemanifestdomain + "/Manifests/MedModelContentManifest.xml");} else {spacecontrol.AddElevationSource("Terrain", "DEM", vemanifestdomain + "/Manifests/DemContentManifest.xml", 0);}tileLayerManager.AddAllTileSourcesTo3D(spacecontrol);spacecontrol.AttachEvent("OnCameraChanged", "OnView3DUpdateViewpoint");spacecontrol.AttachEvent("OnHardwareCapabilitiesUpdate", "OnHardwareCapabilitiesUpdate");spacecontrol.AttachEvent("OnBeginCameraChange", "OnBeginFlyTo");if (!p_htParams.fixedView) {spacecontrol.AttachEvent("OnHover", "OnView3DPushpinHover");spacecontrol.AttachEvent("OnHoverEnd", "OnView3DHoverEnd");spacecontrol.AttachEvent("OnDropGeometry", "OnView3DDropGeometry");spacecontrol.AttachEvent("OnLatLonAltClicked", "OnView3DLatLonAltClicked");spacecontrol.AttachEvent("OnMouseDown", "OnMouseDown3D");spacecontrol.AttachEvent("OnMouseUp", "OnMouseUp3D");spacecontrol.AttachEvent("OnClick", "OnClick3D");spacecontrol.AttachEvent("OnMouseOver", "OnMouseOver3D");spacecontrol.AttachEvent("OnMouseOut", "OnMouseOut3D");spacecontrol.AttachEvent("OnDoubleClick", "OnDoubleClick3D");} else {spacecontrol.FixedView = true;}traffic3dAdded = false;if (typeof VE_TrafficManager != "undefined" && VE_TrafficManager != null) {VE_TrafficManager.GetTrafficInfo(false);}if (typeof VE_BrandFinderAdManager != "undefined" && VE_BrandFinderAdManager != null) {VE_BrandFinderAdManager.Clear();}if (!init3dparam) {Relay3DPushpins();}Fire("oninitmode", Msn.VE.MapActionMode.Mode3D);};this.ShowSVG = function (a) {bShowSVG = a;};this.getSvgLayer = function () {if (svgLayer == null) {svgDiv = document.createElement("div");svgDiv.style.position = "absolute";if (bShowSVG) {svgDiv.style.zIndex = 60;} else {svgDiv.style.zIndex = -1;}this.resizeSVG();map.appendChild(svgDiv);svgLayer = new Msn.Drawing.SvgLayer(svgDiv, this);}return svgLayer;};this.resetSvgLayer = function () {this.getSvgLayer();svgDiv.style.top = - parseInt(map.style.top) + "px";svgDiv.style.left = - parseInt(map.style.left) + "px";};this.resizeSVG = function () {if (svgDiv != null) {var b = GetWindowWidth(), a = GetWindowHeight();svgDiv.style.top = "0px";svgDiv.style.left = "0px";svgDiv.style.width = b + "px";svgDiv.style.height = a + "px";}};
function GetGraphic(a) {if (!graphicCanvas) {try {graphicCanvas = Msn.Drawing.Graphic.CreateGraphic(map, a);graphicCanvas.SetZIndex(17);} catch (b) {}}return graphicCanvas;}
this.GetDashboard = function () {return dashboard;};this.GetMinimap = function () {return minimapControl;};this.DisableZoomEvents = function (a) {mouseZoomDisabled = a;};this.SetMinimapMode = function () {mouseZoomDisabled = true;isMinimap = true;};this.SetCursor = function (a) {var b = p_elSource.style;if (b.cursor != a) {b.cursor = a;}};this.Destroy = function () {if (currentView) {currentView.Destroy();currentView = null;}if (preferredView) {preferredView.Destroy();preferredView = null;}if (copyright) {copyright.Destroy();copyright = null;}if (currentMode == threeDMode && currentMode != null) {this.Destroy3DOnly();} else {this.Destroy2DOnly();while (pushpins.length) {pushpins.pop().Destroy();}ClearLines();}if (!p_htParams.fixedView) {p_elSource.detachEvent("onmousedown", MouseDown);p_elSource.detachEvent("onmouseup", MouseUp);p_elSource.detachEvent("onmousemove", MouseMove);p_elSource.detachEvent("ondblclick", MouseDoubleClick);p_elSource.detachEvent("oncontextmenu", ContextMenu);p_elSource.detachEvent("onmousewheel", MouseWheel);p_elSource.detachEvent("onclick", MouseClick);p_elSource.detachEvent("onmouseout", MouseOut);p_elSource.detachEvent("onmouseover", MouseOver);p_elSource.detachEvent("onmouseenter", MouseEnter);p_elSource.detachEvent("onmouseleave", MouseLeave);}if (dashboard) {dashboard.Destroy();dashboard = null;}if (dashboardContainer) {dashboardContainer.detachEvent("onmousedown", IgnoreEvent);dashboardContainer.detachEvent("onmouseup", IgnoreEvent);dashboardContainer.detachEvent("onmousemove", DashboardContainerMouseMoveEvent);dashboardContainer.detachEvent("onmousewheel", IgnoreEvent);dashboardContainer.detachEvent("ondblclick", IgnoreEvent);dashboardContainer.detachEvent("oncontextmenu", IgnoreEvent);dashboardContainer.detachEvent("onkeydown", IgnoreEvent);dashboardContainer.detachEvent("onkeyup", IgnoreEvent);dashboardContainer = null;}if (minimapControl) {minimapControl.Destroy();minimapControl = null;}if (minimapContainer) {minimapContainer.detachEvent("onmousedown", IgnoreEvent);minimapContainer.detachEvent("onmouseup", IgnoreEvent);minimapContainer.detachEvent("onmousemove", IgnoreEvent);minimapContainer.detachEvent("onmousewheel", IgnoreEvent);minimapContainer.detachEvent("ondblclick", IgnoreEvent);minimapContainer.detachEvent("oncontextmenu", IgnoreEvent);minimapContainer.detachEvent("onkeydown", IgnoreEvent);minimapContainer.detachEvent("onkeyup", IgnoreEvent);minimapContainer = null;}if (orthoMode) {orthoMode.Destroy();orthoMode = null;}if (obliqueMode) {obliqueMode.Destroy();obliqueMode = null;}if (threeDMode) {threeDMode.Destroy();threeDMode = null;}DestroyEventTable();m_clientToken = null;keyboard = p_elSource = p_this = map = null;tileLayerManager.ClearTileLayers();cssCursors = null;cssFn = null;};this.Destroy2DOnly = function () {if (!p_htParams.fixedView) {keyboard.detachEvent("onkeydown", KeyDown);keyboard.detachEvent("onkeyup", KeyUp);keyboard.detachEvent("onblur", StopKeyboardPan);p_elSource.detachEvent("onmousewheel", MouseWheel);}tileLayerManager.Active = false;if (scaleBar) {DetachEvent("onendzoom", scaleBar.Update);DetachEvent("onendpan", scaleBar.Update);DetachEvent("onobliquechange", scaleBar.Update);DetachEvent("onresize", scaleBar.Reposition);scaleBar.Destroy();scaleBar = null;}if (logo) {logo.Destroy();logo = null;}if (boxTool) {boxTool.Destroy();boxTool = null;}if (panTool) {panTool.Destroy();panTool = null;}if (targetTool) {targetTool.destroy();targetTool = null;}if (graphicCanvas) {graphicCanvas.Destroy();graphicCanvas = null;}Fire("ondestroymode", Msn.VE.MapActionMode.Mode2D);};this.Destroy3DOnly = function () {view3DCreated = false;try {spacecontrol.Close();} catch (a) {}spacecontrol = false;window.status = "";if (spacediv != null) {spacediv.removeNode(true);spacediv = null;}if (dashboardContainer) {destroyIFrameShim(dashboardContainer.id);}Fire("ondestroymode", Msn.VE.MapActionMode.Mode3D);};
function UpdateFromParent() {x = GetLeftPosition(p_elSource);y = GetTopPosition(p_elSource);width = p_elSource.offsetWidth;height = p_elSource.offsetHeight;}

function CreateDashboard(d, e, a, b, c) {if (typeof a == "undefined" || a == null) {a = Msn.VE.DashboardSize.Normal;}dashboardContainer = document.createElement("div");if (typeof b == "undefined" || b == null) {b = "MSVE_dashboardId";}dashboardContainer.id = b;p_elSource.appendChild(dashboardContainer);dashboardContainer.style.top = e + "px";dashboardContainer.style.left = d + "px";dashboardContainer.attachEvent("onmousedown", IgnoreEvent);dashboardContainer.attachEvent("onmouseup", IgnoreEvent);dashboardContainer.attachEvent("onmousemove", DashboardContainerMouseMoveEvent);dashboardContainer.attachEvent("onmousewheel", IgnoreEvent);dashboardContainer.attachEvent("ondblclick", IgnoreEvent);dashboardContainer.attachEvent("oncontextmenu", IgnoreEvent);dashboardContainer.attachEvent("onkeydown", IgnoreEvent);dashboardContainer.attachEvent("onkeyup", IgnoreEvent);if (typeof view3DMode != "undefined") {if (currentMode == threeDMode && currentMode != null) {a = Msn.VE.DashboardSize.Normal;}dashboard = new Msn.VE.NavAction(dashboardContainer, p_this, a, c);dashboard.Init();} else {dashboard = new Msn.VE.Dashboard(dashboardContainer, p_this, a);dashboard.Init();}}

function DashboardContainerMouseMoveEvent(a) {a = GetEvent(a);return false;}

function CreateMinimap(a, b, e, c, d) {minimapContainer = document.createElement("div");minimapContainer.id = "MSVE_minimap";p_elSource.appendChild(minimapContainer);minimapContainer.className = "expanded MSVE_smallMinimap";minimapContainer.attachEvent("onmousedown", IgnoreEvent);minimapContainer.attachEvent("onmouseup", IgnoreEvent);minimapContainer.attachEvent("onmousemove", IgnoreEvent);minimapContainer.attachEvent("onmousewheel", IgnoreEvent);minimapContainer.attachEvent("ondblclick", IgnoreEvent);minimapContainer.attachEvent("oncontextmenu", IgnoreEvent);minimapContainer.attachEvent("onkeydown", IgnoreEvent);minimapContainer.attachEvent("onkeyup", IgnoreEvent);minimapControl = new Msn.VE.Minimap(minimapContainer, p_this, d);if (c) {minimapControl.Init();}if (a != null && typeof a != "undefined" && b != null && typeof b != "undefined") {minimapControl.SetPosition(a, b);}return minimapControl;}

function SetDefaultView() {var a = new Msn.VE.MapView(p_this);a.SetCenterLatLong(new Msn.VE.LatLong(0, 0));a.SetZoomLevel(1);a.SetMapStyle(roadStyle);SetMapTiles();SetView(a);Initialized2D = true;}

function SetAltitude(b) {Sync3dView();var a = currentView.MakeCopy();a.SetAltitude(b);SetView(a);}

function SetTilt(b) {Sync3dView();var a = currentView.MakeCopy();a.SetTilt(b);SetView(a);}

function SetDirection(b) {Sync3dView();var a = currentView.MakeCopy();a.SetDirection(b);SetView(a);}

function GetCurrentMode() {return currentMode;}

function GetMapWidth() {return width;}

function GetMapHeight() {return height;}

function SetMapHeight(a) {height = a;p_this.h = a;p_elSource.style.height = a;}

function GetCurrentMapView() {return preferredView.MakeCopy();}

function SetCenter(c, b) {Sync3dView();var a = preferredView.MakeCopy();a.SetCenterLatLong(new Msn.VE.LatLong(c, b));SetView(a);}

function SetCenterAccurate(c, b) {Sync3dView();var a = preferredView.MakeCopy();a.SetCenterLatLongAccurate(new Msn.VE.LatLong(c, b));SetView(a);}

function SetMapStyle(b, e, d) {Sync3dView();var a = currentView.MakeCopy();a.SetMapStyle(ValidateMapStyle(b), e, d);if (currentView.mapStyle != b) {if (b == obliqueStyle) {Fire("onstartmapstyleoblique");a.SetZoomLevel(1);lastOrthoZoomLevel = currentView.zoomLevel;lastOrthoMapStyle = currentView.mapStyle;} else if (currentView.mapStyle == obliqueStyle) {Fire("onendmapstyleoblique");a.SetZoomLevel(lastOrthoZoomLevel);}}var c = currentView.GetCenterLatLong();a.latlong.latitude = c.latitude;a.latlong.longitude = c.longitude;SetView(a);}

function SetScaleBarDistanceUnit(a) {if (scaleBar != null) {scaleBar.SetDistanceUnit(a);scaleBar.Update();}if (currentMode == threeDMode && spacecontrol != null) {if (a == null) {bUseKilometers = $MVEM.IsEnabled(MapControl.Features.ScaleBarKilometers);} else {bUseKilometers = a == Msn.VE.DistanceUnit.Kilometers;}spacecontrol.DisplayMetricUnits = bUseKilometers;}}

function ValidateMapStyle(a) {if (a == aerialStyle || a == hybridStyle || a == obliqueStyle || a == shadedStyle) {return a;} else {return roadStyle;}}

function GetCenterLatitude() {if (currentMode == threeDMode) {if (view3DCreated) {var a = spacecontrol.GetCenterLatitude();return isNaN(a) ? null : a;}return null;} else if (currentView != null && currentView != "undefined" && currentView.latlong != null && currentView.latlong != "undefined" && currentView.latlong.latitude != null && currentView.latlong.latitude != "undefined") {return currentView.GetCenterLatLong().latitude;}return null;}

function GetCenterLongitude() {if (currentMode == threeDMode) {if (view3DCreated) {var a = spacecontrol.GetCenterLongitude();return isNaN(a) ? null : a;}return null;} else if (currentView != null && currentView != "undefined" && currentView.latlong != null && currentView.latlong != "undefined" && currentView.latlong.longitude != null && currentView.latlong.longitude != "undefined") {return currentView.GetCenterLatLong().longitude;}return null;}

function ComputeCenterPoint(a) {currentView.latlong = currentMode.PixelToLatLong(currentView.center, currentView.zoomLevel);if (a) {preferredView.Copy(currentView);}if (obliqueMode) {obliqueMode.UpdateAvailability();}}

function GetLatitude(c) {var b = new VEPixel(originX + offsetX + width / 2, originY + offsetY + c), a = currentMode.PixelToLatLong(b, currentView.zoomLevel);if (!a) {return null;}return a.latitude;}

function GetLongitude(c) {var b = new VEPixel(originX + offsetX + c, originY + offsetY + height / 2), a = currentMode.PixelToLatLong(b, currentView.zoomLevel);if (!a) {return null;}return a.longitude;}

function GetY(b) {var c = new Msn.VE.LatLong(b, currentView.center.longitude), a = LatLongToPixel(c);if (!a) {return null;}return MathRound(a.y);}

function GetX(b) {var c = new Msn.VE.LatLong(currentView.center.latitude, b), a = LatLongToPixel(c);if (!a) {return null;}return MathRound(a.x);}

function LatLongToPixel(c, a) {if (a == null || typeof a == "undefined") {a = currentView.zoomLevel;}var b = currentMode.LatLongToPixel(c, a);if (b != null) {if (currentMode != threeDMode) {b.x -= originX + offsetX;b.y -= originY + offsetY;}}return b;}

function LatLongToPixelAsync(c, a, d) {if (a == null || typeof a == "undefined") {a = currentView.zoomLevel;}var b = function (a) {if (a != null && typeof a != "undefined" && currentMode != threeDMode) {for (var b = 0; b < a.length; ++b) {if (a[b] != null) {a[b].x -= originX + offsetX;a[b].y -= originY + offsetY;}}}d(a);};currentMode.LatLongToPixelAsync(c, a, b);}

function PixelToLatLong(b, a) {if (a == null || typeof a == "undefined") {a = currentView.zoomLevel;}var c = new VEPixel(b.x + originX + offsetX, b.y + originY + offsetY);return currentMode.PixelToLatLong(c, a);}

function PixelToLatLongAsync(c, b, e) {if (b == null || typeof b == "undefined") {b = currentView.zoomLevel;}var d = [];for (var a = 0; a < c.length; ++a) {d[a] = new VEPixel(c[a].x + originX + offsetX, c[a].y + originY + offsetY);}currentMode.PixelToLatLongAsync(d, b, e);}

function GetZoomLevel() {return currentView.zoomLevel;}

function GetMapStyle() {return currentView.mapStyle;}

function GetMapMode() {var a = Msn.VE.MapActionMode.ModeUnknown;if (currentMode != null) {if (currentMode == threeDMode) {a = Msn.VE.MapActionMode.Mode3D;} else if (currentMode == orthoMode) {a = Msn.VE.MapActionMode.Mode2D;} else if (currentMode == obliqueMode) {a = Msn.VE.MapActionMode.ModeOblique;}}return a;}

function GetAltitude() {return currentView.GetAltitude();}

function GetTilt() {return currentView.GetTilt();}

function GetDirection() {return currentView.GetDirection();}

function EnableMode(c, a) {switch (c) {case Msn.VE.MapActionMode.Mode3D:var b = window.navigator.userAgent;if (b.indexOf("MSIE") != -1) {this._Enable3DMode(a);} else if (b.indexOf("Firefox") != -1) {this._Enable3DMode(a);} else {ShowNonIENotSupportedDialog();}break;case Msn.VE.MapActionMode.Mode2D:default:this._Disable3DMode(a);UnHidePins();break;}}

function _Enable3DMode(a) {if (currentMode != threeDMode && currentMode != null) {previousMode = currentMode;currentMode = threeDMode;this.Destroy2DOnly();if (typeof a != "undefined") {init3dparam = a;}this.Init3DOnly();}}

function _Disable3DMode(a) {if (currentMode == threeDMode && currentMode != null) {previousMode = currentMode;currentMode = orthoMode;this.Destroy3DOnly();this.Init2DOnly(a);}}

function ControlReady() {return IsModeEnabled(Msn.VE.MapActionMode.Mode2D) || IsModeEnabled(Msn.VE.MapActionMode.Mode3D) && Get3DControl() != null;}

function Get3DControl() {if (view3DCreated) {return spacecontrol;}return null;}

function IsModeEnabled(b) {var a = currentMode != null && currentMode == threeDMode;switch (b) {case Msn.VE.MapActionMode.Mode2D:return !a;break;case Msn.VE.MapActionMode.Mode3D:return a;break;default:;}return false;}

function Get3DVisibleArea(acceptRegionAroundCenter) {if (!view3DCreated) {return null;}var lat1, lon1, lat2, lon2, lat3, lon3, lat4, lon4, aroundcenter, ret = spacecontrol.QueryRegion();eval(ret);if ((acceptRegionAroundCenter == "undefined" || acceptRegionAroundCenter == false) && aroundcenter == 1) {return null;}var points = [];points.push(new Msn.VE.LatLong(lat1, lon1));points.push(new Msn.VE.LatLong(lat2, lon2));points.push(new Msn.VE.LatLong(lat3, lon3));points.push(new Msn.VE.LatLong(lat4, lon4));return points;}

function Show3DTraffic(a) {if (view3DCreated) {if (!traffic3dAdded || a) {spacecontrol.AddImageSource("Terrain", "Traffic", vemanifestdomain + "/Manifests/TrafficContentManifest.xml", 1, 0.6);traffic3dAdded = true;}}}

function Remove3DTraffic() {if (view3DCreated && traffic3dAdded) {spacecontrol.RemoveImageSource("Terrain", "Traffic");traffic3dAdded = false;}}

function Sync3dView() {if (spacecontrol && spaceCameraIsFlying) {spacecontrol.RaiseCameraChangedEvent();}}

function OnBeginCameraUpdate() {cameraUpdateCount++;spaceCameraIsFlying = true;}

function OnEndCameraUpdate() {spaceCameraIsFlying = false;}

function IsCameraFlying() {return spaceCameraIsFlying;}

function GetMetersPerPixel(b, a) {if (!b) {b = currentView.latlong.latitude;}if (!a) {a = currentView.zoomLevel;}return Math.cos(DegToRad(b)) * currentMode.MetersPerPixel(a);}

function Resize(b, a) {if (resizeTimer != null && typeof resizeTimer == "number") {window.clearTimeout(resizeTimer);}p_this.w = b;p_this.h = a;resizeTimer = window.setTimeout(p_this.FireResize, 250);}
this.FireResize = function () {if (resizeInProgress) {return;} else {resizeInProgress = true;}var b = p_this.w, a = p_this.h, d, c;if (!b || b <= 0) {d = "100%";} else {d = b + "px";}if (!a || a <= 0) {c = "100%";} else {c = a + "px";}p_elSource.style.width = d;p_elSource.style.height = c;UpdateFromParent();if (currentMode == null || currentMode != threeDMode) {if (b && b >= 0) {width = b;}if (a && a >= 0) {height = a;}}PanToView(currentView);if (copyright) {copyright.Reposition();}if (scaleBar) {scaleBar.Reposition();}if (!document.all) {p_this.resizeSVG();}Fire("onresize");};
function IsObliqueAvailable() {return obliqueMode ? obliqueMode.IsAvailable() : false;}

function GetObliqueScene() {return obliqueMode ? obliqueMode.GetScene() : null;}

function SetAnimationEnabled(a) {animatedMovementEnabled = a;}

function IsAnimationEnabled() {return animatedMovementEnabled && currentMode != threeDMode;}

function SetObliqueScene(a) {if (obliqueMode) {SetMapStyle(obliqueStyle, a, null);}}

function SetObliqueOrientation(a) {if (obliqueMode) {SetMapStyle(obliqueStyle, null, a);}}

function Debug(a) {debug = a;}

function SetCopyrightOffset(a, b) {if (copyright) {copyright.SetOffset(a, b);}if (scaleBar) {scaleBar.SetOffset(a, b);}}

function SetFocus() {if (currentMode == threeDMode) {spacecontrol.Focus();} else {keyboard.focus();}}

function StopKeyboardPan() {if (panning && keyboardPan) {StopContinuousPan();}}

function UpdatePreferredView() {preferredView.Copy(currentView);}

function GetCenterOffset() {if (currentMode != null && currentMode == threeDMode) {return new VEPixel(0, 0);}return mapCenterOffset;}

function SetCenterOffset(a) {if (typeof a != "undefined" && a != null) {mapCenterOffset = a;}}

function GetLastViewChangeType() {var a = lastViewChangeType;lastViewChangeType = null;return a;}

function ShowNonIENotSupportedDialog() {Fire("onerror", CreateEvent(currentView.latlong, currentView.zoomLevel, L_BrowserNotSupported_Text.replace(/%1/g, "<a href=\"" + L_SupportedBrowserDownloadUrl_Text + "\" target=\"_blank\">").replace(/%3/g, L_SupportedBrowserDownloadUrl_Text).replace(/%2/g, "</a>")));}

function ShowIEx64NotSupportedDialog() {Fire("onerror", CreateEvent(currentView.latlong, currentView.zoomLevel, L_x64BrowserNotSupported_Text));}

function DelayedHWDialog() {ShowMessage(L_NoHardwareAcceleration_Text);}

function SetShowMapModeSwitch(a) {if (dashboard && dashboard.constructor == Msn.VE.NavAction) {dashboard.SetShowMapModeSwitch(a);}}

function SetTilePixelBuffer(a) {buffer = a < maxTilePixelBuffer ? a : maxTilePixelBuffer;}

function SetClientToken(a) {m_clientToken = a;if (obliqueMode) {obliqueMode.SetClientToken(m_clientToken);}}

function GetTopPx() {if (typeof p_elSource != "undefined" && p_elSource != null) {return GetTopPosition(p_elSource);} else {return 0;}}

function GetLeftPx() {if (typeof p_elSource != "undefined" && p_elSource != null) {return GetLeftPosition(p_elSource);} else {return 0;}}

function GetObliqueAvailability(b, a) {if (obliqueMode) {obliqueMode.GetObliqueAvailability(b, a);} else if (typeof a == "function") {a(false);}}

function ClipView(b, c) {var a = ShiftView(b, c, 0, 0);if (typeof a != "undefined" && a != null) {b.SetCenter(new VEPixel(b.center.x + a.x, b.center.y + a.y));}}

function ShiftView(b, a, c, d) {if (b != null && b.center != null && a != null && a != "undefined") {c = ClipDelta(c, width, b.center.x - width / 2, b.zoomLevel, a.z1, a.x1, a.x2, b.mapStyle);d = ClipDelta(d, height, b.center.y - height / 2, b.zoomLevel, a.z1, a.y1, a.y2, b.mapStyle);return new VEPixel(c, d);}}

function ClipDelta(a, b, d, g, f, i, h, j) {var c = tileSize * i * Math.pow(2, g - f), e = tileSize * h * Math.pow(2, g - f);if (j == obliqueStyle) {c -= Math.ceil(b / 2);e += Math.ceil(b / 2);}if (b > e - c) {a = (e - c - b) / 2 - d + c;} else if (d + a < c) {a = c - d;} else if (d + b + a > e) {a = e - d - b;}return a;}

function VECopyrightTableEntry(b, a, e, f, c, d) {this.MinZoomLevel = b;this.MaxZoomLevel = a;this.MinLatitude = e;this.MinLongitude = f;this.MaxLatitude = c;this.MaxLongitude = d;}
VECopyrightTableEntry.prototype.IsMatch = function (b, c, a) {var d = false;if (b >= this.MinZoomLevel && b <= this.MaxZoomLevel && (c >= this.MinLatitude && c <= this.MaxLatitude) && a >= this.MinLongitude && a <= this.MaxLongitude) {d = true;}return d;};
function VECopyrightTable() {var b = [];b[Msn.VE.MapStyle.Oblique] = [L_MapControlImageCourtesyOfPictometry_Text, L_MapControlImageCourtesyOfBlom_Text];b[Msn.VE.MapStyle.Road] = [L_MapControlNavteq_Text, L_MapControlImageCourtesyOfAND_Text, L_MapControlImageCourtesyOfMapDataSciences_Text, L_MapControlImageCourtesyOfZenrin_Text];b[Msn.VE.MapStyle.Aerial] = [L_MapControlImageCourtesyOfNASA_Text, L_MapControlHarrisCorp_Text, L_MapControlImageCourtesyOfUSGS_Text, L_MapControlImageCourtesyOfEarthData_Text, L_MapControlImageCourtesyOfGetmapping_Text, L_MapControlImageCourtesyOfGeoEye_Text, L_MapControlImageCourtesyOfPasco_Text];var a = [];a[Msn.VE.MapStyle.Oblique] = [];a[Msn.VE.MapStyle.Oblique][L_MapControlImageCourtesyOfPictometry_Text] = [];a[Msn.VE.MapStyle.Oblique][L_MapControlImageCourtesyOfBlom_Text] = [];a[Msn.VE.MapStyle.Road] = [];a[Msn.VE.MapStyle.Road][L_MapControlNavteq_Text] = [];a[Msn.VE.MapStyle.Road][L_MapControlImageCourtesyOfAND_Text] = [];a[Msn.VE.MapStyle.Road][L_MapControlImageCourtesyOfMapDataSciences_Text] = [];a[Msn.VE.MapStyle.Road][L_MapControlImageCourtesyOfZenrin_Text] = [];a[Msn.VE.MapStyle.Aerial] = [];a[Msn.VE.MapStyle.Aerial][L_MapControlImageCourtesyOfNASA_Text] = [];a[Msn.VE.MapStyle.Aerial][L_MapControlHarrisCorp_Text] = [];a[Msn.VE.MapStyle.Aerial][L_MapControlImageCourtesyOfUSGS_Text] = [];a[Msn.VE.MapStyle.Aerial][L_MapControlImageCourtesyOfEarthData_Text] = [];a[Msn.VE.MapStyle.Aerial][L_MapControlImageCourtesyOfGetmapping_Text] = [];a[Msn.VE.MapStyle.Aerial][L_MapControlImageCourtesyOfGeoEye_Text] = [];a[Msn.VE.MapStyle.Aerial][L_MapControlImageCourtesyOfPasco_Text] = [];a[Msn.VE.MapStyle.Oblique][L_MapControlImageCourtesyOfPictometry_Text].push(new VECopyrightTableEntry(1, 20, 24, -125, 49, -66));a[Msn.VE.MapStyle.Oblique][L_MapControlImageCourtesyOfBlom_Text].push(new VECopyrightTableEntry(1, 20, 49, -11, 60, 2));a[Msn.VE.MapStyle.Road][L_MapControlNavteq_Text].push(new VECopyrightTableEntry(1, 9, -90, -180, 90, 180));a[Msn.VE.MapStyle.Road][L_MapControlNavteq_Text].push(new VECopyrightTableEntry(10, 19, 16, -180, 90, -50));a[Msn.VE.MapStyle.Road][L_MapControlNavteq_Text].push(new VECopyrightTableEntry(10, 19, 27, -32, 40, -13));a[Msn.VE.MapStyle.Road][L_MapControlNavteq_Text].push(new VECopyrightTableEntry(10, 19, 35, -11, 72, 20));a[Msn.VE.MapStyle.Road][L_MapControlNavteq_Text].push(new VECopyrightTableEntry(10, 19, 21, 20, 72, 32));a[Msn.VE.MapStyle.Road][L_MapControlNavteq_Text].push(new VECopyrightTableEntry(10, 17, 21.92, 113.14, 22.79, 114.52));a[Msn.VE.MapStyle.Road][L_MapControlNavteq_Text].push(new VECopyrightTableEntry(10, 17, 21.73, 119.7, 25.65, 122.39));a[Msn.VE.MapStyle.Road][L_MapControlNavteq_Text].push(new VECopyrightTableEntry(10, 17, 0, 98.7, 8, 120.17));a[Msn.VE.MapStyle.Road][L_MapControlNavteq_Text].push(new VECopyrightTableEntry(10, 17, 0.86, 103.2, 1.92, 104.45));a[Msn.VE.MapStyle.Road][L_MapControlImageCourtesyOfAND_Text].push(new VECopyrightTableEntry(10, 19, -90, -180, 90, 180));a[Msn.VE.MapStyle.Road][L_MapControlImageCourtesyOfMapDataSciences_Text].push(new VECopyrightTableEntry(5, 17, -45, 111, -9, 156));a[Msn.VE.MapStyle.Road][L_MapControlImageCourtesyOfMapDataSciences_Text].push(new VECopyrightTableEntry(5, 17, -49.7, 164.42, -30.82, 180));a[Msn.VE.MapStyle.Road][L_MapControlImageCourtesyOfZenrin_Text].push(new VECopyrightTableEntry(4, 18, 23.5, 122.5, 46.65, 151.66));a[Msn.VE.MapStyle.Aerial][L_MapControlImageCourtesyOfNASA_Text].push(new VECopyrightTableEntry(1, 8, -90, -180, 90, 180));a[Msn.VE.MapStyle.Aerial][L_MapControlHarrisCorp_Text].push(new VECopyrightTableEntry(9, 13, -90, -180, 90, 180));a[Msn.VE.MapStyle.Aerial][L_MapControlImageCourtesyOfUSGS_Text].push(new VECopyrightTableEntry(14, 19, 17.99, -150.11, 61.39, -65.57));a[Msn.VE.MapStyle.Aerial][L_MapControlImageCourtesyOfEarthData_Text].push(new VECopyrightTableEntry(14, 19, 21.25, -158.3, 21.72, -157.64));a[Msn.VE.MapStyle.Aerial][L_MapControlImageCourtesyOfEarthData_Text].push(new VECopyrightTableEntry(14, 19, 39.99, -80.53, 40.87, -79.43));a[Msn.VE.MapStyle.Aerial][L_MapControlImageCourtesyOfEarthData_Text].push(new VECopyrightTableEntry(14, 19, 34.86, -90.27, 35.39, -89.6));a[Msn.VE.MapStyle.Aerial][L_MapControlImageCourtesyOfGetmapping_Text].push(new VECopyrightTableEntry(14, 19, 49.94, -6.35, 58.71, 1.78));a[Msn.VE.MapStyle.Aerial][L_MapControlImageCourtesyOfGeoEye_Text].push(new VECopyrightTableEntry(14, 17, 44.43, -63.75, 45.06, -63.45));a[Msn.VE.MapStyle.Aerial][L_MapControlImageCourtesyOfGeoEye_Text].push(new VECopyrightTableEntry(14, 17, 45.39, -73.78, 45.66, -73.4));a[Msn.VE.MapStyle.Aerial][L_MapControlImageCourtesyOfGeoEye_Text].push(new VECopyrightTableEntry(14, 17, 45.2, -75.92, 45.59, -75.55));a[Msn.VE.MapStyle.Aerial][L_MapControlImageCourtesyOfGeoEye_Text].push(new VECopyrightTableEntry(14, 17, 42.95, -79.81, 44.06, -79.42));a[Msn.VE.MapStyle.Aerial][L_MapControlImageCourtesyOfGeoEye_Text].push(new VECopyrightTableEntry(14, 17, 50.35, -114.26, 51.25, -113.82));a[Msn.VE.MapStyle.Aerial][L_MapControlImageCourtesyOfGeoEye_Text].push(new VECopyrightTableEntry(14, 17, 48.96, -123.33, 49.54, -122.97));a[Msn.VE.MapStyle.Aerial][L_MapControlImageCourtesyOfGeoEye_Text].push(new VECopyrightTableEntry(14, 17, -35.42, 138.32, -34.47, 139.07));a[Msn.VE.MapStyle.Aerial][L_MapControlImageCourtesyOfGeoEye_Text].push(new VECopyrightTableEntry(14, 17, -32.64, 115.58, -32.38, 115.85));a[Msn.VE.MapStyle.Aerial][L_MapControlImageCourtesyOfGeoEye_Text].push(new VECopyrightTableEntry(14, 17, -34.44, 150.17, -33.27, 151.49));a[Msn.VE.MapStyle.Aerial][L_MapControlImageCourtesyOfGeoEye_Text].push(new VECopyrightTableEntry(14, 17, -28.3, 152.62, -26.94, 153.64));a[Msn.VE.MapStyle.Aerial][L_MapControlImageCourtesyOfEarthData_Text].push(new VECopyrightTableEntry(14, 19, 40.6, -74.18, 41.37, -73.51));a[Msn.VE.MapStyle.Aerial][L_MapControlImageCourtesyOfPasco_Text].push(new VECopyrightTableEntry(14, 17, 23.5, 122.5, 46.65, 151.66));this.CreditsFor = function (c, k, l, j) {var g = [];if (c != "undefined" && c != null && typeof b[c] != "undefined" && b[c] != null) {var m = b[c].length;for (var e = 0; e < m; ++e) {var h = b[c][e], f = a[c][h], i = f.length;for (var d = 0; d < i; ++d) {if (f[d].IsMatch(k, l, j)) {g.push(h);break;}}}}return g;};this.CreditsForView = function (a) {var b = [];b.push(L_MapCopyrightMicrosoft);if (a.mapStyle == Msn.VE.MapStyle.Hybrid) {b = b.concat(this.CreditsFor(Msn.VE.MapStyle.Road, a.zoomLevel, a.latlong.latitude, a.latlong.longitude));b = b.concat(this.CreditsFor(Msn.VE.MapStyle.Aerial, a.zoomLevel, a.latlong.latitude, a.latlong.longitude));} else {b = b.concat(this.CreditsFor(a.mapStyle, a.zoomLevel, a.latlong.latitude, a.latlong.longitude));}return b;};}
var g_sVECopyrightTable = new VECopyrightTable;
function Copyright(e) {var a = document.createElement("div"), b = document.createElement("div"), c = 13, h = 0, f = 0;this.Show = function () {e.appendChild(a);e.appendChild(b);};this.Hide = function () {try {e.removeChild(a);e.removeChild(b);} catch (c) {}};this.Init = function () {a.className = "MSVE_Copyright MSVE_CopyrightBackground";b.className = "MSVE_Copyright MSVE_CopyrightForeground";d();this.Show();};this.Destroy = function () {this.Hide();a = b = null;};
function d() {a.style.bottom = 3 + f + (c <= 13 ? 4 : 0) + "px";a.style.height = c + "px";b.style.bottom = 4 + f + (c <= 13 ? 4 : 0) + "px";b.style.height = c + "px";}

function i() {var h = g_sVECopyrightTable.CreditsForView(currentView), g = "", f = "";for (var e = 0; e < h.length; ++e) {if (e > 0) {if (e == 2) {f += "<br/>";g += "\n";} else {f += "&nbsp;&nbsp;";g += "  ";}}f += h[e];g += h[e];}if (view3DCreated) {spacecontrol.SetCopyrightString(g);}if (h.length <= 2) {c = 13;} else {c = 21;}a.innerHTML = f;b.innerHTML = f;d();}

function g(a, b) {h = a;f = b;d();}
this.Reposition = d;this.Update = i;this.SetOffset = g;}

function MapEvent(f, d, e, a, c, b) {this.view = f;this.oblique = d;this.error = e;this.requestedView = a;this.elementID = c;this.mouseButton = b;}

function CreateEvent(a, f, c, d, e, k) {var b = currentView.MakeCopy();if (a != null && a instanceof Msn.VE.LatLong) {if (Msn.VE.API != null) {var j = new VELatLongFactory(new VELatLongFactorySpecFromMapView(b));b.LatLong = j.CreateVELatLong(a.latitude, a.longitude);} else {b.latlong = a;}}if (f != null && typeof f == "number") {b.zoomLevel = f;}if (c == null || typeof c == "undefined") {c = "";}var h = null;if (obliqueMode) {h = obliqueMode.GetEventInfo();}var g = null;if (d != null && d instanceof Msn.VE.MapView) {g = d.MakeCopy();}var i = null;if (typeof e != "undefined" && e != null) {i = e;}return new MapEvent(b, h, c, g, i, k);}

function CreateCustomEvent(e, b, d) {var a = new MapEvent;if (d) {a.error = d.error;}a.eventName = e;a.zoomLevel = currentView.zoomLevel;a.mapStyle = currentView.mapStyle;if (currentMode != threeDMode) {a.birdseyeSceneID = currentView.sceneId;a.birdseyeSceneOrientation = currentView.sceneOrientation;if (b) {a.leftMouseButton = IsLeftMouseButton(b);a.rightMouseButton = IsRightMouseButton(b);a.middleMouseButton = IsMiddleMouseButton(b);a.mouseWheelChange = GetMouseScrollDelta(b);a.screenX = b.screenX;a.screenY = b.screenY;a.clientX = GetMouseX(b);a.clientY = GetMouseY(b);a.mapX = a.clientX - GetLeftPosition(p_elSource);a.mapY = a.clientY - GetTopPosition(p_elSource);a.keyCode = b.keyCode;a.altKey = b.altKey;a.ctrlKey = b.ctrlKey;a.shiftKey = b.shiftKey;a.elementID = null;var c = GetTarget(b);while (typeof c != "undefined" && c != null) {if (typeof c.id != "undefined" && c.id != null && c.id.indexOf(MC_IID_NAMESPACE) == 0) {a.elementID = c.id;break;} else if (typeof c.className != "undefined" && c.className != null && c.className == "MSVE_MapContainer") {break;} else {c = c.parentElement;}}}} else if (d) {if (d.view) {a.latLong = d.view.LatLong;} else {a.latLong = null;}a.elementID = d.elementID;a.leftMouseButton = d.mouseButton == "Left";a.rightMouseButton = d.mouseButton == "Right";a.middleMouseButton = d.mouseButton == "Middle";a.mouseWheelChange = 0;a.keyCode = 0;a.altKey = false;a.ctrlKey = false;a.shiftKey = false;}return a;}

function AttachEvent(d, c) {var a = defaultEventTable[d];if (!a) {a = [];defaultEventTable[d] = a;}for (var b = 0; b < a.length; b++) {if (a[b] == c) {return true;}}a.push(c);}

function DetachEvent(d, c) {var a = defaultEventTable[d];if (!a) {return;}for (var b = 0; b < a.length; b++) {if (a[b] == c) {a.splice(b, 1);}}}

function AttachCustomEvent(d, c) {var a = customEventTable[d];if (!a) {a = [];customEventTable[d] = a;}for (var b = 0; b < a.length; b++) {if (a[b] == c) {return true;}}a.push(c);}

function DetachCustomEvent(d, c) {var a = customEventTable[d];if (a) {for (var b = 0; b < a.length; b++) {if (a[b] == c) {a.splice(b, 1);}}}}

function IsEventAttached(a) {var b = customEventTable[a], c = defaultEventTable[a];return c != null || b != null;}

function Fire(b, a) {FireCustomEvent(b, a);FireDefaultEvent(b, a);}

function FireDefaultEvent(d, b) {var a = defaultEventTable[d];if (!b) {b = CreateEvent();}if (a) {for (var c = 0; c < a.length; c++) {a[c](b);}}}

function FireCustomEvent(d, a) {var b = false, c = customEventTable[d];if (c) {var f = window.event;if (a && MapEvent.prototype.isPrototypeOf(a)) {a = CreateCustomEvent(d, f, a);} else {a = CreateCustomEvent(d, f, null);}for (var e = 0; e < c.length; e++) {b = b | c[e](a);}}return b;}

function DisposeAllCustomEvent() {while (customEventTable.length) {var a = customEventTable.pop();while (a.length) {a.pop();}a = null;}}

function DestroyEventTable() {while (defaultEventTable.length) {var a = defaultEventTable.pop();while (a.length) {a.pop();}a = null;}defaultEventTable = null;DisposeAllCustomEvent();customEventTable = null;}

function KeyDown(c) {if (isMinimap) {return false;}c = GetEvent(c);if (FireCustomEvent("onkeydown", c)) {return false;}var e = c.ctrlKey ? 5 : 1, d = keyboardPanSpeed * e, a = panningX, b = panningY;switch (c.keyCode) {case 9:case 18:if (panning && keyboardPan) {StopContinuousPan();}return true;case 37:a = - d;break;case 38:b = - d;break;case 39:a = d;break;case 40:b = d;break;case 107:case 187:case 61:case 43:a = 0;b = 0;ZoomIn();break;case 109:case 189:a = 0;b = 0;ZoomOut();break;case 65:a = 0;b = 0;SetMapStyle(aerialStyle);break;case 72:a = 0;b = 0;SetMapStyle(hybridStyle);break;case 82:a = 0;b = 0;SetMapStyle(roadStyle);break;case 66:case 79:a = 0;b = 0;SetMapStyle(obliqueStyle);break;case 51:case 99:p_this.EnableMode(Msn.VE.MapActionMode.Mode3D);break;default:break;}if (a || b) {ContinuousPan(a, b, null, true);}FireDefaultEvent("onkeydown");return false;}

function KeyUp(a) {a = GetEvent(a);if (FireCustomEvent("onkeyup", a)) {return false;}var b = panningX, c = panningY, d = true;switch (a.keyCode) {case 37:b = 0;break;case 38:c = 0;break;case 39:b = 0;break;case 40:c = 0;break;default:d = false;break;}if (d) {ContinuousPan(b, c, null, true);}if (FireCustomEvent("onkeypress", a)) {return false;}}
var northLatitude = 0, southLatitude = 0, westLongitude = 0, eastLongitude = 0;
function AddLine(h, f, g, k, m, l, a, d, i, j) {if (h == null || f == null || g == null || a == null || d == null) {return null;}var e = [];for (var b = 0; b < a.length; b++) {e.push(BuildRegionHeap(a[b], 0, a[b].length - 1));}var c = new Line;c.Init(h, f, g, k, m, l, e, d, i, j);lines.push(c);return c;}

function RemoveLine(c) {for (var a = 0; a < lines.length; a++) {var b = lines[a];if (b.id == c) {lines.splice(a, 1);b.Destroy();return;}}}

function ClearLines() {while (lines.length > 0) {lines.pop().Destroy();}}

function ShowLines() {for (var a = 0; a < lines.length; a++) {lines[a].StartLine();lines[a].Show();}}

function HideLines() {for (var a = 0; a < lines.length; a++) {lines[a].Hide();}}

function UpdateLines() {for (var a = 0; a < lines.length; a++) {lines[a].UpdateLine();}}

function BuildRegionHeap(f, e, g) {var h = g - e + 1;if (h < 1) {return null;} else if (h == 1) {return f[e];}var d = null, c = null;if (h == 2) {d = f[e];c = f[g];} else {var i = Math.round((e + g) / 2);d = BuildRegionHeap(f, e, i);c = BuildRegionHeap(f, i + 1, g);}if (d != null && c != null) {var b = d.boundingRectangle, a = c.boundingRectangle, l = b[0].latitude > a[0].latitude ? b[0].latitude : a[0].latitude, k = b[0].longitude > a[0].longitude ? b[0].longitude : a[0].longitude, m = b[1].latitude < a[1].latitude ? b[1].latitude : a[1].latitude, n = b[1].longitude < a[1].longitude ? b[1].longitude : a[1].longitude, j = [new Msn.VE.LatLong(l, k), new Msn.VE.LatLong(m, n)];return new Msn.VE.LineRegion(j, null, [d, c]);} else if (d != null) {return d;} else if (c != null) {return c;}return null;}
var IsDrivingEventAttached = false;
function Line() {var v = 5, m = new Msn.Drawing.Color(0, 169, 235, 0.7), d = new Msn.Drawing.Stroke, H = 4, c = null, e = "", g = true, A = "", o = "", t = 0, y = 0, x = 0, B = 0, z = 0, a = null, b = null, j = null, i = null, I = 0, J = 0, f = null, p = false;
function F(l, u, w, c, g, h, q, r, k, n) {if (!c) {c = v;}if (!g) {g = m;}if (!h) {h = defaultZIndex;}p = n;this.id = l;e = l;if (k) {d.linejoin = k;}A = c + "pt";o = g;t = h;a = u;b = w;i = r;j = q;y = a[0];x = b[0];B = a[a.length - 1];z = b[b.length - 1];f = currentView.MakeCopy();d.color = m;d.width = c;s();if (!IsDrivingEventAttached) {AttachEvent("onstartzoom", HideLines);AttachEvent("onchangeview", UpdateLines);IsDrivingEventAttached = true;}this._Draw3D();AttachEvent("oninitmode", this._Draw3D);}

function E() {if (view3DCreated) {spacecontrol.DeleteGeometry(0, e);}DetachEvent("oninitmode", this._Draw3D);n();a = b = j = c = f = null;}
this._Draw3D = function () {if (view3DCreated) {var c = [];for (var f = 0; f < a.length; f++) {c.push(b[f]);c.push(",");c.push(a[f]);if (f != a.length - 1) {c.push(" ");}}var g = c.join("");spacecontrol.AddPolyline(0, e, g, o, 0.75, d.width);}};
function n() {if (graphicCanvas) {graphicCanvas.Clear();}}

function G() {if (!g) {h();return;}if (c) {c.style.display = "block";}}

function h() {if (c) {c.style.display = "none";}}

function w(a) {g = a;if (!g) {h();}}

function s() {l();q();f.Copy(currentView);}

function D() {l();q();f = currentView.MakeCopy();}

function l() {var a = height < 900 ? 900 : height, b = width < 900 ? 900 : width;northLatitude = GetLatitude(-0.5 * a);southLatitude = GetLatitude(1.5 * a);westLongitude = GetLongitude(-0.5 * b);eastLongitude = GetLongitude(1.5 * b);}

function q() {if (currentView.mapStyle == obliqueStyle) {graphicCanvas.Clear();return;}if (view3DCreated) {return;}var b = [], a = i.length - 1;while (i[a] < currentView.zoomLevel && a >= 0) {a--;}k(j[a], b);C(b);}

function k(f, c) {if (u(f.boundingRectangle[0], f.boundingRectangle[1])) {return;}if (f.childRegions != null) {for (var j = 0; j < f.childRegions.length; j++) {k(f.childRegions[j], c);}} else {var h = f.indices, e = new Msn.VE.LatLong(a[h[0]], b[h[0]]), d, g = false;if (r(e.latitude, e.longitude)) {c.push(e.longitude);c.push(e.latitude);g = true;}for (var i = 1; i < h.length; i++) {d = new Msn.VE.LatLong(a[h[i]], b[h[i]]);if (r(d.latitude, d.longitude)) {if (!g) {c.push(e.longitude);c.push(e.latitude);}g = true;c.push(d.longitude);c.push(d.latitude);} else if (g) {g = false;c.push(d.longitude);c.push(d.latitude);}e = d;}}}

function C(b) {if (!graphicCanvas) {return;}h();graphicCanvas.Clear();var a = new Msn.Drawing.PolyLine(b);a.id = e;d.width = 4;graphicCanvas.SetZIndex(t);graphicCanvas.SetStroke(d);graphicCanvas.DrawPrimitive(a, p);c = $ID(e);if (g) {c.style.display = "block";} else {c.style.display = "none";}}

function r(a, b) {return a >= southLatitude && a <= northLatitude && b >= westLongitude && b <= eastLongitude;}

function u(a, b) {return a.latitude > northLatitude && b.latitude > northLatitude || a.latitude < southLatitude && b.latitude < southLatitude || a.longitude > eastLongitude && b.longitude > eastLongitude || a.longitude < westLongitude && b.longitude < westLongitude;}
this.Init = F;this.Destroy = E;this.RemoveFromMap = n;this.Show = G;this.Hide = h;this.ChangeVisibility = w;this.StartLine = s;this.UpdateLine = D;}

function Logo(b) {var a = null;this.Init = function () {if (navigator.userAgent.toLowerCase().indexOf("msie") != -1) {a = document.createElement("div");a.className = "MSVE_PoweredByLogo MSVE_PoweredByLogo_ie";if (Msn.VE.API != null) {a.style.filter = "progid:DXImageTransform.Microsoft.AlphaImageLoader(src='" + Msn.VE.API.Globals.vecurrentdomain + "/i/bin/" + Msn.VE.API.Globals.vecurrentversion + "/" + MapControl.Features.Image.PoweredLogo + "', sizingMethod='scale')";}} else {a = document.createElement("img");var d = "http://" + location.host, c = "";if (Msn.VE.API != null) {d = Msn.VE.API.Globals.vecurrentdomain;c = Msn.VE.API.Globals.vecurrentversion;} else {c = window.buildVersion;}a.src = d + "/i/bin/" + c + "/" + MapControl.Features.Image.PoweredLogo;a.className = "MSVE_PoweredByLogo";}b.appendChild(a);};this.Destroy = function () {a = null;};}
var hijackMouseMove = false, isLastButtonMiddle = false;
function MouseDown(a) {a = GetEvent(a);CancelEvent(a);if (currentMode != threeDMode && FireCustomEvent("onmousedown", a)) {return false;}if (zooming) {return false;}if (panning) {StopContinuousPan();}if (obliqueMode) {obliqueMode.CancelRequest();}if (!mouseZoomDisabled) {if (a.which && a.which == 2) {currentTool = boxTool;} else if (!a.which && a.button && a.button == 4) {currentTool = boxTool;} else if (a.altKey) {currentTool = boxTool;}}if (!document.all && !isEnablingDefaultDblClick) {isEnablingDefaultDblClick = true;return false;}dragging = true;var b = typeof a.which != "undefined" ? a.which : a.button;if (!hijackMouseMove && b == 1) {p_this.SetCursor(cssCursors.Grabbing);}currentTool.OnMouseDown(a);return false;}

function MouseMove(a) {a = GetEvent(a);if (currentMode != threeDMode && FireCustomEvent("onmousemove", a)) {return false;}if (hijackMouseMove) {a = GetEvent(a);CancelEvent(a);x = GetLeftPosition(p_elSource);y = GetTopPosition(p_elSource);var c = originX + offsetX + GetMouseX(a) - x, d = originY + offsetY + GetMouseY(a) - y, b = CreateEvent(currentMode.PixelToLatLong(new VEPixel(c, d), currentView.zoomLevel));FireDefaultEvent("onmousemove", b);return;}if (dragging) {currentTool.OnMouseMove(a);}return false;}

function MouseUp(a) {a = GetEvent(a);CancelEvent(a);if (a) {isLastButtonMiddle = IsMiddleMouseButton(a);}if (currentMode != threeDMode && FireCustomEvent("onmouseup", a)) {return false;}dragging = false;if (!hijackMouseMove) {p_this.SetCursor(cssCursors.Grab);}var b = currentTool.OnMouseUp(a);if (targetTool.isOutOfBounds()) {targetTool.OnMouseUp(a);}var c = true;if (typeof b != "undefined" && b.view != null) {isEnablingDefaultDblClick = b.view.disableDbClick != true;c = b.view.disableMapFocus != true;} else {isEnablingDefaultDblClick = true;}currentTool = panTool;try {if (c) {keyboard.focus();}} catch (d) {}return false;}
var isEnablingDefaultDblClick = true;
function MouseDoubleClick(a) {a = GetEvent(a);CancelEvent(a);if (currentMode != threeDMode && FireCustomEvent("ondoubleclick", a)) {return false;}if (hijackMouseMove) {return false;}if (isEnablingDefaultDblClick) {UpdateFromParent();if (panning || zooming || mouseZoomDisabled) {return false;}if (GetMapStyle() != Msn.VE.MapStyle.Oblique) {var d = tileSize * Math.pow(2, currentView.zoomLevel), b = originX + offsetX + GetMouseX(a) - x;if (b < 0 || b > d) {return false;}b = originY + offsetY + GetMouseY(a) - y;if (b < 0 || b > d) {return false;}}var c = preferredView.MakeCopy();c.SetCenter(new VEPixel(originX + offsetX + GetMouseX(a) - x - mapCenterOffset.x, originY + offsetY + GetMouseY(a) - y - mapCenterOffset.y));if (a.altKey) {c.SetZoomLevel(currentView.zoomLevel - 1);} else {c.SetZoomLevel(currentView.zoomLevel + 1);}SetView(c);return false;} else {isEnablingDefaultDblClick = true;}}

function MouseWheel(a) {a = GetEvent(a);CancelEvent(a);if (currentMode != threeDMode && FireCustomEvent("onmousewheel", a)) {return false;}if (currentMode != null && currentMode == threeDMode) {return false;}if (panning || zooming || mouseZoomDisabled) {return false;}var b = GetMouseScrollDelta(a);if (b > 0) {ZoomIn();} else if (b < 0) {ZoomOut();}return false;}

function ContextMenu(a) {if (mouseZoomDisabled) {return false;}a = GetEvent(a);CancelEvent(a);if (currentMode != threeDMode && FireCustomEvent("onclick", a)) {return false;}x = GetLeftPosition(p_elSource);y = GetTopPosition(p_elSource);var b, c;if (currentMode == threeDMode) {b = GetMouseX(a) - x;c = GetMouseY(a) - y;} else {b = originX + offsetX + GetMouseX(a) - x;c = originY + offsetY + GetMouseY(a) - y;}var d = currentMode.PixelToLatLong(new VEPixel(b, c), currentView.zoomLevel);if (d != null) {var e = CreateEvent(d);FireDefaultEvent("oncontextmenu", e);}return false;}

function MouseClick(a) {a = GetEvent(a);CancelEvent(a);if (!isLastButtonMiddle) {if (currentMode != threeDMode && FireCustomEvent("onclick", a)) {return false;}}}

function MouseOut(a) {a = GetEvent(a);CancelEvent(a);var b = a && a.srcElement && a.srcElement.tagName;if (currentMode != threeDMode && (b == "shape" || b == "polyline") && FireCustomEvent("onmouseout", a)) {return false;}}

function MouseOver(a) {a = GetEvent(a);CancelEvent(a);var b = a && a.srcElement && a.srcElement.tagName;if (currentMode != threeDMode && (b == "shape" || b == "polyline") && FireCustomEvent("onmouseover", a)) {return false;}}

function MouseEnter(a) {a = GetEvent(a);CancelEvent(a);var b = a.relatedTarget || a.fromElement;if (currentMode != threeDMode && b != null && FireCustomEvent("onmouseover", a)) {return false;}}

function MouseLeave(a) {a = GetEvent(a);CancelEvent(a);if (currentMode != threeDMode && FireCustomEvent("onmouseout", a)) {return false;}}
var obliqueLoop = 0;
function PanMap(c, d) {if (c == 0 && d == 0) {return false;}if (currentMode != threeDMode) {var a = ShiftView(currentView, currentBounds, c, d);if (typeof a != "undefined" && a != null) {map.style.left = map.offsetLeft - a.x + "px";map.style.top = map.offsetTop - a.y + "px";offsetX = - map.offsetLeft;offsetY = - map.offsetTop;var b = new VEPixel(width / 2 + originX + offsetX, height / 2 + originY + offsetY);if (keyboardPan && a.x == 0 && a.y == 0) {if (typeof currentMode.RequestPending != "undefined" && !currentMode.RequestPending()) {b.x += c;b.y += d;var e = PixelToLatLong(b);targetTool.centeringTrigger = true;SetCenter(e.latitude, e.longitude);}} else {currentView.SetCenter(b);preferredView.SetCenter(new VEPixel(b.x, b.y));window.setTimeout(tileLayerManager.PanView, 1);}}} else {return false;}if (copyright) {copyright.Update();}return true;}

function ContinuousPan(a, b, c, d) {if (zooming) {return;}if (!c) {c = -1;}panningX = a;panningY = b;panCounter = c;if (!a && !b) {StopContinuousPan();return;}keyboardPan = d;if (view3DCreated) {spacecontrol.ContinuousPan(a, b);Fire("onstartpan");} else if (!panning) {panning = true;StepPan();Fire("onstartpan");}}

function StepPan() {if (panning) {PanMap(panningX, panningY);if (panCounter > 0) {panCounter--;}if (panCounter != 0) {window.setTimeout(StepPan, 10);} else {StopContinuousPan();}}}

function StopContinuousPan() {panningX = 0;panningY = 0;panning = false;keyboardPan = false;if (currentMode != threeDMode) {if (panLatitude != null && panLongitude != null) {var b = new Msn.VE.LatLong(panLatitude, panLongitude), a = LatLongToPixel(b), c = a.x - width / 2, d = a.y - height / 2;PanMap(c, d);currentView.latlong.latitude = panLatitude;currentView.latlong.longitude = panLongitude;preferredView.Copy(currentView);panLatitude = null;panLongitude = null;if (obliqueMode) {obliqueMode.UpdateAvailability();}} else {ComputeCenterPoint(true);}} else if (view3DCreated) {spacecontrol.ContinuousPan(0, 0);}Fire("onendpan");Fire("onchangeview");if (resizeInProgress) {resizeInProgress = false;}}

function PanToLatLong(b, a, c) {if (currentMode == threeDMode) {SetCenter(b, a);} else {panLatitude = b;panLongitude = a;PanToPixel(LatLongToPixel(new Msn.VE.LatLong(b, a)), c);}}

function PanToView(a) {var b = a.center.x - (originX + offsetX), c = a.center.y - (originY + offsetY);PanToPixel(new VEPixel(b, c));}

function PanToPixel(a, j) {if (currentView.mapStyle == obliqueStyle) {obliqueLoop++;if (obliqueLoop > 30) {obliqueLoop = 0;return;}var h = obliqueMode.GetScene();if (!h || !h.ContainsPixel(a, currentView.zoomLevel)) {var d = preferredView.MakeCopy();d.sceneId = null;d.SetCenterLatLong(PixelToLatLong(a));SetView(d);if (resizeInProgress) {resizeInProgress = false;}return;}}var b = a.x - width / 2, c = a.y - height / 2, e = Math.sqrt(b * b + c * c);if (!j && (!IsAnimationEnabled() || MathAbs(b) > 2 * width || MathAbs(c) > 2 * height || e > 1.5 * Math.sqrt(width * width + height * height))) {var d = preferredView.MakeCopy(), k = a.x + (originX + offsetX), l = a.y + (originY + offsetY);d.SetCenter(new VEPixel(k, l));SetView(d);if (resizeInProgress) {resizeInProgress = false;}return;}var f = Math.atan2(c, b), g = MathCeil(e / panToLatLongSpeed), i = MathRound(e / g);b = MathRound(Math.cos(f) * i);c = MathRound(Math.sin(f) * i);ContinuousPan(b, c, g);}

function PushPinOffset(a, b) {this.x = a;this.y = b;}

function getPushPinOffset(c) {var b = Msn.VE.PushPinTypes, a;switch (c) {case b.Annotation:a = new PushPinOffset(-2, -19.5);break;case b.SearchResult:a = new PushPinOffset(0, -11.5);break;case b.Direction:a = new PushPinOffset(-3, -16);break;case b.DirectionTemp:a = new PushPinOffset(2, -10);break;case b.TrafficLight:a = new PushPinOffset(0, -13);break;case b.TrafficOthers:a = new PushPinOffset(0, -14.5);break;case b.YouAreHere:a = new PushPinOffset(0, -13);break;case b.AdStandard:a = new PushPinOffset(0, -19);break;case b.AdWide:a = new PushPinOffset(0, -13.5);break;case b.Default:default:a = new PushPinOffset(0, 0);break;}return a;}

function GetPushpins() {return pushpins;}

function AddPushpin(l, j, k, i, g, d, e, h, f, b, c) {var a = new Pushpin;a.Init(l, j, k, i, g, d, e, h, f);if (typeof b == "undefined" || b == false || b == null) {if (IsModeEnabled(Msn.VE.MapActionMode.Mode3D)) {if (!(typeof c != "undefined" && c == false)) {View3DAddPushpin(l, j, k, i, g, d, e, h, f);}map.appendChild(a.pin);a.Hide();} else {map.appendChild(a.pin);}pushpins.push(a);}return a.pin;}

function RemovePushpin(b) {for (var a = 0; a < pushpins.length; a++) {var c = pushpins[a];if (c.id == b) {pushpins.splice(a, 1);if (IsModeEnabled(Msn.VE.MapActionMode.Mode3D)) {View3DRemovePushpin(b);}c.Destroy();break;}}}

function ClearPushpins() {while (pushpins.length > 0) {var a = pushpins.pop();if (IsModeEnabled(Msn.VE.MapActionMode.Mode3D)) {View3DRemovePushpin(a.id);}a.Destroy();}}

function Relay3DPushpins() {for (var b = 0; b < pushpins.length; b++) {var a = pushpins[b];if (a.id && a.id.constructor == String && a.id.indexOf("Layer") == -1) {View3DAddPushpin(a.id, a.lat, a.lon, a.width, a.height, a.className, a.innerHtml, a.zIndex, a.pinType);}}}

function RepositionPushpins() {for (var a = 0; a < pushpins.length; a++) {pushpins[a].Reposition();}}

function HidePins() {for (var a = 0; a < pushpins.length; a++) {pushpins[a].Hide();}}

function UnHidePins() {for (var a = 0; a < pushpins.length; a++) {pushpins[a].UnHide();}}

function Pushpin() {var e = true, a = document.createElement("a");a.href = "javascript://pushin hover";a.onclick = function () {return ParseShiftKeyForLinks(event);};a.vePushpin = this;this.pin = a;var c = 0, d = 0, g = 0, i = 0, b = null, n = 0, m = 0, u = zoomTotalSteps + 1, h = new Array(u), j = new Array(u), f;this.Init = function (w, u, v, t, r, j, o, x, p) {this.id = w;this.lat = u;this.lon = v;this.width = t;this.height = r;this.className = j;this.innerHtml = o;this.zIndex = x;this.pinType = p;a.id = w;a.className = j;a.style.position = "absolute";a.innerHTML = o;a.pinType = p || Msn.VE.PushPinTypes.Default;f = getPushPinOffset(a.pinType);if (!p_htParams.fixedView) {a.attachEvent("ondblclick", q);a.attachEvent("onmousewheel", s);}a.unselectable = "on";b = new Msn.VE.LatLong(u, v);n = t;m = r;var h = currentMode.LatLongToPixel(b, currentView.zoomLevel);if (h && e) {c = MathRound(h.x - originX);d = MathRound(h.y - originY);g = c;i = d;k();l(0);a.style.display = "block";} else {a.style.display = "none";}};this.Destroy = function () {a.detachEvent("ondblclick", q);a.detachEvent("onmousewheel", s);o();a.vePushpin = null;a = null;this.pin = null;while (h.length > 0) {h.pop();}while (j.length > 0) {j.pop();}};this.GetLatitude = function () {return b.latitude;};this.GetLongitude = function () {return b.longitude;};
function r() {var b = zoomTotalSteps;for (var a = 0; a <= b; a++) {h[a] = c - n / 2 + f.x + "px";j[a] = d - m / 2 + f.y + "px";}}

function k() {var k = zoomTotalSteps;for (var a = 0; a <= k; a++) {var b = a / k, e = 1 - b;h[a] = MathFloor(e * c + b * g - n / 2 + f.x) + "px";j[a] = MathFloor(e * d + b * i - m / 2 + f.y) + "px";}}

function l(b) {a.style.left = h[b];a.style.top = j[b];}

function w() {var a = 0;a = c;c = g;g = a;a = d;d = i;i = a;}

function t() {var f = currentMode.LatLongToPixel(b, currentView.zoomLevel);if (f) {c = MathRound(f.x - originX);d = MathRound(f.y - originY);r();l(0);if (a.style.display != "none" && e) {a.style.display = "block";}} else {a.style.display = "none";}}

function x() {if (!e) {a.style.display = "block";e = true;}}

function y() {if (e) {a.style.display = "none";e = false;}}

function v(h, j, l) {c -= offsetX;d -= offsetY;var f = currentMode.LatLongToPixel(b, l);if (f) {g = MathRound(f.x - h);i = MathRound(f.y - j);k();if (a.style.display != "none" && e) {a.style.display = "block";}} else {a.style.display = "none";}}

function o() {if (a.parentNode == map) {map.removeChild(a);}}

function q(a) {a = GetEvent(a);CancelEvent(a);if (FireCustomEvent("ondoubleclick", a)) {return;}if (panning || zooming) {return false;}var c = preferredView.MakeCopy();c.SetCenterLatLong(b);if (a.altKey) {c.SetZoomLevel(currentView.zoomLevel - 1);} else {c.SetZoomLevel(currentView.zoomLevel + 1);}SetView(c);return false;}

function s(a) {a = GetEvent(a);CancelEvent(a);if (FireCustomEvent("onmousewheel", a)) {return;}if (panning || zooming) {return false;}var b = GetMouseScrollDelta(a);if (b > 0) {ZoomIn();} else if (b < 0) {ZoomOut();}return false;}

function z(a) {p(PixelToLatLong(a));}

function p(a) {b = a;t();}
this.ClearSteps = r;this.PrecomputeSteps = k;this.SetFactor = l;this.SwapStates = w;this.Reposition = t;this.PrepareForZoom = v;this.RemoveFromMap = o;this.Move = z;this.MoveToLatLon = p;this.Hide = y;this.UnHide = x;}

function ScaleBar(f) {var r = 0, c = 0, i = null, a = document.createElement("div"), b = document.createElement("div"), d = document.createElement("div"), g = document.createElement("div"), h = 150;this.Init = function () {a.className = "MSVE_ScaleBarLabel MSVE_ScaleBarLabelBackground";b.className = "MSVE_ScaleBarLabel MSVE_ScaleBarLabelForeground";d.className = "MSVE_ScaleBar MSVE_ScaleBarBackground";g.className = "MSVE_ScaleBar MSVE_ScaleBarForeground";l();j();f.appendChild(a);f.appendChild(b);f.appendChild(d);f.appendChild(g);};this.Destroy = function () {a = b = d = BarFg = null;};
function j() {a.style.bottom = 33 + c + "px";b.style.bottom = 34 + c + "px";d.style.bottom = 25 + c + "px";g.style.bottom = 26 + c + "px";}

function m(a) {return a * 0.001;}

function o(a) {return a * 0.000621371192;}

function p(a) {return a * 1.0936133;}

function n(a) {i = a;}

function l() {try {var g = GetMetersPerPixel(), c = g * h, f;if (i == null) {f = $MVEM.IsEnabled(MapControl.Features.ScaleBarKilometers);} else {f = i == Msn.VE.DistanceUnit.Kilometers;}if (f) {var d = L_ScaleBarKilometers_Text, b = m(c), a = e(b);if (a < 0.5) {d = L_ScaleBarMeters_Text;b = c;a = e(b);}k("metric", d, a, Math.round(a / b * h));} else {var d = L_ScaleBarMiles_Text, b = o(c), a = e(b);if (a < 0.5) {d = L_ScaleBarYards_Text;b = p(c);a = e(b);}k("us", d, a, Math.round(a / b * h));}} catch (j) {}}

function e(d) {var g = Math.log(d) / Math.log(10), e = Math.floor(g), a = Math.pow(10, e), c = d / a, b = Math.floor(c);if (b >= 3) {return b * a;}var f = Math.floor(c * 2) * 0.5;return f * a;}

function k(i, h, c, e) {if (c < 1) {c = c.toFixed(1);}var f = c + " " + h;a.innerHTML = f;b.innerHTML = f;d.style.width = e;g.style.width = e;}

function q(a, b) {r = a;c = b;j();}
this.SetDistanceUnit = n;this.Update = l;this.Reposition = j;this.SetOffset = q;}
var totalRequestTime = 0, totalRequestCount = 0, totalFailureCount = 0, responseRangeCeilings = [];responseRangeCeilings[roadStyle] = [325, 975];responseRangeCeilings[shadedStyle] = responseRangeCeilings[roadStyle];responseRangeCeilings[aerialStyle] = [350, 1050];responseRangeCeilings[hybridStyle] = [425, 1275];responseRangeCeilings[obliqueStyle] = [450, 1350];var responseRangeCounts = [0, 0, 0];
function RequestTile(b, c, i, h, d, g, e, f) {var a = new Tile;a.Init(b, c, i, h, b * tileSize - originX, c * tileSize - originY, d, g, e, f);return a;}

function ClearTiles(a) {while (a.length > 0) {var b = a.pop();b.Destroy();b = null;}}

function GetResponseRangeCounts() {var b = 0;for (var a = 0; a < responseRangeCounts.length; a++) {b += responseRangeCounts[a];}if (b == 0) {return responseRangeCounts;}var c = new Array(responseRangeCounts.length);for (var a = 0; a < responseRangeCounts.length; a++) {c[a] = responseRangeCounts[a] / b;}return c;}

function ResetResponseRangeCounts() {for (var a = 0; a < responseRangeCounts.length; a++) {responseRangeCounts[a] = 0;}}

function GetFailureRate() {return totalFailureCount / totalRequestCount;}

function Tile() {var a = null, b = null, c = null, r = null, t = 0, u = 0, s = 0, A = 0, g = 0, d = 1, w = zoomTotalSteps + 1, k = new Array(w), m = new Array(w), q = new Array(w), o = new Array(w), z = false, e = 0, f = 0, i = 0, h = 0, j = 0, l = 0, p = 0, n = 0, y = null, B = 0;this.Init = function (k, l, m, j, c, e, f, a, h, i) {t = k;u = l;s = m;A = j;g = i;d = h;if (!currentMode.IsValidTile(t, u, s)) {return;}x(c, e, tileSize, tileSize);F(c, e, tileSize, tileSize);v();if (a == mapTiles || a == trafficTiles) {B = 0;} else {B = 1;}b = new Image;b.onload = O;b.onerror = N;y = new Date;b.src = currentMode.GetFilename(t, u, s, f, a);};this.Destroy = function () {if (a) {a.onmousedown = null;}E();while (k.length > 0) {k.pop();}while (m.length > 0) {m.pop();}while (q.length > 0) {q.pop();}while (o.length > 0) {o.pop();}k = m = q = o = null;};
function x(c, d, b, a) {e = c;f = d;i = b;h = a;}
this.SetCurrentState = x;
function F(c, d, b, a) {j = c;l = d;p = b;n = a;}
this.SetNextState = F;
function L() {for (var a = 0; a <= zoomTotalSteps; a++) {k[a] = e + "px";m[a] = f + "px";q[a] = i + "px";o[a] = h + "px";}}
this.ClearSteps = L;
function v() {for (var a = 0; a <= zoomTotalSteps; a++) {var b = a / zoomTotalSteps, c = 1 - b;k[a] = MathFloor(c * e + b * j) + "px";m[a] = MathFloor(c * f + b * l) + "px";q[a] = MathCeil(c * i + b * p) + "px";o[a] = MathCeil(c * h + b * n) + "px";}}
this.PrecomputeSteps = v;
function H(e) {if (a == null || zooming && !z) {return;}var b = a.style;b.left = k[e];b.top = m[e];b.width = q[e];b.height = o[e];if (debug && e == 0) {if (!c) {D();}var f = c.style;b.border = "1px dashed red";f.left = k[e];f.top = m[e];}if (a.parentNode != map) {b.position = "absolute";b.zIndex = g;if (B > 0) {if (b && typeof b.filter != "undefined") {if (Msn.VE.Environment.BrowserInfo.MajorVersion <= 6) {r = document.createElement("div");var b = r.style;b.left = k[e];b.top = m[e];b.width = q[e];b.height = o[e];b.position = "absolute";b.zIndex = g;if (d != 1) {b.filter = "progid:DXImageTransform.Microsoft.AlphaImageLoader(src='" + a.src + "',sizingMethod='scale'), alpha(opacity=" + d * 100 + ")";} else {b.filter = "progid:DXImageTransform.Microsoft.AlphaImageLoader(src='" + a.src + "',sizingMethod='scale')";}map.appendChild(r);} else {b.zIndex = g;b.filter = "alpha(opacity=" + d * 100 + ");opacity:" + d + ";";map.appendChild(a);}} else {b.zIndex = g;b.opacity = d;map.appendChild(a);}} else {if (b && typeof b.filter != "undefined") {if (d < 1) {b.filter = "alpha(opacity=" + d * 100 + ");opacity:" + d;}} else {b.opacity = d;}map.appendChild(a);}if (debug && c && c.parentNode != map) {var h = a.src;c.innerHTML = h.substring(h.lastIndexOf("/") + 1, h.lastIndexOf("."));f.position = "absolute";f.zIndex = g + 1;map.appendChild(c);}}}
this.SetFactor = H;
function G() {var a = 0;a = e;e = j;j = a;a = f;f = l;l = a;a = i;i = p;p = a;a = h;h = n;n = a;}
this.SwapStates = G;
function E() {if (b) {b.onload = null;b.onerror = null;b = null;}if (a) {if (a.parentNode == map) {map.removeChild(a);}a = null;}if (c) {if (c.parentNode == map) {map.removeChild(c);}c = null;}if (r) {if (r.parentNode == map) {map.removeChild(r);}}}
this.RemoveFromMap = E;
function O() {if (currentView && s != currentView.zoomLevel || b == null) {return;}var d = new Date, c = d.getTime() - y.getTime();C(c);totalRequestTime += c;totalRequestCount++;if (debug) {window.status = "last=" + c + ", average=" + totalRequestTime / totalRequestCount;}b.onload = null;b.onerror = null;a = b;a.onmousedown = function () {return false;};b = null;if (!zooming) {H(zoomCounter);}}

function N() {if (s != currentView.zoomLevel || b == null) {return;}var c = new Date, a = c.getTime() - y.getTime();C(a);totalRequestTime += a;totalRequestCount++;totalFailureCount++;b.onload = null;b.onerror = null;b = null;}

function C(b) {for (var a = 0; a < responseRangeCeilings[A].length; a++) {if (b < responseRangeCeilings[A][a]) {responseRangeCounts[a]++;return;}}responseRangeCounts[responseRangeCounts.length - 1]++;}

function I(k, m, r, c, d, q) {x(e - offsetX, f - offsetY, i, h);var o = q - r, b = Math.pow(2, o);j = MathFloor((k + e) * b - c);l = MathFloor((m + f) * b - d);p = MathCeil((k + e + i) * b - c) - j;n = MathCeil((m + f + h) * b - d) - l;z = true;v();g = baseZIndex;if (a != null) {a.style.zIndex = g;}}
this.PrepareBaseTile = I;
function J(m, o, r, d, k, q) {var s = r - q, a = Math.pow(2, s);j = MathFloor((d + e) * a - m);l = MathFloor((k + f) * a - o);p = MathCeil((d + e + i) * a - m) - j;n = MathCeil((k + f + h) * a - o) - l;var c = MathCeil(tileViewportWidth * 0.25), b = MathCeil(tileViewportHeight * 0.25);z = q < r && (t < tileViewportX1 + c || t > tileViewportX2 - c || u < tileViewportY1 + b || u > tileViewportY2 - b);G();v();g = swapZIndex;}
this.PrepareSwapTile = J;
function M(b) {if (!c) {D();}if (a != null) {a.style.border = b ? "1px dashed red" : "0px";}c.style.display = b ? "block" : "none";}
this.Debug = M;
function K() {p = i;n = h;}
this.ClearStates = K;
function D() {c = document.createElement("div");c.style.font = "7pt Verdana, sans-serif";c.style.color = "Red";c.style.backgroundColor = "White";}
}

function SetMapTiles() {var a = new VETileSourceSpecification;a.ID = mapTiles;a.SourceName = "http://%1%2.ortho.tiles.virtualearth.net/tiles/%3%4.%5?g=%6";a.GetTilePath = function (a) {try {if (a != null && a != "undefined") {var d = "", f = "", b = 0;for (var c = a.ZoomLevel; c > 0; c--) {b = 0;var e = 1 << c - 1;if ((a.XPos & e) != 0) {b++;}if ((a.YPos & e) != 0) {b += 2;}f += b + "";}var c = b % this.NumServers, g = a.MapStyle == Msn.VE.MapStyle.Road && $MVEM.IsEnabled(MapControl.Features.MapStyle.Shaded) && typeof currentView != "undefined" && currentView != null && typeof currentView.doRoadShading != "undefined" && currentView.doRoadShading || a.MapStyle == Msn.VE.MapStyle.Shaded, h = g && d != null && d.length > 0, i = h ? d : this.SourceName;return i.replace(/%1/g, a.MapStyle).replace(/%2/g, c).replace(/%3/g, a.MapStyle).replace(/%4/g, f).replace(/%5/g, a.MapStyle == roadStyle ? "png" : "jpeg").replace(/%6/g, generations[a.MapStyle]);} else {return "";}} catch (j) {}};a.NumServers = 4;tileLayerManager.AddTileSource(a);}

function SetView(a) {if (currentMode != null && currentMode == threeDMode) {return SetView3DSpecialized(a);}if (a == null) {return CreateNewView();}if (zooming || dragging) {return true;}if (panning) {StopContinuousPan();}var b = a.latlong;if (a.GetViewType() == Msn.VE.MapViewType.LatLongRect) {b = a.latlongRect.Center();}if (a.mapStyle == obliqueStyle) {return SetViewOblique(a, b);} else {return SetViewOrtho(a, b);}}

function SetView3DSpecialized(a) {var b = false;if (a == null) {a = new Msn.VE.MapView;a.Copy(currentView);b = true;}if (!view3DCreated) {b = true;}return SetView3D(a, b);}

function SetViewOblique(a, c) {if (obliqueMode == null) {return true;}preferredView.Copy(a);currentMode = obliqueMode;if (Msn.VE.API) {p_elSource.style.background = "#000 url(\"" + Msn.VE.API.Globals.vecurrentdomain + "/i/bin/" + Msn.VE.API.Globals.vecurrentversion + "/oblique/oblique_bg.gif\") repeat";} else {p_elSource.style.background = "#000 url(\"./i/bin/" + window.buildVersion + "/oblique/oblique_bg.gif\") repeat";}
function b() {HandleSetViewObliqueResolve(a, c, preferredView);}
a.Resolve(currentMode, width, height, b);}

function HandleSetViewObliqueResolve(a, c, h) {if (targetTool.centeringTrigger) {targetTool.centeringTrigger = false;obliqueMode.RequestSceneAtLatLong(c, a.sceneOrientation, true);return true;}var b = obliqueMode.GetScene();if ((!b || b.GetID() != a.sceneId) && a.sceneId != null) {obliqueMode.RequestScene(a.sceneId);return true;}if (!b || !b.ContainsLatLong(c, a.zoomLevel) && b.GetID() != a.sceneId || b.GetOrientation() != a.sceneOrientation) {obliqueMode.RequestSceneAtLatLong(c, a.sceneOrientation, true);return true;}c = a.latlong;h.Copy(a);currentMode.ValidateZoomLevel(a);currentBounds = currentMode.GetBounds(a);ClipView(a, currentBounds);if (a.Equals(currentView) && !resizeInProgress) {return false;}var f = a.GetX(currentView.zoomLevel) - currentView.center.x, g = a.GetY(currentView.zoomLevel) - currentView.center.y, d = Math.sqrt(f * f + g * g);previousCenter = currentView.latlong;var e = 0;if (!previousCenter.Equals(a.latlong)) {e += Msn.VE.ViewChangeType.Pan;}if (currentView.zoomLevel != a.zoomLevel) {e += Msn.VE.ViewChangeType.Zoom;}SetLastViewChangeType(e);var j = d < width && d < height && a.zoomLevel == currentView.zoomLevel && IsAnimationEnabled() && a.mapStyle == currentView.mapStyle && (a.sceneId == null || a.sceneId == currentView.sceneId);if (j) {PanToPixel(new VEPixel(a.center.x - originX - offsetX, a.center.y - originY - offsetY), true);return true;}previousZoomLevel = currentView.zoomLevel;if (currentView.zoomLevel != a.zoomLevel) {Fire("onstartzoom", CreateEvent(null, null, null, a));zooming = true;}var i = d < width && d < height && (a.zoomLevel == currentView.zoomLevel - 1 || a.zoomLevel == currentView.zoomLevel + 1) && IsAnimationEnabled() && a.mapStyle == currentView.mapStyle && (a.sceneId == null || a.sceneId == currentView.sceneId);if (i) {tileLayerManager.zoomView(a);return true;}UpdateTiles(a);return true;}

function SetViewOrtho(a, f) {currentMode = orthoMode;if (a.mapStyle == "r") {p_elSource.style.backgroundColor = "#e9e7d4";p_elSource.style.backgroundImage = "none";} else {p_elSource.style.backgroundColor = "black";}a.Resolve(currentMode, width, height);f = a.latlong;preferredView.Copy(a);currentMode.ValidateZoomLevel(a);currentBounds = currentMode.GetBounds(a);ClipView(a, currentBounds);a.Resolve(currentMode, width, height);if (a.Equals(currentView) && !resizeInProgress) {return false;}var d = a.GetX(currentView.zoomLevel) - currentView.center.x, e = a.GetY(currentView.zoomLevel) - currentView.center.y, b = Math.sqrt(d * d + e * e);previousCenter = currentView.GetCenterLatLong();var c = 0;if (!previousCenter.Equals(a.GetCenterLatLong())) {c += Msn.VE.ViewChangeType.Pan;}if (currentView.zoomLevel != a.zoomLevel) {c += Msn.VE.ViewChangeType.Zoom;}SetLastViewChangeType(c);var h = b < width && b < height && a.zoomLevel == currentView.zoomLevel && IsAnimationEnabled() && a.mapStyle == currentView.mapStyle && (a.sceneId == null || a.sceneId == currentView.sceneId);if (h) {PanToLatLong(a.latlong.latitude, a.latlong.longitude, true);return true;}previousZoomLevel = currentView.zoomLevel;if (currentView.zoomLevel != a.zoomLevel) {Fire("onstartzoom", CreateEvent(null, null, null, a));zooming = true;}var g = b < width && b < height && (a.zoomLevel == currentView.zoomLevel - 1 || a.zoomLevel == currentView.zoomLevel + 1) && IsAnimationEnabled() && a.mapStyle == currentView.mapStyle && (a.sceneId == null || a.sceneId == currentView.sceneId);if (g) {tileLayerManager.zoomView(a);return true;}UpdateTiles(a);return true;}

function CreateNewView() {var a = new Msn.VE.MapView;a.Copy(currentView);a.SetAltitude(-1000);a.SetTilt(-90);a.SetDirection(0);var b = a.latlong, c = ClipLatitude(b.latitude);if (b.latitude != c) {a.SetCenterLatLong(new Msn.VE.LatLong(c, b.longitude));a.Resolve(currentMode, width, height);}if (a.mapStyle == obliqueStyle) {currentMode = obliqueMode;} else {currentMode = orthoMode;}currentMode.ValidateZoomLevel(a);UpdateTiles(a);return true;}

function UpdateTiles(a) {currentView.Destroy();currentView = a;tileLayerManager.SetViewPort();tileLayerManager.LoadBaseLayer("Road", mapTiles, 1, 0);tileLayerManager.RefreshTileLayers();tileLayerManager.FinalizeView();RepositionPushpins();}

function SetLastViewChangeType(a) {if (Msn.VE.ViewChangeType.IsValid(a)) {lastViewChangeType = a;}}
_VERegisterNamespaces("Msn.VE.Geometry");Msn.VE.Geometry.Point = function (c, d) {var a = this, b = Msn.VE.Geometry;this.x = c;this.y = d;this.add = function (c, d) {var e = new b.Point(a.x + c, a.y + d);return e;};this.getDistanceFrom = function (b) {var c = Math.pow(b.x - a.x, 2) + Math.pow(b.y - a.y, 2), d = Math.sqrt(c);return d;};};Msn.VE.Geometry.Overlap = {Range:{GreaterThanX:1, LessThanX:2, GreaterThanY:4, LessThanY:8, InXRange:16, InYRange:32, InRange:48}, getInstance:function (f, g) {var d = Msn.VE.Geometry.Overlap, a = f, b = g, c = 0;e();
function e() {if (b.getP2().x > a.getP2().x) {c += d.Range.GreaterThanX;}if (b.getP1().x < a.getP1().x) {c += d.Range.LessThanX;}if (b.getP2().y > a.getP2().y) {c += d.Range.GreaterThanY;}if (b.getP1().y < a.getP1().y) {c += d.Range.LessThanY;}if (a.getP1().x <= b.getP1().x && b.getP2().x <= a.getP2().x) {c += d.Range.InXRange;}if (a.getP1().y <= b.getP1().y && b.getP2().y <= a.getP2().y) {c += d.Range.InYRange;}}
this.getRange = function () {return c;};this.getLeftXBleed = function () {if (c & d.Range.LessThanX) {return Math.abs(a.getP1().x - b.getP1().x);} else {return 0;}};this.getRightXBleed = function () {if (c & d.Range.GreaterThanX) {return b.getP2().x - a.getP2().x;} else {return 0;}};this.getTopYBleed = function () {if (c & d.Range.LessThanY) {return Math.abs(a.getP1().y - b.getP1().y);} else {return 0;}};this.getBottomYBleed = function () {if (c & d.Range.GreaterThanY) {return b.getP2().y - a.getP2().y;} else {return 0;}};}};Msn.VE.Geometry.Rectangle = function (h, i) {var g = this, a = h, b = i, d, e;f();
function f() {c();}
this.move = function (c) {a.x = c.x;a.y = c.y;b.x = c.x + e;b.y = c.y + d;};this.getP1 = function () {return a;};this.getP2 = function () {return b;};this.setP1 = function (b) {a = b;c();};this.setP2 = function (a) {b = a;c();};this.getWidth = function () {return e;};this.getHeight = function () {return d;};this.containsPoint = function (c) {return c.x >= a.x && c.x <= b.x && c.y >= a.y && c.y <= b.y;};this.scale = function (d) {a.x -= d;a.y -= d;b.x += d;b.y += d;c();};this.getOverlap = function (a) {var b = Msn.VE.Geometry;return new b.Overlap.getInstance(g, a);};
function c() {d = b.y - a.y;e = b.x - a.x;}
};Msn.VE.Geometry.Functions = {getSlope:function (a, b) {return (b.y - a.y) / (b.x - a.x);}, getYIntercept:function (b, a) {return a.y - b * a.x;}, getElementPosition:function (a) {var b = 0, c = 0;while (a && a.offsetParent) {b += a.offsetLeft - a.scrollLeft;c += a.offsetTop - a.scrollTop;a = a.offsetParent;}return {x:b, y:c};}, getMousePosition:function (a) {if (typeof a == "undefined") {a = window.event;}var b = {x:0, y:0};if (typeof a.pageX != "undefined" && typeof a.x != "undefined") {b.x = a.pageX;b.y = a.pageY;} else {var c = this.getScrollPosition();b.x = a.clientX + c.x;b.y = a.clientY + c.y;}return b;}, getScrollPosition:function () {var a = {x:0, y:0};if (typeof window.pageYOffset != "undefined") {a.x = window.pageXOffset;a.y = window.pageYOffset;} else if (typeof document.documentElement.scrollTop != "undefined" && document.documentElement > 0) {a.x = document.documentElement.scrollLeft;a.y = document.documentElement.scrollTop;} else if (typeof document.body.scrollTop != "undefined") {a.x = document.body.scrollLeft;a.y = document.body.scrollTop;}return a;}, getViewportSize:function () {var a = {x:0, y:0};if (typeof window.innerWidth != "undefined") {a.x = window.innerWidth;a.y = window.innerHeight;} else if (typeof document.documentElement != "undefined" && typeof document.documentElement.clientWidth != "undefined" && document.documentElement.clientWidth != 0) {a.x = document.documentElement.clientWidth;a.y = document.documentElement.clientHeight;} else {a.x = document.getElementsByTagName("body")[0].clientWidth;a.y = document.getElementsByTagName("body")[0].clientHeight;}return a;}, getBestBoundingPoint:function (f, b, c) {var a = Msn.VE.Geometry;if (!b) {b = a.Functions.getElementPosition(f);}var e = new a.Rectangle(b, new a.Point(b.x + f.offsetWidth, b.y + f.offsetHeight)), i = c.getOverlap(e), d = i.getRange();if ((d & a.Overlap.Range.InRange) == a.Overlap.Range.InRange) {return b;}var g = b.x, h = b.y;if (d & a.Overlap.Range.GreaterThanX) {g = c.getP2().x - e.getWidth();}if (d & a.Overlap.Range.LessThanX) {g = c.getP1().x;}if (d & a.Overlap.Range.GreaterThanY) {h = c.getP2().y - e.getHeight();}if (d & a.Overlap.Range.LessThanY) {h = c.getP1().y;}return new a.Point(g, h);}};view3DMode = false;var sentinel3D;
function View3DAddPushpin(f, b, c, k, j, g, d, h, a) {a = parseInt(a);var e = TranslatePushpinURL(g, d, h, a), i = Msn.VE.PushPinTypes;b = parseFloat(b);c = parseFloat(c);switch (a) {case i.SearchResult:spacecontrol.AddPointWithProperties(0, f, b, c, e, "text=\"" + d + "\"");break;default:spacecontrol.AddPoint(0, f, b, c, e);break;}}

function View3DRemovePushpin(a) {spacecontrol.DeleteGeometry(0, a);}

function AddView3DParameter(d, c, b) {var a = document.createElement("param");a.name = c;a.value = b;d.appendChild(a);}

function CreateView3DControl(a) {initial3dView = new Msn.VE.MapView;initial3dView.Copy(a);if (sentinel3D == null) {sentinel3D = GetSentinel();}if (null == sentinel3D) {View3DUnavailable();return false;}if (sentinel3D != null && sentinel3D.CurrentVersion < 1.01) {View3DUpgrade();return false;}spacediv = document.createElement("div");spacediv.id = "MSVE_spacediv";spacediv.className = "MSVE_SLMap";spacediv.style.position = "absolute";spacecontrol = document.createElement("object");var b = a.cameraLatlong == null ? a.latlong : a.cameraLatlong;AddView3DParameter(spacecontrol, "StartLongitude", b.longitude);AddView3DParameter(spacecontrol, "StartLatitude", b.latitude);AddView3DParameter(spacecontrol, "StartPitch", a.GetTilt());AddView3DParameter(spacecontrol, "StartHeading", - a.GetDirection());var c = a.GetAltitude();if (c > -1000) {AddView3DParameter(spacecontrol, "StartAltitude", c);} else {AddView3DParameter(spacecontrol, "StartZoomLevel", a.zoomLevel);}spacediv.appendChild(spacecontrol);try {if (window.navigator.userAgent.indexOf("MSIE") != -1) {spacecontrol.classid = "clsid:68BFC611-B963-4e8c-B0FE-0DD4FB832796";} else {spacecontrol.type = "application/x-virtual-earth-3d";}} catch (e) {View3DUnavailable();spacecontrol = false;return false;}spacecontrol.ControlId = init3dparam;AttachEvent("onresize", ResizeControl);p_elSource.appendChild(spacediv);ResizeControl();var d = ValidateControl();if (d) {IterativeCameraRefinement();}if (typeof state != "undefined" && state != null) {state.Set3DViewInstallInProgress("");}return d;}

function View3DUnavailable() {if (IsEventAttached("onmodenotavailable")) {Fire("onmodenotavailable", Msn.VE.MapActionMode.Mode3D);} else if (typeof Msn.VE.API != "undefined" && Msn.VE.API != null) {if (sentinel3D != null) {window.open(Msn.VE.API.Globals.vecurrentdomain + "/Help/" + Msn.VE.API.Globals.locale + "/View3DUnavailable.htm", "_blank", "width=600,height=550,menubar=0,resizeable=0,status=0,titlebar=0,toolbar=0,scrollbars=0");} else if (window.navigator.userAgent.indexOf("MSIE") != -1) {window.open(Msn.VE.API.Globals.vecurrentdomain + "/Help/" + Msn.VE.API.Globals.locale + "/View3DIEInstall.htm", "_blank", "width=740,height=650,menubar=0,resizeable=0,status=0,titlebar=0,toolbar=0,scrollbars=0");} else {window.open(Msn.VE.API.Globals.vecurrentdomain + "/Help/" + Msn.VE.API.Globals.locale + "/View3DFInstall.htm", "_blank", "width=740,height=650,menubar=0,resizeable=0,status=0,titlebar=0,toolbar=0,scrollbars=0");}}}

function CallIterativeCameraRefinement() {var a = GetMapControlInstance(null);if (a) {a.IterativeCameraRefinement();}}

function IterativeCameraRefinement() {if (cameraUpdateCount > 0) {return;}if (IsModeEnabled(Msn.VE.MapActionMode.Mode3D) && spacecontrol) {if (!spacecontrol.AllTilesLoaded) {setTimeout(CallIterativeCameraRefinement, 1000);} else {var a = false, c = currentView.GetAltitude(), d = initial3dView.GetAltitude();if (d > -1000 && c > -1000) {a = Math.abs(c - d) > 1;} else {a = currentView.GetZoomLevel() != initial3dView.GetZoomLevel();}if (a) {var b = initial3dView.MakeCopy();b.SetMapStyle(currentView.mapStyle);SetView3D(b, true);}}}}

function ValidateControl() {var a = false, b = 300;if (spacecontrol.Created) {while (!spacecontrol.FirstFrameRendered && !spacecontrol.LoadFailed && !spacecontrol.AlreadyLoaded && b > 0) {b--;spacecontrol.ProcessEvents();}a = spacecontrol.FirstFrameRendered;}if (spacecontrol.Created && !spacecontrol.HardwareAccelerationEnabled && spacecontrol.LoadFailed) {window.setTimeout(DelayedHWDialog, 2759);window.setTimeout(OnHardwareAccelHelpFired, 4000);if (mode == Msn.VE.MapActionMode.Mode3D) {EnableMode(Msn.VE.MapActionMode.Mode2D);}return false;} else if (!spacecontrol.Created || !spacecontrol.Enabled || !spacecontrol.IsHandleCreated || !a && !spacecontrol.AlreadyLoaded) {View3DUnavailable();spacecontrol = false;return false;} else {spacecontrol.focus();view3DCreated = true;return true;}}

function ResizeControl() {if (spacecontrol) {spacecontrol.style.height = p_elSource.offsetHeight + "px";spacecontrol.style.width = p_elSource.offsetWidth + "px";}RepositionShims();}

function SetView3D(a, g) {a.Resolve(orthoMode, width, height);preferredView.Copy(a);currentMode.ValidateZoomLevel(a);a.Resolve(orthoMode, width, height);if (!view3DCreated && !spacecontrol) {var l = CreateView3DControl(a);if (!l) {return false;}if (a.GetTilt() != -90) {a.Resolve(orthoMode, width, height);cameraUpdateCount = -1;} else {cameraUpdateCount = 0;a._supressFlyToCall = true;}p_elSource.style.backgroundColor = "#e9e7d4";originX = 0;originY = 0;offsetX = 0;offsetY = 0;UpdateFromParent();}if (!g && a.Equals(currentView)) {if (!spaceCameraIsFlying) {ProcessQueuedRequest(null, null);}return false;}var c = false;if (a.GetAltitude() > -1000) {c = Math.abs(a.GetAltitude() - currentView.GetAltitude()) > 0.0001;} else {c = currentView.zoomLevel != a.zoomLevel;}currentView.Destroy();currentView = a;if (view3DCreated) {if (previousMapStyle != currentView.mapStyle) {var b = "Road";if (currentView.mapStyle == "a") {b = "Aerial";spacecontrol.ShowAtmosphere = true;}if (currentView.mapStyle == "h") {b = "Hybrid";spacecontrol.ShowAtmosphere = true;}if (currentView.mapStyle == "r") {spacecontrol.TexturesVisible = false;if (spacecontrol.HardwareClassificationLevel < 3) {b = "LowRoad";}spacecontrol.ShowAtmosphere = false;} else {spacecontrol.TexturesVisible = true;}spacecontrol.AddImageSource("Terrain", "Texture", vemanifestdomain + "/Manifests/" + b + "ContentManifest.xml", 0, 1);Fire("onchangemapstyle");previousMapStyle = currentView.mapStyle;}var d = a.cameraLatlong, i = a.zoomLevel, j = a.GetAltitude(), k = a.GetTilt(), h = a.GetDirection(), e = a._needsPivotOperation;if (c) {Fire("onstartzoom");}if (a._supressFlyToCall) {a._supressFlyToCall = false;} else {var f = spacecontrol.FlyTo(d.latitude, d.longitude, i, j, k, h, e ? 1 : 0);if (!f && !spaceCameraIsFlying) {ProcessQueuedRequest(null, null);}}if (c) {Fire("onendzoom");}if (copyright) {copyright.Update();}return true;}return false;}
var on3DAnimationInterruptedCallback = null;
function SetOn3DAnimationInterruptedCallback(a) {on3DAnimationInterruptedCallback = a;}

function GetOn3DAnimationInterruptedCallback() {return on3DAnimationInterruptedCallback;}

function SetViewport(b, d, c, e) {Sync3dView();var a = preferredView.MakeCopy();a.sceneId = null;a.SetLatLongRectangle(new Msn.VE.LatLongRectangle(new Msn.VE.LatLong(ClipLatitude(b), ClipLongitude(d)), new Msn.VE.LatLong(ClipLatitude(c), ClipLongitude(e))));a.SetTilt(-90);a.SetDirection(0);return SetView(a);}

function SetBestMapView(b) {var a = GetBestMapViewBounds(b);if (!a || a.constructor != Array) {return null;}if (a.length == 4) {SetViewport(a[0], a[1], a[2], a[3]);}}

function GetBestMapViewBounds(a) {var b = [];if (!a || a.constructor != Array) {return null;}var c = a[0].latitude, d = a[0].longitude, f = c, g = d;for (var e = 1; e < a.length; e++) {c = MathMin(c, a[e].latitude);d = MathMin(d, a[e].longitude);f = MathMax(f, a[e].latitude);g = MathMax(g, a[e].longitude);}var h = (f - c) * 0.1, i = (g - d) * 0.1;c -= h;d -= i;f += h;g += i;if (!b || b.constructor != Array) {return null;} else {b.push(ClipLatitude(c));b.push(ClipLongitude(d));b.push(ClipLatitude(f));b.push(ClipLongitude(g));return b;}}

function IncludePointInViewport(d, c) {var a = new Msn.VE.LatLong(d, c);if (currentView.mapStyle == obliqueStyle) {var b = obliqueMode.GetScene();if (!b || !b.ContainsLatLong(a)) {SetMapStyle(lastOrthoMapStyle);}}SetBestMapView(new Array(currentView.latlong, a));}

function ClipLatitude(a) {return Clip(a, minLatitude, maxLatitude);}

function ClipLongitude(a) {return Clip(a, minLongitude, maxLongitude);}

function Clip(a, c, b) {if (a < c) {return c;}if (a > b) {return b;}return a;}

function GetXmlHttp() {var a = null;try {a = new ActiveXObject("Msxml2.XMLHTTP");} catch (b) {try {a = new ActiveXObject("Microsoft.XMLHTTP");} catch (c) {a = null;}}if (!a && typeof XMLHttpRequest != "undefined") {a = new XMLHttpRequest;}return a;}

function SetZoom(b) {Sync3dView();var a = preferredView.MakeCopy();a.SetZoomLevel(b);SetView(a);}

function ZoomIn() {Sync3dView();var a = preferredView.MakeCopy();a.SetZoomLevel(currentView.zoomLevel + 1);SetView(a);}

function ZoomOut() {Sync3dView();var a = preferredView.MakeCopy();a.SetZoomLevel(currentView.zoomLevel - 1);SetView(a);}

function SetCenterAndZoom(d, b, c) {Sync3dView();var a = preferredView.MakeCopy();a.sceneId = null;a.SetCenterLatLong(new Msn.VE.LatLong(d, b));a.SetZoomLevel(c);SetView(a);}

function GetCurrentViewMaxZoomLevel(b) {var a = b;if (typeof a == "undefined" || a == null) {a = preferredView;}if (!currentMode) {return tileLayerManager.GetMaxTileZoom();}return currentMode.GetCurrentMaxZoomLevel(a);}

function ObliqueMode() {var scene = null, available = false, availableBefore = false, xmlHttp = null, obliqueUrl = null, showOnLoad = false, requestUrl = null, timerId = -1, m_clientToken = null, m_GUID = null, boundsrequestPending = false, updateAvailabilityCallbackList = [];this.Init = function (a) {obliqueUrl = a;};this.SetClientToken = function (a) {m_clientToken = a;if (scene) {scene.SetClientToken(m_clientToken);}};this.SetGUID = function (a) {m_GUID = a;if (scene) {scene.SetGUID(m_GUID);}};this.Destroy = function () {m_clientToken = null;};this.RequestPending = function () {return requestPending;};
function IsValidTile(b, c, a) {return scene.IsValidTile(b, c, a);}

function GetFilename(a, b, c) {return scene.GetTileFilename(a, b, c);}

function MetersPerPixel(d) {if (!scene) {return 0;}var a = new VEPixel(MathRound(originX + offsetX + width / 2), MathRound(originY + offsetY + height / 2)), e = scene.PixelToLatLong(a, d);a.x++;var f = scene.PixelToLatLong(a, d), g = Math.sin(DegToRad(e.latitude)), h = Math.sin(DegToRad(f.latitude)), b = earthRadius / 2 * MathAbs(Math.log((1 + g) / (1 - g)) - Math.log((1 + h) / (1 - h))), c = earthRadius * MathAbs(DegToRad(e.longitude) - DegToRad(f.longitude));return Math.sqrt(c * c + b * b);}

function PixelToLatLong(b, a) {return scene ? scene.PixelToLatLong(b, a) : null;}

function PixelToLatLongAsync(b, c, a) {if (scene) {scene.PixelToLatLongAsync(b, c, a);} else {a(null);}}

function LatLongToPixel(b, a) {return scene ? scene.LatLongToPixel(b, a) : null;}

function LatLongToPixelAsync(b, c, a) {if (scene) {scene.LatLongToPixelAsync(b, c, a);} else {a(null);}}

function GetCurrentMaxZoomLevel() {return 2;}

function ValidateZoomLevel(a) {if (a.zoomLevel >= 2) {tileLayerManager.SetMarketMaxZoom(2);}if (a.zoomLevel < 1) {a.SetZoomLevel(1);} else if (a.zoomLevel > 2) {a.SetZoomLevel(2);}}

function GetScene() {return scene;}

function GetBounds() {return scene.GetBounds();}

function IsAvailable() {return available;}

function GetEventInfo() {if (!available) {return null;}var a = new Object;return a;}

function UpdateAvailability() {if (currentView != null && currentView.mapStyle != obliqueStyle && currentView.zoomLevel > 0) {if (currentView.zoomLevel < MapControl.Features.BirdsEyeAtZoomLevel) {scene = null;availableBefore = available;available = false;NotifyListeners();} else {RequestSceneAtLatLong(currentView.latlong, "North", false, 500);}}}

function RequestSceneAtLatLong(a, b, d, c) {CancelRequest();showOnLoad = d;if (!InBounds(a)) {scene = null;availableBefore = available;available = false;NotifyListeners();return;}requestUrl = obliqueUrl + "?ver=3&lat=" + a.latitude + "&lon=" + a.longitude;if (b) {requestUrl += "&o=" + b;}if (m_clientToken) {requestUrl += "&ct=" + m_clientToken;}if (m_GUID) {requestUrl += "&mapguid=" + m_GUID;}if (c) {timerId = window.setTimeout(SendRequest, c);} else {SendRequest();timerId = -1;}}

function RequestScene(a) {if (scene && scene.GetID() == a) {return;}CancelRequest();showOnLoad = true;requestUrl = obliqueUrl + "?ver=3&id=" + a;SendRequest();}

function CancelRequest() {try {if (timerId != -1) {window.clearTimeout(timerId);}} catch (a) {}timerId = -1;try {if (xmlHttp) {xmlHttp.onreadystatechange = null;xmlHttp.abort();}} catch (a) {}}

function SendRequest() {CancelRequest();if (!requestUrl) {return;}requestPending = true;if (Msn.VE.API != null) {requestUrl += "&" + Msn.VE.API.Constants.market + "=" + Msn.VE.API.Globals.locale;var a = new VENetwork;a.ServiceUrl = requestUrl;a.BeginInvoke("EndInvokeImagery", null, APIResponseHandler);} else {if (!xmlHttp) {xmlHttp = GetXmlHttp();}if (xmlHttp) {xmlHttp.open("POST", requestUrl, true);xmlHttp.onreadystatechange = ResponseHandler;xmlHttp.send("");}}}

function APIResponseHandler(a) {availableBefore = available;if (a != null) {scene = a;scene.SetClientToken(m_clientToken);scene.SetGUID(m_GUID);available = true;} else {scene = null;available = false;}NotifyListeners();}

function ResponseHandler() {if (!xmlHttp || xmlHttp.readyState != 4) {return;}timerId = -1;availableBefore = available;var code = xmlHttp.responseText;if (code) {try {scene = eval(code + "EndInvokeImagery();");if (scene != null) {available = true;} else {available = false;}} catch (a) {scene = null;available = false;}} else {scene = null;available = false;}xmlHttp = null;NotifyListeners();}

function NotifyListeners() {requestPending = false;if (showOnLoad) {showOnLoad = false;if (available) {var a = preferredView.MakeCopy();if (a.mapStyle != obliqueStyle) {a.SetZoomLevel(1);a.SetCenterLatLong((new Msn.VE.LatLong).Copy(preferredView.latlong));}a.SetMapStyle(obliqueStyle, scene.GetID(), scene.GetOrientation());SetView(a);Fire("onobliquechange");} else {var a = preferredView.MakeCopy();a.SetMapStyle(lastOrthoMapStyle);if (a.GetViewType() != "latlongRect") {a.SetZoomLevel(lastOrthoZoomLevel);}SetView(a);Fire("onendmapstyleoblique");Fire("onerror", CreateEvent(currentView.latlong, currentView.zoomLevel, L_ObliqueModeImageNotAvailable_Text));}}if (availableBefore != available) {if (available) {Fire("onobliqueenter");} else {Fire("onobliqueleave");}}if (updateAvailabilityCallbackList.length > 0) {CallCallbackOnUpdateAvailabilityCompleted(available);}}

function InBounds(a) {if (!a || !bounds || bounds.length == 0) {return false;}var b = LatLongToQuadKey(a, bounds[0].length);return BinarySearchBounds(b, 0, bounds.length - 1);}

function LatLongToQuadKey(g, c) {var e = orthoMode.LatLongToPixel(g, c), h = MathFloor(e.x / tileSize), i = MathFloor(e.y / tileSize), d = "";for (var b = c; b > 0; b--) {var a = 0, f = 1 << b - 1;if ((h & f) != 0) {a++;}if ((i & f) != 0) {a += 2;}d += a + "";}return d;}

function BinarySearchBounds(a, d, c) {if (c < d) {return false;}var b = MathFloor((d + c) / 2);if (bounds[b] == a) {return true;}if (a < bounds[b]) {return BinarySearchBounds(a, d, b - 1);}return BinarySearchBounds(a, b + 1, c);}

function GetObliqueAvailability(a, b) {if (requestPending) {if (updateAvailabilityCallbackList[a] != true) {var c = updateAvailabilityCallbackList.push({callbackName:a, callback:b});updateAvailabilityCallbackList[a] = true;}} else if (typeof b == "function") {b(available);}}

function CallCallbackOnUpdateAvailabilityCompleted(c) {var d = updateAvailabilityCallbackList.length;for (var b = 0; b < d; b++) {var a = updateAvailabilityCallbackList.shift();delete updateAvailabilityCallbackList[a.callbackName];if (typeof a.callback == "function") {a.callback(c);}}}
this.IsValidTile = IsValidTile;this.GetFilename = GetFilename;this.MetersPerPixel = MetersPerPixel;this.PixelToLatLong = PixelToLatLong;this.PixelToLatLongAsync = PixelToLatLongAsync;this.LatLongToPixel = LatLongToPixel;this.LatLongToPixelAsync = LatLongToPixelAsync;this.GetBounds = GetBounds;this.ValidateZoomLevel = ValidateZoomLevel;this.IsAvailable = IsAvailable;this.UpdateAvailability = UpdateAvailability;this.CancelRequest = CancelRequest;this.GetEventInfo = GetEventInfo;this.GetScene = GetScene;this.RequestSceneAtLatLong = RequestSceneAtLatLong;this.RequestScene = RequestScene;this.GetCurrentMaxZoomLevel = GetCurrentMaxZoomLevel;this.GetObliqueAvailability = GetObliqueAvailability;}

function OrthoMode() {var a = [new Msn.VE.Bounds(1, 17, 0, 0, 2, 2), new Msn.VE.Bounds(18, 19, 35680, 82915, 83740, 113061), new Msn.VE.Bounds(18, 19, 122880, 53248, 155649, 103425), new Msn.VE.Bounds(18, 19, 12379, 112260, 20388, 119266), new Msn.VE.Bounds(18, 19, 80099, 115425, 85051, 119645), new Msn.VE.Bounds(18, 18, 216996, 80310, 242483, 117743)];this.Init = function () {};this.Destroy = function () {};
function j(a, b, d) {var c = 1 << d;return a >= 0 && b >= 0 && a < c && b < c;}

function i(c, d, f, b) {var a = new VETileContext;a.XPos = c;a.YPos = d;a.ZoomLevel = f;a.MapStyle = currentView.mapStyle;var e = b.GetTilePath(a);return e;}

function b(a) {return earthCircumference / ((1 << a) * tileSize);}

function h(d, e) {var c = b(e), f = d.x * c - projectionOffset, g = projectionOffset - d.y * c, a = new Msn.VE.LatLong;a.latitude = RadToDeg(Math.PI / 2 - 2 * Math.atan(Math.exp(- g / earthRadius)));a.longitude = RadToDeg(f / earthRadius);return a;}

function e(d, g, e) {var b = [];for (var a = 0; a < d.length; ++a) {var c = this.PixelToLatLong(d[a], g);if (Msn.VE.API != null) {var f = new VELatLong(c.latitude, c.longitude);b[a] = f;} else {b[a] = c;}}if (e) {e(b);}}

function g(d, f) {var e = Math.sin(DegToRad(d.latitude)), g = earthRadius * DegToRad(d.longitude), h = earthRadius / 2 * Math.log((1 + e) / (1 - e)), c = b(f), a = new VEPixel;a.x = (projectionOffset + g) / c;a.y = (projectionOffset - h) / c;return a;}

function d(b, e, d) {var c = [];for (var a = 0; a < b.length; ++a) {c[a] = this.LatLongToPixel(b[a], e);}if (d) {d(c);}}

function k(c) {if (c == undefined) {c = currentView;}var d = c.zoomLevel, f = c.center.x + mapCenterOffset.x, g = c.center.y + mapCenterOffset.y;for (var b = 0; b < a.length; b++) {var h = d - a[b].z1, e = tileSize * Math.pow(2, h), k = a[b].x1 * e, i = a[b].x2 * e, l = a[b].y1 * e, j = a[b].y2 * e;if (f >= k && f <= i && g >= l && g <= j) {if (d >= a[b].z1 && d <= a[b].z2 || d <= tileLayerManager.GetMaxTileZoom()) {return a[b];}}}}

function c(e) {var f = e.center.x + mapCenterOffset.x, g = e.center.y + mapCenterOffset.y, c = 0;for (var b = 0; b < a.length; b++) {var d = tileSize * Math.pow(2, e.zoomLevel - a[b].z1), j = a[b].x1 * d, h = a[b].x2 * d, k = a[b].y1 * d, i = a[b].y2 * d;if (f >= j && f <= h && g >= k && g <= i) {c = Math.max(c, a[b].z2);}}c = Math.max(c, tileLayerManager.GetMaxTileZoom());return c;}

function f(d) {var f = d.center.x + mapCenterOffset.x, g = d.center.y + mapCenterOffset.y, c = 0;for (var b = 0; b < a.length; b++) {var e = tileSize * Math.pow(2, d.zoomLevel - a[b].z1), j = a[b].x1 * e, h = a[b].x2 * e, k = a[b].y1 * e, i = a[b].y2 * e;if (f >= j && f <= h && g >= k && g <= i) {c = 0;if (a[b].z2 >= d.zoomLevel) {tileLayerManager.SetMarketMaxZoom(a[b].z2);return;} else if (a[b].z2 > c) {tileLayerManager.SetMarketMaxZoom(a[b].z2);c = a[b].z2;if (c < tileLayerManager.GetMaxTileZoom()) {if (d.zoomLevel <= tileLayerManager.GetMaxTileZoom()) {c = d.zoomLevel;} else {c = tileLayerManager.GetMaxTileZoom();}}}}}d.SetZoomLevel(c);}
this.IsValidTile = j;this.GetFilename = i;this.MetersPerPixel = b;this.PixelToLatLong = h;this.PixelToLatLongAsync = e;this.LatLongToPixel = g;this.LatLongToPixelAsync = d;this.GetBounds = k;this.ValidateZoomLevel = f;this.GetCurrentMaxZoomLevel = c;}

function ThreeDMode() {var internalOrthoMode = new OrthoMode, bounds = [new Msn.VE.Bounds(1, 17, 0, 0, 2, 2), new Msn.VE.Bounds(18, 19, 35680, 82915, 83740, 113061), new Msn.VE.Bounds(18, 19, 122880, 53248, 155649, 103425), new Msn.VE.Bounds(18, 19, 12379, 112260, 20388, 119266), new Msn.VE.Bounds(18, 19, 80099, 115425, 85051, 119645), new Msn.VE.Bounds(18, 18, 216996, 80310, 242483, 117743)];this.Init = function () {};this.Destroy = function () {};
function IsValidTile(b, c, a) {return internalOrthoMode.IsValidTile(b, c, a);}

function GetFilename(a, b, d, c) {return internalOrthoMode.GetFilename(a, b, d, c);}

function MetersPerPixel(a) {return internalOrthoMode.MetersPerPixel(a);}

function PixelToLatLong(pixel) {if (!view3DCreated) {return null;}var lat, lon, latlonvalid, result = spacecontrol.PixelToLatLong(pixel.x, pixel.y);eval(result);if (latlonvalid != 0) {var latlong = new Msn.VE.LatLong;latlong.latitude = RadToDeg(lat);latlong.longitude = RadToDeg(lon);return latlong;}return null;}

function PixelToLatLongAsync(d, g, e) {var b = [];for (var a = 0; a < d.length; ++a) {var c = this.PixelToLatLong(d[a], g);if (Msn.VE.API != null) {var f = new VELatLong(c.latitude, c.longitude);b[a] = f;} else {b[a] = c;}}if (e) {e(b);}}

function LatLongToPixel(latlong) {if (!view3DCreated) {return null;}var x, y, xyvalid = 0, result = spacecontrol.LatLongToPixel(parseFloat(latlong.latitude), parseFloat(latlong.longitude));eval(result);if (xyvalid != 0) {var pixel = new VEPixel(x, y);return pixel;}return null;}

function LatLongToPixelAsync(b, e, d) {var c = [];for (var a = 0; a < b.length; ++a) {c[a] = this.LatLongToPixel(b[a], e);}if (d) {d(c);}}

function GetBounds() {return null;}

function GetCurrentMaxZoomLevel() {return 19;}

function ValidateZoomLevel(a) {if (a.zoomLevel < 1) {a.SetZoomLevel(1);}if (a.zoomLevel > 19) {a.SetZoomLevel(19);}}

function _InternalOrthoMode() {return internalOrthoMode;}
this._InternalOrthoMode = _InternalOrthoMode;this.IsValidTile = IsValidTile;this.GetFilename = GetFilename;this.MetersPerPixel = MetersPerPixel;this.PixelToLatLong = PixelToLatLong;this.PixelToLatLongAsync = PixelToLatLongAsync;this.LatLongToPixel = LatLongToPixel;this.LatLongToPixelAsync = LatLongToPixelAsync;this.GetBounds = GetBounds;this.ValidateZoomLevel = ValidateZoomLevel;this.GetCurrentMaxZoomLevel = GetCurrentMaxZoomLevel;}

function BoxTool() {var b = document.createElement("div"), a = document.createElement("div"), c = 0, e = 0, d = 0, f = 0;this.Init = function () {b.className = "MSVE_ZoomBox_bg";a.className = "MSVE_ZoomBox_fg";b.attachEvent("onmouseup", MouseUp);a.attachEvent("onmouseup", MouseUp);if (map != null) {map.appendChild(b);map.appendChild(a);}};this.Destroy = function () {b.detachEvent("onmouseup", MouseUp);a.detachEvent("onmouseup", MouseUp);};
function i(b) {if (typeof VE_ContextMenu != "undefined" && VE_ContextMenu != null) {VE_ContextMenu.RemoveContextPin();VE_ContextMenu.CloseMenu();}x = GetLeftPosition(p_elSource);y = GetTopPosition(p_elSource);c = d = GetMouseX(b) - x + offsetX;e = f = GetMouseY(b) - y + offsetY;h(c, e, 1, 1);m();if (a.setCapture) {a.setCapture();}}

function j(a) {d = GetMouseX(a) - x + offsetX;f = GetMouseY(a) - y + offsetY;h(MathMin(c, d), MathMin(e, f), MathMax(1, MathAbs(d - c)), MathMax(1, MathAbs(f - e)));}

function k() {if (MathAbs(c - d) > 1 && MathAbs(e - f) > 1) {var b = preferredView.MakeCopy();b.SetZoomLevel(currentView.zoomLevel);b.SetPixelRectangle(new Msn.VE.PixelRectangle(new VEPixel(originX + c, originY + e), new VEPixel(originX + d, originY + f)));SetView(b);}setTimeout(l, 250);if (a.releaseCapture) {a.releaseCapture();}}

function h(e, f, d, c) {g(b, e + 1, f + 1, d, c);g(a, e, f, d, c);}

function g(a, d, e, c, b) {a.style.left = d + "px";a.style.top = e + "px";a.style.width = c + "px";a.style.height = b + "px";}

function m() {b.style.display = "block";a.style.display = "block";}

function l() {b.style.display = "none";a.style.display = "none";}
this.OnMouseDown = i;this.OnMouseMove = j;this.OnMouseUp = k;}

function PanTool() {var a = false;this.Init = function () {};this.Destroy = function () {};
function b(b) {a = false;lastMouseX = GetMouseX(b);lastMouseY = GetMouseY(b);if (p_elSource.setCapture) {p_elSource.setCapture();}x = GetLeftPosition(p_elSource);y = GetTopPosition(p_elSource);var d = originX + offsetX + GetMouseX(b) - x, e = originY + offsetY + GetMouseY(b) - y, c = CreateEvent(currentMode.PixelToLatLong(new VEPixel(d, e), currentView.zoomLevel));Fire("onstartpan", c);FireDefaultEvent("onmousedown", c);}

function c(d) {var b = GetMouseX(d), c = GetMouseY(d);PanMap(lastMouseX - b, lastMouseY - c);lastMouseX = b;lastMouseY = c;a = true;}

function d(c) {ComputeCenterPoint(true);if (p_elSource.releaseCapture) {p_elSource.releaseCapture();}if (a) {Fire("onendpan");Fire("onchangeview");a = false;}var d = originX + offsetX + GetMouseX(c) - x, e = originY + offsetY + GetMouseY(c) - y, b = CreateEvent(currentMode.PixelToLatLong(new VEPixel(d, e), currentView.zoomLevel));FireDefaultEvent("onmouseup", b);FireDefaultEvent("onclick", b);return b;}
this.OnMouseDown = b;this.OnMouseMove = c;this.OnMouseUp = d;}

function TargetTool() {var b = this, f = Msn.VE.Geometry, d, a, e, c;this.centeringTrigger = false;g();
function g() {d = false;a = false;e = null;c = false;m_dragging = false;}
this.init = function () {if (currentView.mapStyle == Msn.VE.MapStyle.Oblique) {b.trackMovement();}};this.destroy = function () {b.ignoreMovement();f = null;};this.isOutOfBounds = function () {return a;};this.trackMovement = function () {if (!d) {p_elSource.attachEvent("onmousemove", b.OnMouseMove);d = true;}};this.ignoreMovement = function () {p_elSource.detachEvent("onmousemove", b.OnMouseMove);d = a = b.centeringTrigger = false;p_this.SetCursor(cssCursors.Grab);};this.setBoundingArea = function (a) {if (a instanceof f.Rectangle) {e = a;}};this.OnMouseDown = function () {};this.OnMouseMove = function (b) {if (e == null) {return;}if (!dragging) {var d = f.Functions.getMousePosition(b);if (!e.containsPoint(d)) {if (!hijackMouseMove && (!c || p_elSource.style.cursor != cssCursors.Target)) {a = c = true;p_this.SetCursor(cssCursors.Target);}} else if (c) {a = c = false;p_this.SetCursor(cssCursors.Grab);}}};this.OnMouseUp = function (c) {if (typeof VE_ContextMenu != "undefined" && VE_ContextMenu != null) {VE_ContextMenu.RemoveContextPin();VE_ContextMenu.CloseMenu();}var g = c.which || c.button;if (a && g == 1) {c.cancelBubble = true;b.centeringTrigger = true;var e = originX + offsetX + Math.round(GetMapWidth() / 2), f = originY + offsetY + Math.round(GetMapHeight() / 2), d = currentMode.PixelToLatLong(new VEPixel(e, f), currentView.zoomLevel);SetCenter(d.latitude, d.longitude);}};}

function GetTrafficAvailability() {return trafficAvailable;}

function GetSlidingExpirationForAutoRefresh() {return 1800000;}

function GetAutoRefreshRate() {return 300000;}

function GetMarketsFile() {return "http://t1.traffic.virtualearth.net/incidents/markets.js";}

function GetIncidentsFile() {return "http://t0.traffic.virtualearth.net/incidents/market";}
var setTrafficViewflag = true;
function SetTrafficView() {var a = new VETileSourceSpecification;a.ID = trafficTiles;a.SourceName = "http://t%2.traffic.virtualearth.net/Flow/t%4.png";a.NumServers = 2;tileLayerManager.AddTileSource(a);tileLayerManager.LoadTileLayer("Traffic", a.ID, 0.6, 2);}

function VETileLayerManager() {var c = [], a = [], b = [], i = [], j = [], h = null, e = true, d = 17;this.AddTileSource = function (a) {if (c[a.ID] == null || c[a.ID] == "undefined") {c[a.ID] = a;}};this.Add3DTileSource = function (f, c, h) {if (trafficTiles == f) {return;}if (0 == a[f].zIndex) {return;}var g = c.MaxZoom == 1 ? 21 : c.MaxZoom, b = "ID=\"" + c.ID + "\" TILESOURCE=\"" + c.SourceName + "\" MINZOOM=\"" + c.MinZoom + "\" MAXZOOM=\"" + g + "\"", d = c.Bounds;if (typeof d != "undefined" && d != null) {b = b + " Bounds=\"";for (var e = 0; e < d.length; e++) {if (e > 0) {b = b + ",";}b = b + d[e].TopLeftLatLong.Longitude + "," + d[e].BottomRightLatLong.Latitude + "," + d[e].BottomRightLatLong.Longitude + "," + d[e].TopLeftLatLong.Latitude;}b = b + "\"";}h.AddImageSource(f, c.ID, b, a[f].zIndex, a[f].opacity);};this.AddAllTileSourcesTo3D = function (d) {if (typeof Msn.VE.API != "undefined" && Msn.VE.API != null) {for (var c = 0; c < b.length; c++) {this.Add3DTileSource(b[c], a[b[c]], d);}}};this.LoadBaseLayer = function (d, e, f, g) {if (a[d] == null || a[d] == "undefined") {a[d] = c[e];b.push(d);}a[d].opacity = f;a[d].zIndex = g;};this.SetTileLayerVisibility = function (c, b) {if (a[c] != null && typeof b != "undefined") {a[c].IsVisible = b;}};this.LoadTileLayer = function (d, g, j, l) {if (!e) {return;}if (a[d] == null || a[d] == "undefined") {a[d] = c[g];b.push(d);}if (a[d].currentTileList != null) {ClearTiles(a[d].currentTileList);}if (typeof a[d].IsVisible != "undefined" && a[d].IsVisible == false) {return;}a[d].currentTileList = [];a[d].oldTilesList = [];if (j != null && j != "undefined") {a[d].opacity = j;} else {a[d].opacity = 1;}if (l != null && l != "undefined") {a[d].zIndex = l;} else {a[d].zIndex = 1;}var h = false;if (typeof Msn.VE.API != "undefined" && Msn.VE.API != null) {var k = f();if (typeof k != "undefined" && k != null) {tileLayerManager.Add3DTileSource(d, c[g], k);}}var i = c[g].MaxZoom;if (i == 1) {i = c[mapTiles].MaxZoom;}if (currentView.zoomLevel >= c[g].MinZoom && currentView.zoomLevel <= i) {if (c[g].Bounds != "undefined" && c[g].Bounds != null) {h = tileLayerManager.CheckTilesAvailability(g, d);} else {h = true;}}if (h) {a[d].isActive = true;for (var n = tileViewportY1; n <= tileViewportY2; n++) {for (var m = tileViewportX1; m <= tileViewportX2; m++) {var o = RequestTile(m, n, currentView.zoomLevel, currentView.mapStyle, a[d], g, a[d].opacity, a[d].zIndex);a[d].currentTileList.push(o);}}}};this.SetViewPort = function () {map.style.top = "0px";map.style.left = "0px";originX = MathRound(currentView.center.x - width / 2);originY = MathRound(currentView.center.y - height / 2);offsetX = 0;offsetY = 0;tileViewportX1 = MathFloor((originX - buffer) / tileSize);tileViewportY1 = MathFloor((originY - buffer) / tileSize);tileViewportX2 = MathFloor((originX + width + buffer) / tileSize);tileViewportY2 = MathFloor((originY + height + buffer) / tileSize);tileViewportWidth = tileViewportX2 - tileViewportX1 + 1;tileViewportHeight = tileViewportY2 - tileViewportY1 + 1;};this.FinalizeView = function () {zooming = false;for (var c = 0; c < b.length; c++) {if (a[b[c]].oldTilesList != null) {ClearTiles(a[b[c]].oldTilesList);a[b[c]].oldTilesList = null;}for (var d = 0; d < a[b[c]].currentTileList.length; d++) {a[b[c]].currentTileList[d].SwapStates();a[b[c]].currentTileList[d].ClearSteps();a[b[c]].currentTileList[d].SetFactor(0);a[b[c]].currentTileList[d].ClearStates();}}for (var c = 0; c < pushpins.length; c++) {pushpins[c].SwapStates();pushpins[c].ClearSteps();pushpins[c].SetFactor(0);}window.setTimeout(ShowLines, 250);if (copyright) {copyright.Update();}if (previousMapStyle != currentView.mapStyle) {Fire("onchangemapstyle");previousMapStyle = currentView.mapStyle;}if (previousZoomLevel != currentView.zoomLevel) {Fire("onendzoom");}Fire("onchangeview");if (obliqueMode) {window.setTimeout(obliqueMode.UpdateAvailability, 100);}try {CollectGarbage();} catch (e) {}};this.CheckLayerUpdatability = function (c) {var d = false;if (a[b[c]].isActive == false) {this.RefreshTileLayer(a[b[c]].ID);}if (c >= 0) {d = a[b[c]].ID == mapTiles || a[b[c]].currentTileList.length > 0;}return d;};this.PanView = function () {if (!e) {return;}if (zooming) {return;}var h = originX + offsetX, i = originY + offsetY, j = MathFloor((h - buffer) / tileSize), l = MathFloor((i - buffer) / tileSize), k = MathFloor((h + width + buffer) / tileSize), m = MathFloor((i + height + buffer) / tileSize);while (tileViewportX1 < j) {for (var d = tileViewportHeight - 1; d >= 0; d--) {for (var c = 0; c < b.length; c++) {if (tileLayerManager.CheckLayerUpdatability(c)) {var g = a[b[c]].currentTileList.splice(d * tileViewportWidth, 1)[0];try {g.RemoveFromMap();} catch (n) {}}}}tileViewportX1++;tileViewportWidth--;}while (tileViewportX1 > j) {tileViewportX1--;tileViewportWidth++;for (var d = 0; d < tileViewportHeight; d++) {for (var c = 0; c < b.length; c++) {if (tileLayerManager.CheckLayerUpdatability(c)) {var g = RequestTile(tileViewportX1, tileViewportY1 + d, currentView.zoomLevel, currentView.mapStyle, a[b[c]], b[c], a[b[c]].opacity, a[b[c]].zIndex);a[b[c]].currentTileList.splice(d * tileViewportWidth, 0, g);}}}}while (tileViewportY1 < l) {for (var f = 0; f < tileViewportWidth; f++) {for (var c = 0; c < b.length; c++) {if (tileLayerManager.CheckLayerUpdatability(c)) {var g = a[b[c]].currentTileList.shift();try {g.RemoveFromMap();} catch (n) {}}}}tileViewportY1++;tileViewportHeight--;}while (tileViewportY1 > l) {tileViewportY1--;tileViewportHeight++;for (var f = tileViewportWidth - 1; f >= 0; f--) {for (var c = 0; c < b.length; c++) {if (tileLayerManager.CheckLayerUpdatability(c)) {var g = RequestTile(tileViewportX1 + f, tileViewportY1, currentView.zoomLevel, currentView.mapStyle, a[b[c]], b[c], a[b[c]].opacity, a[b[c]].zIndex);a[b[c]].currentTileList.unshift(g);}}}}while (tileViewportX2 > k) {for (var d = tileViewportHeight - 1; d >= 0; d--) {for (var c = 0; c < b.length; c++) {if (tileLayerManager.CheckLayerUpdatability(c)) {var g = a[b[c]].currentTileList.splice(d * tileViewportWidth + tileViewportWidth - 1, 1)[0];try {g.RemoveFromMap();} catch (n) {}}}}tileViewportX2--;tileViewportWidth--;}while (tileViewportX2 < k) {tileViewportX2++;tileViewportWidth++;for (var d = 0; d < tileViewportHeight; d++) {for (var c = 0; c < b.length; c++) {if (tileLayerManager.CheckLayerUpdatability(c)) {var g = RequestTile(tileViewportX2, tileViewportY1 + d, currentView.zoomLevel, currentView.mapStyle, a[b[c]], b[c], a[b[c]].opacity, a[b[c]].zIndex);a[b[c]].currentTileList.splice(d * tileViewportWidth + tileViewportWidth - 1, 0, g);}}}}while (tileViewportY2 > m) {for (var f = 0; f < tileViewportWidth; f++) {for (var c = 0; c < b.length; c++) {if (tileLayerManager.CheckLayerUpdatability(c)) {var g = a[b[c]].currentTileList.pop();try {g.RemoveFromMap();} catch (n) {}}}}tileViewportY2--;tileViewportHeight--;}while (tileViewportY2 < m) {tileViewportY2++;tileViewportHeight++;for (var f = 0; f < tileViewportWidth; f++) {for (var c = 0; c < b.length; c++) {if (tileLayerManager.CheckLayerUpdatability(c)) {var g = RequestTile(tileViewportX1 + f, tileViewportY2, currentView.zoomLevel, currentView.mapStyle, a[b[c]], b[c], a[b[c]].opacity, a[b[c]].zIndex);a[b[c]].currentTileList.push(g);}}}}};this.StepAnimation = g;this.zoomView = function (f) {if (!e) {return;}var j = originX + offsetX, k = originY + offsetY, m = currentView.zoomLevel, i = f.zoomLevel, g = MathRound(f.center.x - width / 2), h = MathRound(f.center.y - height / 2);a[mapTiles].oldTilesList = a[mapTiles].currentTileList;for (var c = 0; c < b.length; c++) {if (a[b[c]].ID == mapTiles) {a[b[c]].currentTileList = [];} else {ClearTiles(a[b[c]].currentTileList);}}for (var d = 0; d < a[mapTiles].oldTilesList.length; d++) {a[mapTiles].oldTilesList[d].PrepareBaseTile(j, k, m, g, h, i);}for (var c = 0; c < pushpins.length; c++) {pushpins[c].PrepareForZoom(g, h, i);}currentView.Destroy();currentView = f;var l = [];l = a[mapTiles].oldTilesList;this.SetViewPort();this.RefreshTileLayers();a[mapTiles].oldTilesList = l;for (var d = 0; d < a[mapTiles].currentTileList.length; d++) {a[mapTiles].currentTileList[d].PrepareSwapTile(j, k, m, g, h, i);}zoomCounter = 1;this.StepAnimation();};
function g() {if (!zooming) {return;}for (var b = 0; b < a[mapTiles].oldTilesList.length; b++) {a[mapTiles].oldTilesList[b].SetFactor(zoomCounter);}for (var b = 0; b < a[mapTiles].currentTileList.length; b++) {a[mapTiles].currentTileList[b].SetFactor(zoomCounter);}for (var c = 0; c < pushpins.length; c++) {pushpins[c].SetFactor(zoomCounter);}if (zoomCounter < zoomTotalSteps) {zoomCounter++;window.setTimeout(g, 1);} else {zoomCounter = 0;tileLayerManager.FinalizeView();}}
this.ClearTileLayers = function () {for (var c = 0; c < b.length; c++) {ClearTiles(a[b[c]].currentTileList);a[b[c]] = null;delete a[b[c]];b[c] = null;}b.length = 0;};
function f() {if (typeof Msn.VE.API.Globals.vemapinstances == "undefined" || Msn.VE.API.Globals.vemapinstances == null) {return null;}var b = 0;for (var a in Msn.VE.API.Globals.vemapinstances) {if (Msn.VE.API.Globals.vemapinstances[a] instanceof VEMap && Msn.VE.API.Globals.vemapinstances[a].GetMapMode() == VEMapMode.Mode3D) {return Msn.VE.API.Globals.vemapinstances[a].vemapcontrol.Get3DControl();}}return null;}
this.ClearTileLayer = function (c) {if (a[c] != null && a[c] != "undefined") {if (typeof Msn.VE.API != "undefined" && Msn.VE.API != null) {var e = f();if (typeof e != "undefined" && e != null) {e.RemoveImageSource(c, a[c].ID);}}ClearTiles(a[c].currentTileList);a[c] = null;delete a[c];}for (var d = 0; d < b.length; d++) {if (b[d] == c) {b[d] = null;b.splice(d, 1);}}};this.RefreshTileLayers = function () {if (b != null) {for (var c = 0; c < b.length; c++) {this.LoadTileLayer(b[c], a[b[c]].ID, a[b[c]].opacity, a[b[c]].zIndex);}}};this.RefreshTileLayer = function (b) {this.LoadTileLayer(b, a[b].ID, a[b].opacity, a[b].zIndex);};this.SetTileSource = function (a) {var b = new VETileSourceSpecification;b.ID = a.ID;b.SourceName = a.TileSource;b.NumServers = a.NumServers;b.Bounds = a.Bounds;if (typeof a.MinZoomLevel != "undefined" && a.MinZoomLevel != null) {b.MinZoom = a.MinZoomLevel;}if (typeof a.MaxZoomLevel != "undefined" && a.MaxZoomLevel != null) {b.MaxZoom = a.MaxZoomLevel;if (b.MaxZoom > d) {d = b.MaxZoom;}}if (a.GetTilePath != "undefined" && a.GetTilePath != null) {b.GetTilePath = a.GetTilePath;}tileLayerManager.AddTileSource(b);};this.DeleteTileSource = function (e) {if (c[e] != null && c[e] != "undefined") {c[e] = null;delete c[e];}if (b != null) {for (var d = 0; d < b.length; d++) {if (a[b[d]] != null && a[b[d]] != "undefined" && a[b[d]].ID == e) {ClearTiles(a[b[d]].currentTileList);a[b[d]] = null;delete a[b[d]];b[d] = null;b.splice(d, 1);}}}};this.CheckTilesAvailability = function (h, n) {var k = PixelToLatLong(new VEPixel(0, 0)), j = PixelToLatLong(new VEPixel(width, height));if (k == null || j == null) {return;}var b = k.latitude, d = j.longitude, e = j.latitude, f = k.longitude;if (b < e) {var i = b;b = e;e = i;}if (d < f) {var i = d;d = f;f = i;}var l = new Msn.VE.LatLongRectangle(new Msn.VE.LatLong(b, f), new Msn.VE.LatLong(e, d)), o = c[h].Bounds.length;for (var g = 0; g < o; g++) {b = c[h].Bounds[g].TopLeftLatLong.Latitude;d = c[h].Bounds[g].BottomRightLatLong.Longitude;e = c[h].Bounds[g].BottomRightLatLong.Latitude;f = c[h].Bounds[g].TopLeftLatLong.Longitude;if (b < e) {var i = b;b = e;e = i;}if (d < f) {var i = d;d = f;f = i;}var m = new Msn.VE.LatLongRectangle(new Msn.VE.LatLong(b, f), new Msn.VE.LatLong(e, d));if (tileLayerManager.BBOverlap(l, m)) {return true;}}a[n].isActive = false;return false;};this.BBOverlap = function (a, b) {return this.RectInBoundingBox(b, a);};this.RectInBoundingBox = function (a, b) {return !(a.southeast.latitude > b.northwest.latitude || a.southeast.longitude < b.northwest.longitude || a.northwest.latitude < b.southeast.latitude || a.northwest.longitude > b.southeast.longitude);};this.ShowTrafficLegend = function (a) {h = a;Fire("onapitrafficdisplay");};this.HideTrafficLegend = function () {Fire("onapitraffichide");};this.GetTimeStamp = function () {return h;};this.GetMaxTileZoom = function () {return d;};this.SetMarketMaxZoom = function (a) {marketMaxZoom = a;c[mapTiles].MaxZoom = a;};}

function VETileSourceSpecification() {this.ID = "";this.SourceName = "";this.NumServers = 0;this.Bounds = null;this.MinZoom = minZoom;this.MaxZoom = 1;this.IsVisible = true;this.GetTilePath = function (a) {try {if (a != null && a != "undefined") {var e = "", b = 0;for (var c = a.ZoomLevel; c > 0; c--) {b = 0;var d = 1 << c - 1;if ((a.XPos & d) != 0) {b++;}if ((a.YPos & d) != 0) {b += 2;}e += b + "";}var c = b % this.NumServers;return this.SourceName.replace(/%1/g, a.MapStyle).replace(/%2/g, c).replace(/%3/g, a.MapStyle).replace(/%4/g, e).replace(/%5/g, a.MapStyle == roadStyle ? "png" : "jpeg").replace(/%6/g, generations[a.MapStyle]);} else {return "";}} catch (f) {}};}

function VETileLayerSpecification() {this.ID = "";this.ZIndex = 0;this.Opacity = 1;}

function VETileContext() {this.XPos = 0;this.YPos = 0;this.ZoomLevel = 0;this.MapStyle = "";}
this.SetCenter = SetCenter;this.SetCenterAccurate = SetCenterAccurate;this.SetMapStyle = SetMapStyle;this.SetScaleBarDistanceUnit = SetScaleBarDistanceUnit;this.GetCenterLatitude = GetCenterLatitude;this.GetCenterLongitude = GetCenterLongitude;this.GetLatitude = GetLatitude;this.GetLongitude = GetLongitude;this.GetY = GetY;this.GetX = GetX;this.LatLongToPixel = LatLongToPixel;this.LatLongToPixelAsync = LatLongToPixelAsync;this.PixelToLatLong = PixelToLatLong;this.PixelToLatLongAsync = PixelToLatLongAsync;this.GetZoomLevel = GetZoomLevel;this.GetMapStyle = GetMapStyle;this.GetMapMode = GetMapMode;this.GetAltitude = GetAltitude;this.GetDirection = GetDirection;this.GetTilt = GetTilt;this.GetMetersPerPixel = GetMetersPerPixel;this.Resize = Resize;this.PanMap = PanMap;this.ContinuousPan = ContinuousPan;this.StopContinuousPan = StopContinuousPan;this.StopKeyboardPan = StopKeyboardPan;this.PanToLatLong = PanToLatLong;this.GetPushpins = GetPushpins;this.AddPushpin = AddPushpin;this.RemovePushpin = RemovePushpin;this.ClearPushpins = ClearPushpins;this.SetViewport = SetViewport;this.SetBestMapView = SetBestMapView;this.GetBestMapViewBounds = GetBestMapViewBounds;this.IncludePointInViewport = IncludePointInViewport;this.SetZoom = SetZoom;this.SetTilt = SetTilt;this.SetDirection = SetDirection;this.SetAltitude = SetAltitude;this.ZoomIn = ZoomIn;this.ZoomOut = ZoomOut;this.SetCenterAndZoom = SetCenterAndZoom;this.AddLine = AddLine;this.RemoveLine = RemoveLine;this.ClearLines = ClearLines;this.AttachEvent = AttachEvent;this.DetachEvent = DetachEvent;this.AttachCustomEvent = AttachCustomEvent;this.DetachCustomEvent = DetachCustomEvent;this.FireCustomEvent = FireCustomEvent;this.DisposeAllCustomEvent = DisposeAllCustomEvent();this.CreateEvent = CreateEvent;this.Fire = Fire;this.IsObliqueAvailable = IsObliqueAvailable;this.GetObliqueScene = GetObliqueScene;this.SetAnimationEnabled = SetAnimationEnabled;this.IsAnimationEnabled = IsAnimationEnabled;this.SetObliqueScene = SetObliqueScene;this.SetObliqueOrientation = SetObliqueOrientation;this.SetView = SetView;this.Debug = Debug;this.GetResponseRangeCounts = GetResponseRangeCounts;this.ResetResponseRangeCounts = ResetResponseRangeCounts;this.GetFailureRate = GetFailureRate;this.SetTrafficView = SetTrafficView;this.GetTrafficAvailability = GetTrafficAvailability;this.GetMarketsFile = GetMarketsFile;this.GetIncidentsFile = GetIncidentsFile;this.GetSlidingExpirationForAutoRefresh = GetSlidingExpirationForAutoRefresh;this.GetAutoRefreshRate = GetAutoRefreshRate;this.SetCopyrightOffset = SetCopyrightOffset;this.SetFocus = SetFocus;this.GetCurrentMode = GetCurrentMode;this.GetMapWidth = GetMapWidth;this.GetMapHeight = GetMapHeight;this.GetCurrentMapView = GetCurrentMapView;this.SetMapTiles = SetMapTiles;this.SetTileSource = tileLayerManager.SetTileSource;this.SetTileLayerVisibility = tileLayerManager.SetTileLayerVisibility;this.LoadTileLayer = tileLayerManager.LoadTileLayer;this.ClearTileLayer = tileLayerManager.ClearTileLayer;this.ClearTileLayers = tileLayerManager.ClearTileLayers;this.DeleteTileSource = tileLayerManager.DeleteTileSource;this.RefreshTileLayers = tileLayerManager.RefreshTileLayers;this.ShowTrafficLegend = tileLayerManager.ShowTrafficLegend;this.HideTrafficLegend = tileLayerManager.HideTrafficLegend;this.GetTimeStamp = tileLayerManager.GetTimeStamp;this.GetMaxTileZoom = tileLayerManager.GetMaxTileZoom;this.PanView = tileLayerManager.PanView;this.LoadBaseLayer = tileLayerManager.LoadBaseLayer;this.GetCurrentViewMaxZoomLevel = GetCurrentViewMaxZoomLevel;this.SetTilePixelBuffer = SetTilePixelBuffer;this.SetClientToken = SetClientToken;this.SetMapHeight = SetMapHeight;this.EnableMode = EnableMode;this._Enable3DMode = _Enable3DMode;this._Disable3DMode = _Disable3DMode;this.ControlReady = ControlReady;this.Get3DVisibleArea = Get3DVisibleArea;this.Get3DControl = Get3DControl;this.IsModeEnabled = IsModeEnabled;this.Sync3dView = Sync3dView;this.OnBeginCameraUpdate = OnBeginCameraUpdate;this.OnEndCameraUpdate = OnEndCameraUpdate;this.IsCameraFlying = IsCameraFlying;this.Show3DTraffic = Show3DTraffic;this.Remove3DTraffic = Remove3DTraffic;this.IterativeCameraRefinement = IterativeCameraRefinement;this.SetChildDiv = SetChildDiv;this.EnableGeoCommunity = EnableGeoCommunity;this.IsGeoCommunityEnabled = IsGeoCommunityEnabled;this.GetOffsetX = GetOffsetX;this.GetOffsetY = GetOffsetY;this.GetCenterOffset = GetCenterOffset;this.SetCenterOffset = SetCenterOffset;this.UpdatePreferredView = UpdatePreferredView;this.GetGraphic = GetGraphic;this.CreateDashboard = CreateDashboard;this.GetLastViewChangeType = GetLastViewChangeType;this.SetOn3DAnimationInterruptedCallback = SetOn3DAnimationInterruptedCallback;this.GetOn3DAnimationInterruptedCallback = GetOn3DAnimationInterruptedCallback;this.SetShowMapModeSwitch = SetShowMapModeSwitch;this.GetObliqueAvailability = GetObliqueAvailability;this.GetTopPx = GetTopPx;this.GetLeftPx = GetLeftPx;this.CreateMinimap = CreateMinimap;};
Msn.VE.Bounds = function (e, f, a, c, b, d) {this.z1 = e;this.z2 = f;this.x1 = a;this.y1 = c;this.x2 = b;this.y2 = d;};
VEMiniMapSize = function () {};
VEMiniMapSize.Small = "small";
VEMiniMapSize.Large = "large";
VEMiniMapExpandState = function () {};
VEMiniMapExpandState.Collapsed = "collapsed";
VEMiniMapExpandState.Expanded = "expanded";
Msn.VE.Minimap = function (V, X, W) {var A = this, Z = Msn.VE.Css, p = Msn.VE.DashboardStates.MapMode.Flatland, i = Msn.VE.DashboardStates.MapView.Ortho, K = false, w = false, q = false, x = false, g = true, j = null, d = V, b = null, a = X, l = [];l[VEMiniMapSize.Small] = "MSVE_smallMinimap";l[VEMiniMapSize.Large] = "MSVE_normalMinimap";var s = [];s[VEMiniMapSize.Small] = L_MinimapLargerToolTip_Text;s[VEMiniMapSize.Large] = L_MinimapSmallerToolTip_Text;var n = [];n[VEMiniMapSize.Small] = 138.5;n[VEMiniMapSize.Large] = 180.5;var k = document.createElement("div");k.id = "MSVE_minimap_transparency";d.appendChild(k);var e = document.createElement("div");e.id = "MSVE_minimap_content";e.title = L_MinimapDragToolTip_Text;e.className = "MSVE_smallMinimapContent";k.appendChild(e);var o = document.createElement("span");o.id = "MSVE_minimap_glyph";o.title = L_MinimapHideToolTip_Text;var f = document.createElement("div");f.id = "MSVE_minimap_resize";f.attachEvent("onclick", I);f.title = L_MinimapLargerToolTip_Text;pseudoHover(f);var z = document.createElement("div"), y = document.createElement("div"), h = document.createElement("div");h.id = "MSVE_minimap_style_div";e.appendChild(h);var m = document.createElement("div");m.id = "MSVE_minimap_gutter";d.appendChild(m);if (W != false) {m.appendChild(o);}d.appendChild(f);var c = null, v = false;a.AttachEvent("onchangemapstyle", B);
function S() {var f = new Object;f.latitude = a.GetCenterLatitude();f.longitude = a.GetCenterLongitude();var g = a.GetZoomLevel() - 4;if (g < 1) {g = 1;}if (f.latitude == null || f.longitude == null) {f.latitude = 0;f.longitude = 0;g = 1;}f.zoomlevel = g;f.mapstyle = Msn.VE.MapStyle.Road;f.showScaleBar = false;f.showDashboard = false;f.showMinimap = false;f.hideCopyright = true;f.disableLogo = true;b = new Msn.VE.MapControl(e, f);b.Init();b.SetMinimapMode();H();E(z, "MSVE_minimap_r_style_button", "MSVE_minimap_style", L_MinimapRoad_Text, L_MinimapRoadToolTip_Text, G, $MVEM.IsEnabled(MapControl.Features.MapStyle.Road));E(y, "MSVE_minimap_h_style_button", "MSVE_minimap_style", L_MinimapHybrid_Text, L_MinimapHybridToolTip_Text, D, $MVEM.IsEnabled(MapControl.Features.MapStyle.Hybrid));b.AttachEvent("onendpan", O);b.AttachEvent("onclick", t);a.AttachEvent("onendpan", N);a.AttachEvent("onobliquechange", J);a.AttachEvent("onendzoom", L);a.AttachEvent("onchangeview", F);var i = a.IsModeEnabled(Msn.VE.MapActionMode.Mode3D) ? Msn.VE.DashboardStates.MapMode.View3D : Msn.VE.DashboardStates.MapMode.Flatland, h = Msn.VE.DashboardStates.MapView.Ortho;if (a.GetMapStyle() == Msn.VE.MapStyle.Oblique) {b.SetZoom(14);h = Msn.VE.DashboardStates.MapView.Oblique;}c = new Msn.VE.CameraRotator(d, this, e);v = true;Q(i);R(h);}
this.Init = S;this.Destroy = function () {C(z, G);C(y, D);z = y = null;if (c) {c.Destroy();c = null;}a.DetachEvent("onendpan", N);a.DetachEvent("onobliquechange", J);a.DetachEvent("onendzoom", L);a.DetachEvent("onchangeview", F);if (b) {b.DetachEvent("onendpan", O);b.DetachEvent("onclick", t);b.Destroy();b = null;}f.detachEvent("onclick", I);h = null;k = null;e = null;o = null;m = null;f = null;A = null;};this.IsInitialized = function () {return v;};
function Q(a) {p = a;}
this.SetMapMode = Q;
function R(a) {i = a;if (!K && typeof minimapRoller != "undefined" && minimapRoller != null && p == Msn.VE.DashboardStates.MapMode.Flatland) {if (i == Msn.VE.DashboardStates.MapView.Oblique) {if (!minimapRoller.isExpanded()) {minimapRoller.rollOut(Msn.VE.Animation.RollDirection.LeftRight);}} else if (i == Msn.VE.DashboardStates.MapView.Ortho) {if (minimapRoller.isExpanded()) {minimapRoller.rollIn(Msn.VE.Animation.RollDirection.RightLeft);}}}P();}
this.SetMapView = R;this.ChangeOrientation = function (b) {if (p == Msn.VE.DashboardStates.MapMode.Flatland) {if (i == Msn.VE.DashboardStates.MapView.Oblique) {switch (b) {case 0:case 360:a.SetObliqueOrientation("East");break;case 270:a.SetObliqueOrientation("South");break;case 90:a.SetObliqueOrientation("North");break;case 180:a.SetObliqueOrientation("West");break;default:;}}}};this.SetKeepRollState = function () {K = true;};
function P() {if (p == Msn.VE.DashboardStates.MapMode.Flatland) {if (i == Msn.VE.DashboardStates.MapView.Oblique) {var b = a.GetObliqueScene();if (!b) {return;}var d = b.GetOrientation();c.SetStyle("oblique");switch (d) {case "North":c.SetOrientation(90);break;case "South":c.SetOrientation(270);break;case "East":c.SetOrientation(0);break;case "West":c.SetOrientation(180);break;default:;}c.Show();} else if (i == Msn.VE.DashboardStates.MapView.Ortho) {c.SetStyle("ortho");c.Show();} else {c.Hide();}} else {c.Hide();}}

function U() {q = true;a.PanToLatLong(b.GetCenterLatitude(), b.GetCenterLongitude());}

function u() {var c = a.GetCenterLatitude(), d = a.GetCenterLongitude();w = true;b.PanToLatLong(c, d);}
this.Hide = function () {d.style.display = "none";};this.Show = function () {d.style.display = "block";};this.SetPosition = function (a, b) {d.style.left = a + "px";d.style.top = b + "px";};this.SetSize = function (a) {var g = this.GetSize();if (a != g) {var c = d.className.split(" ");if (c.length > 1) {d.className = c[0] + " " + l[a];e.className = c[0] + " " + l[a] + "Content";}f.title = s[a];if (c[0] == VEMiniMapExpandState.Expanded) {x = true;b.Resize(n[a], n[a]);}}};this.GetSize = function () {return d.className.indexOf("MSVE_normalMinimap") > -1 ? VEMiniMapSize.Large : VEMiniMapSize.Small;};this.SetDoUpdates = function (a) {g = a;if (g) {M();}};this.GetContainer = function () {return d;};
function B() {if (a.GetMapStyle() == Msn.VE.MapStyle.Oblique) {if (!v) {S();}a.DetachEvent("onchangemapstyle", B);}}

function O() {if (x) {x = false;return;}if (!w) {U();} else {w = false;}}

function I() {var a = A.GetSize() == VEMiniMapSize.Small ? VEMiniMapSize.Large : VEMiniMapSize.Small;A.SetSize(a);}

function N() {if (!g) {return;}if (!q) {j = r();u();} else {q = false;}}

function F() {if (!g) {return;}var c = r();if (a.GetMapStyle() != Msn.VE.MapStyle.Oblique && !c.Equals(j)) {b.SetView(c);j = null;}}

function J() {if (!g) {return;}u();P();}

function L() {if (!g) {return;}j = r();M();}

function r() {var d = b.GetCurrentMapView().MakeCopy(), e = a.GetCurrentMapView();d.SetCenterLatLong(new Msn.VE.LatLong(e.latlong.latitude, e.latlong.longitude));var c = 1;if (e.style == Msn.VE.MapStyle.Oblique) {c = 14;} else {c = e.GetZoomLevel() - 4;}if (c < 1) {c = 1;}d.SetZoomLevel(c);d.Resolve(b.GetCurrentMode(), b.GetMapWidth(), b.GetMapHeight());return d;}

function M() {var c = 0;if (a.GetMapStyle() == Msn.VE.MapStyle.Oblique) {c = 14;} else {c = a.GetZoomLevel() - 4;}if (c < 1) {c = 1;}if (b.GetZoomLevel() == c) {u();return;}b.SetCenterAndZoom(a.GetCenterLatitude(), a.GetCenterLongitude(), c);}

function E(a, g, d, f, e, c, b) {a.innerText = f;a.id = g;a.title = e;if (typeof b == "undefined" || b == true) {a.className = d;a.attachEvent("onclick", c);a.attachEvent("onmousedown", IgnoreEvent);}pseudoHover(a);h.appendChild(a);}

function C(a, b) {a.detachEvent("onclick", b);a.detachEvent("onmousedown", IgnoreEvent);}

function t() {e.title = "";b.DetachEvent("onclick", t);}

function G() {H();}

function D() {T();}

function T() {h.className = "MSVE_minimap_hybrid_style";b.SetMapStyle("h");}

function H() {h.className = "MSVE_minimap_road_style";b.SetMapStyle("r");}
Msn.VE.CameraRotator = function (g, j, d) {var n = Msn.VE.Css, m = j, g = g, d = d, e = 0, c = "ortho", a = document.createElement("div");a.id = "MSVE_cameraPosition";d.appendChild(a);b(90);
function i() {a = null;}

function k() {a.style.display = "none";}

function l() {a.style.display = "block";}

function f(a) {b(a);}

function h(a) {switch (a) {case "oblique":c = "MSVE_direction";b(90);break;case "ortho":c = "MSVE_ortho";b(90);break;default:c = "MSVE_ortho";b(90);break;}}

function b(b) {e = MathFloor((b + 45 + 720) / 90) % 4;a.className = c + e;}
this.Hide = k;this.Show = l;this.Destroy = i;this.SetStyle = h;this.SetOrientation = f;};};
Msn.VE.DashboardSize = new (function () {this.Normal = "normal";this.Small = "small";this.Tiny = "tiny";});
Msn.VE.DashboardStates = new (function () {this.MapMode = new (function () {this.Flatland = 1;this.View3D = 2;});this.MapView = new (function () {this.Ortho = 4;this.Oblique = 8;this.StreetSide = 16;});this.MapStyle = new (function () {this.Road = 32;this.Shaded = 64;this.Aerial = 128;this.Hybrid = 256;});});
Msn.VE.NavAction = function (f, a, j, qb) {f.className = "MSVE_Dashboard";var c = null, v = false;if (j == Msn.VE.DashboardSize.Normal) {f.className += " MSVE_Dashboard_Normal";} else if (j == Msn.VE.DashboardSize.Small) {f.className += " MSVE_Dashboard_Small";} else if (j == Msn.VE.DashboardSize.Tiny) {f.className += " MSVE_Dashboard_Tiny";}var n = document.createElement("div");n.className = "MSVE_header";n.id = "MSVE_navAction_header";var gb = null, m = null, R = null, J = null, Mb = null, s = null, h = null, hb = null, u = document.createElement("div");u.id = "MSVE_dashboardContainer";var K = document.createElement("div");K.id = "MSVE_mapViewRow";u.appendChild(K);var C = document.createElement("div");C.id = "MSVE_zoomDiv";var B = document.createElement("div");B.id = "MSVE_navAction_mapViewCell";B.className = "MSVE_dashboardMapModeContainer";var Q = document.createElement("div");Q.id = "MSVE_navAction_mapViewCellInner";B.appendChild(Q);K.appendChild(C);K.appendChild(B);var A = document.createElement("div");A.id = "MSVE_mapStyleRow";u.appendChild(A);var r = document.createElement("div");r.id = "MSVE_navAction_mapStyleCell";var S = document.createElement("div");S.id = "MSVE_compassDiv";var q = null;A.appendChild(S);A.appendChild(r);var y = document.createElement("div"), t = document.createElement("div"), x = document.createElement("div"), G = document.createElement("div"), E = document.createElement("div"), F = document.createElement("div"), d = Msn.VE.DashboardStates.MapMode.Flatland, b = Msn.VE.DashboardStates.MapView.Ortho, e = Msn.VE.DashboardStates.MapStyle.Road, i = document.createElement("div");i.id = "MSVE_obliqueNotification";var l = document.createElement("div");l.id = "MSVE_threeDNotification";var T = false, z = document.createElement("div");z.id = "MSVE_lowerContainer";z.appendChild(u);f.className += " expanded";f.appendChild(n);f.appendChild(z);var D = false;this.Init = function () {if (j == Msn.VE.DashboardSize.Normal) {Kb(qb);if ($MVEM.IsEnabled(MapControl.Features.MapStyle.BirdsEye)) {z.appendChild(i);yb();}db(y, "MSVE_navAction_OrthoMapView", "MSVE_OrthoMapView", o, L_NavActionOrthoToolTip_Text, true);v = $MVEM.IsEnabled(MapControl.Features.MapStyle.BirdsEye) && (a.IsObliqueAvailable() || a.GetMapStyle() == "o");db(t, "MSVE_navAction_ObliqueMapView", "MSVE_ObliqueMapView", w, L_NavActionObliqueToolTip_Text, v);db(x, "MSVE_navAction_StreetSideMapView", "MSVE_StreetSideMapView", L, L_NavActionStreetSideToolTip_Text, false);s = new Jb(C);s.Init();this.HideToggleGlyph();a.AttachEvent("oninitmode", fb);a.AttachEvent("onendzoom", wb);a.AttachEvent("onchangemapstyle", rb);a.AttachEvent("onobliquechange", sb);if ($MVEM.IsEnabled(MapControl.Features.MapStyle.BirdsEye)) {a.AttachEvent("onobliqueenter", ub);a.AttachEvent("onobliqueleave", vb);a.AttachEvent("onendmapstyleoblique", Eb);}}if (j == Msn.VE.DashboardSize.Normal || j == Msn.VE.DashboardSize.Small) {Y(G, "MSVE_navAction_RoadMapStyle", L_NavActionRoad_Text, p, $MVEM.IsEnabled(MapControl.Features.MapStyle.Road));Y(E, "MSVE_navAction_AerialMapStyle", L_NavActionAerial_Text, W, $MVEM.IsEnabled(MapControl.Features.MapStyle.Aerial));Y(F, "MSVE_navAction_HybridMapStyle", L_NavActionHybrid_Text, X, $MVEM.IsEnabled(MapControl.Features.MapStyle.Hybrid));}if (j == Msn.VE.DashboardSize.Small || j == Msn.VE.DashboardSize.Tiny) {hb = new Lb(C);hb.Init();}switch (a.GetMapStyle()) {case "r":b = Msn.VE.DashboardStates.MapView.Ortho;k();e = Msn.VE.DashboardStates.MapStyle.Road;P();break;case "s":b = Msn.VE.DashboardStates.MapView.Ortho;k();e = Msn.VE.DashboardStates.MapStyle.Shaded;P();break;case "a":b = Msn.VE.DashboardStates.MapView.Ortho;k();e = Msn.VE.DashboardStates.MapStyle.Aerial;bb();break;case "h":b = Msn.VE.DashboardStates.MapView.Ortho;k();e = Msn.VE.DashboardStates.MapStyle.Hybrid;cb();break;case "o":b = Msn.VE.DashboardStates.MapView.Oblique;N();break;default:;}if (a.IsModeEnabled(Msn.VE.MapActionMode.Mode3D)) {ab();} else {U();}};this.Destroy = function () {if (j == Msn.VE.DashboardSize.Normal) {if (q != null) {q.Destroy();}G = E = F = r = A = q = null;if (s) {s.Destroy();s = null;}if (h) {h.Destroy();h = null;}pb();if ($MVEM.IsEnabled(MapControl.Features.MapStyle.BirdsEye)) {}if (a) {a.DetachEvent("oninitmode", fb);a.DetachEvent("onendzoom", wb);a.DetachEvent("onchangemapstyle", rb);a.DetachEvent("onobliquechange", sb);if ($MVEM.IsEnabled(MapControl.Features.MapStyle.BirdsEye)) {a.DetachEvent("onobliqueenter", ub);a.DetachEvent("onobliqueleave", vb);i.detachEvent("onclick", w);}if ($MVEM.IsEnabled(MapControl.Features.MapStyle.View3D) && qb != false) {l.detachEvent("onclick", M);}a = null;}}if (j == Msn.VE.DashboardSize.Normal || j == Msn.VE.DashboardSize.Small) {eb(y, o);eb(t, w);eb(x, L);}if (j == Msn.VE.DashboardSize.Small || j == Msn.VE.DashboardSize.Tiny) {hb.Destroy();}G = E = F = r = A = q = null;y = t = x = B = K = null;n = m = gb = z = null;l = null;i = C = S = null;};this.OnView3DModeUpdateUI = ab;this.OnFlatlandModeUpdateUI = U;this.OnModeUpdateUI = fb;
function mb(a, f, e, c, d, b) {a.innerText = e;a.id = f;a.title = d;if (typeof b == "undefined" || b == true) {a.className = "MSVE_MapMode";a.attachEvent("onclick", c);} else {a.className = "MSVE_MapMode_disabled";}pseudoHover(a);n.appendChild(a);}

function db(a, f, b, d, e, c) {a.id = f;if (typeof c == "undefined" || c == true) {a.className = b;a.attachEvent("onclick", d);a.title = e;} else {a.className = b + "_disabled";}pseudoHover(a);Q.appendChild(a);}

function Y(a, e, d, c, b) {a.innerText = d;a.id = e;if (b == undefined || b == true) {a.className = "MSVE_MapStyle";a.attachEvent("onclick", c);} else {a.className = "MSVE_MapStyle_disabled";}pseudoHover(a);r.appendChild(a);}

function M() {l.style.display = "none";a.EnableMode(Msn.VE.MapActionMode.Mode3D);}

function fb(a) {if (a == Msn.VE.MapActionMode.Mode3D) {ab();} else {U();}}

function ab() {if (d == Msn.VE.DashboardStates.MapMode.View3D) {return;}d = Msn.VE.DashboardStates.MapMode.View3D;f.className = f.className.replace(/\s*MSVE_FlatlandMapMode/g, "");f.className += " MSVE_View3DMapMode";zb();Z();ob();kb();lb();c = a.GetMinimap();if (c && c.IsInitialized()) {c.SetMapMode(d);c.SetDoUpdates(false);c.Hide();}y.title = L_NavAction3DOrthoToolTip_Text;t.title = L_NavAction3DObliqueToolTip_Text;x.title = L_NavAction3DStreetSideToolTip_Text;mvcViewFacade.UpdateShimIfSupported($ID(f.id));}

function jb() {a.EnableMode(Msn.VE.MapActionMode.Mode2D);}

function U() {d = Msn.VE.DashboardStates.MapMode.Flatland;f.className = f.className.replace(/\s*MSVE_View3DMapMode/g, "");f.className = f.className.replace(/\s*MSVE_FlatlandMapMode/g, "");f.className += " MSVE_FlatlandMapMode";y.title = L_NavActionOrthoToolTip_Text;t.title = L_NavActionObliqueToolTip_Text;if ($MVEM.IsEnabled(MapControl.Features.MapStyle.Road)) {ob();} else {Fb();}if ($MVEM.IsEnabled(MapControl.Features.MapStyle.Aerial)) {kb();} else {Bb();}if ($MVEM.IsEnabled(MapControl.Features.MapStyle.Hybrid)) {lb();} else {Cb();}if ($MVEM.IsEnabled(MapControl.Features.MapStyle.BirdsEye)) {a.GetObliqueAvailability("OnFlatlandModeUpdateUIObliqueReturned", xb);return;} else {V();b = Msn.VE.DashboardStates.MapView.Ortho;k();}c = a.GetMinimap();if (c && c.IsInitialized() && f.className.indexOf("expanded") != -1) {c.SetMapMode(d);c.SetMapView(b);c.Show();if (c.GetContainer().className.indexOf("expanded") != -1) {c.SetDoUpdates(true);}}switch (b) {case Msn.VE.DashboardStates.MapView.Oblique:if (a.IsObliqueAvailable() && $MVEM.IsEnabled(MapControl.Features.MapStyle.BirdsEye)) {g(d + b);} else {o();}break;case Msn.VE.DashboardStates.MapView.StreetSide:o();break;case Msn.VE.DashboardStates.MapView.Ortho:switch (e) {case Msn.VE.DashboardStates.MapStyle.Aerial:if ($MVEM.IsEnabled(MapControl.Features.MapStyle.Aerial)) {g(d + b + e);} else {p();}break;case Msn.VE.DashboardStates.MapStyle.Hybrid:if ($MVEM.IsEnabled(MapControl.Features.MapStyle.Hybrid)) {g(d + b + e);} else {p();}break;default:g(d + b + e);break;}break;default:o();break;}}

function xb(i) {if (i) {Z();if (h != null) {h.UpdateFromMap();}} else {V();b = Msn.VE.DashboardStates.MapView.Ortho;k();}c = a.GetMinimap();if (c && c.IsInitialized() && f.className.indexOf("expanded") != -1) {c.SetMapMode(d);c.SetMapView(b);c.Show();if (c.GetContainer().className.indexOf("expanded") != -1) {c.SetDoUpdates(true);}}switch (b) {case Msn.VE.DashboardStates.MapView.Oblique:if (i && $MVEM.IsEnabled(MapControl.Features.MapStyle.BirdsEye)) {g(d + b);} else {o();}break;case Msn.VE.DashboardStates.MapView.StreetSide:o();break;case Msn.VE.DashboardStates.MapView.Ortho:switch (e) {case Msn.VE.DashboardStates.MapStyle.Aerial:if ($MVEM.IsEnabled(MapControl.Features.MapStyle.Aerial)) {g(d + b + e);} else {p();}break;case Msn.VE.DashboardStates.MapStyle.Hybrid:if ($MVEM.IsEnabled(MapControl.Features.MapStyle.Hybrid)) {g(d + b + e);} else {p();}break;default:g(d + b + e);break;}break;default:o();break;}}

function o() {if (b == Msn.VE.DashboardStates.MapView.Ortho && d == Msn.VE.DashboardStates.MapMode.Flatland) {return;}b = Msn.VE.DashboardStates.MapView.Ortho;c = a.GetMinimap();if (c && c.IsInitialized()) {c.SetMapView(b);}if (d == Msn.VE.DashboardStates.MapMode.Flatland) {switch (e) {case Msn.VE.DashboardStates.MapStyle.Aerial:if ($MVEM.IsEnabled(MapControl.Features.MapStyle.Aerial)) {g(d + b + e);} else {p();}break;case Msn.VE.DashboardStates.MapStyle.Hybrid:if ($MVEM.IsEnabled(MapControl.Features.MapStyle.Hybrid)) {g(d + b + e);} else {p();}break;default:g(d + b + e);break;}} else {g(d + b);}k();}

function L() {if (b == Msn.VE.DashboardStates.MapView.StreetSide && d == Msn.VE.DashboardStates.MapMode.Flatland) {return;}b = Msn.VE.DashboardStates.MapView.StreetSide;g(d + b);Ab();}

function w() {if (b == Msn.VE.DashboardStates.MapView.Oblique && d == Msn.VE.DashboardStates.MapMode.Flatland) {return;}b = Msn.VE.DashboardStates.MapView.Oblique;c = a.GetMinimap();if (c && c.IsInitialized()) {c.SetMapView(b);}g(d + b);N();}

function p() {if (e == Msn.VE.DashboardStates.MapStyle.Road) {return;}e = Msn.VE.DashboardStates.MapStyle.Road;g(d + b + e);P();}

function W() {if (e == Msn.VE.DashboardStates.MapStyle.Aerial) {return;}e = Msn.VE.DashboardStates.MapStyle.Aerial;g(d + b + e);bb();}

function X() {if (e == Msn.VE.DashboardStates.MapStyle.Hybrid) {return;}e = Msn.VE.DashboardStates.MapStyle.Hybrid;g(d + b + e);cb();}

function g(b) {var c = false;if (b & Msn.VE.DashboardStates.MapStyle.Road) {a.SetMapStyle("r");c = true;} else if (b & Msn.VE.DashboardStates.MapStyle.Aerial) {a.SetMapStyle("a");c = true;} else if (b & Msn.VE.DashboardStates.MapStyle.Hybrid) {a.SetMapStyle("h");c = true;}if (b & Msn.VE.DashboardStates.MapMode.Flatland) {if (b & Msn.VE.DashboardStates.MapView.Oblique && a.GetMapStyle() != Msn.VE.MapStyle.Oblique) {a.SetMapStyle("o");}} else if (b & Msn.VE.DashboardStates.MapMode.View3D && !c) {if (b & Msn.VE.DashboardStates.MapView.Ortho) {a.SetTilt(-90);} else if (b & Msn.VE.DashboardStates.MapView.Oblique) {a.SetTilt(-45);} else if (b & Msn.VE.DashboardStates.MapView.StreetSide) {a.SetTilt(-25);}}}

function k() {u.className = "MSVE_OrthoView";}

function N() {if (q == null) {q = new Hb(S);}if (h == null) {h = new Ib(C);h.Init();h.UpdateFromMap();}u.className = "MSVE_ObliqueView";i.style.display = "none";}

function Ab() {u.className = "MSVE_StreetSideView";}

function P() {r.className = "MSVE_RoadMapStyle";}

function bb() {r.className = "MSVE_AerialMapStyle";}

function cb() {r.className = "MSVE_HybridMapStyle";}

function yb() {i.innerHTML += "<div id=\"MSVE_obliqueNotifyIcon\">&nbsp;</div> <div id=\"MSVE_obliqueNotifyText\">" + L_DashboardBirdsEyeText_Text + "</div>";i.attachEvent("onclick", w);i.style.display = "none";}

function Db() {if (!a.IsModeEnabled(Msn.VE.MapActionMode.Mode3D) && a.GetMapStyle() != "o") {z.appendChild(l);l.style.top = - (n.offsetHeight / 2 + 6) + "px";l.innerHTML += "<div id=\"MSVE_threeDNotifyIcon\">&nbsp;</div> <div id=\"MSVE_threeDNotifyText\">" + L_Dashboard3DText_Text + "</div>";l.attachEvent("onclick", M);window.setTimeout(Gb, 6000);T = true;} else {l.style.display = "none";}}

function Gb() {l.style.display = "none";T = false;if (a != null && !a.IsModeEnabled(Msn.VE.MapActionMode.Mode3D)) {if (a.IsObliqueAvailable() && $MVEM.IsEnabled(MapControl.Features.MapStyle.BirdsEye)) {ib();}}}

function Kb(a) {nb(a);if ($MVEM.IsEnabled(MapControl.Features.MapStyle.View3D) && a != false) {Db(J);}gb = new Msn.VE.UI.IEGlyph(null, "MSVE_toggleGlyph");m = gb.getElement();m.title = L_NavActionHideToolTip_Text;n.appendChild(m);}

function nb(a) {if ($MVEM.IsEnabled(MapControl.Features.MapStyle.View3D) && a != false) {R = document.createElement("div");J = document.createElement("div");mb(R, "MSVE_navAction_FlatlandMapMode", L_NavActionFlatland_Text, jb, L_NavActionFlatlandToolTip_Text);mb(J, "MSVE_navAction_View3DMapMode", L_NavActionView3D_Text, M, L_NavActionView3DToolTip_Text);n.className = "MSVE_header MSVE_with3D";D = true;} else {n.className = "MSVE_header MSVE_no3D";D = false;}}

function pb() {if (D) {tb(R, jb);tb(J, M);R = J = null;D = false;} else {Mb = null;}}

function tb(a, c, b) {if (a == null) {return;}if (b == undefined || b == true) {a.detachEvent("onclick", c);}}

function eb(b, a) {b.detachEvent("onclick", a);}

function Z() {if (!v) {I(t, w, "MSVE_ObliqueMapView", L_NavActionObliqueToolTip_Text);v = true;}}

function V() {if (v) {H(t, w, "MSVE_ObliqueMapView_disabled");v = false;}}

function zb() {I(x, L, "MSVE_StreetSideMapView");}

function ob() {I(G, p, "MSVE_MapStyle");}

function Fb() {H(G, p, "MSVE_MapStyle_disabled");}

function kb() {I(E, W, "MSVE_MapStyle");}

function Bb() {H(E, W, "MSVE_MapStyle_disabled");}

function lb() {I(F, X, "MSVE_MapStyle");}

function Cb() {H(F, X, "MSVE_MapStyle_disabled");}

function wb() {s.UpdateFromMap();if (h) {h.UpdateFromMap();}}

function ub() {if (a.GetMapStyle() == "o") {b = Msn.VE.DashboardStates.MapView.Oblique;}Z();ib();}

function ib() {if (!T) {if (b != Msn.VE.DashboardStates.MapView.Oblique) {i.style.top = (B.offsetHeight - Q.offsetHeight) / 2 + y.offsetHeight + 6 + "px";i.style.marginLeft = "4px";i.style.display = "block";window.setTimeout(function () {i.style.display = "none";}, 6000);}}}

function vb() {b = Msn.VE.DashboardStates.MapView.Ortho;k();V();i.style.display = "none";}

function Eb() {b = Msn.VE.DashboardStates.MapView.Ortho;k();c = a.GetMinimap();if (c != null && c.IsInitialized()) {c.SetMapView(b);}}

function rb(c) {switch (c.view.mapStyle) {case "r":if (d == Msn.VE.DashboardStates.MapMode.Flatland && a.IsModeEnabled(Msn.VE.MapActionMode.Mode2D) && b != Msn.VE.DashboardStates.MapView.Ortho) {b = Msn.VE.DashboardStates.MapView.Ortho;k();}e = Msn.VE.DashboardStates.MapStyle.Road;P();break;case "a":if (d == Msn.VE.DashboardStates.MapMode.Flatland && a.IsModeEnabled(Msn.VE.MapActionMode.Mode2D) && b != Msn.VE.DashboardStates.MapView.Ortho) {b = Msn.VE.DashboardStates.MapView.Ortho;k();}e = Msn.VE.DashboardStates.MapStyle.Aerial;bb();break;case "h":if (d == Msn.VE.DashboardStates.MapMode.Flatland && a.IsModeEnabled(Msn.VE.MapActionMode.Mode2D) && b != Msn.VE.DashboardStates.MapView.Ortho) {b = Msn.VE.DashboardStates.MapView.Ortho;k();}e = Msn.VE.DashboardStates.MapStyle.Hybrid;cb();break;case "o":b = Msn.VE.DashboardStates.MapView.Oblique;N();break;default:;}}

function sb() {if ($MVEM.IsEnabled(MapControl.Features.MapStyle.BirdsEye)) {if (b != Msn.VE.DashboardStates.MapView.Oblique) {b = Msn.VE.DashboardStates.MapView.Oblique;N();}} else {b = Msn.VE.DashboardStates.MapView.Oblique;o();}i.style.display = "none";if (q != null) {q.UpdateFromMap();}}

function H(a, b, c) {a.className = c;if (typeof a.title != "undefined") {a.title = "";}a.detachEvent("onclick", b);}

function I(a, c, d, b) {a.className = d;if (typeof b != "undefined" && b != null) {a.title = b;}a.attachEvent("onclick", c);}
this.SetX = function (a) {f.style.left = a + "px";};this.GetElement = function () {return f;};this.GetHeader = function () {return n;};this.GetY = function () {return GetTopPosition(f);};this.GetHeight = function () {return f.offsetHeight;};this.ShowToggleGlyph = function () {if (m != null && m != "undefined") {m.style.display = "block";}};this.HideToggleGlyph = function () {if (m != null && m != "undefined") {m.style.display = "none";}};this.SetShowMapModeSwitch = function (a) {if (a != D) {if (!a) {pb();}nb(a);}};
function Jb(t) {var c = document.createElement("div"), f = document.createElement("div"), e = document.createElement("div"), b = document.createElement("div"), d = document.createElement("div"), x = 0, u = 0, j = false;this.Init = function () {d.className = "MSVE_ZoomBar_minus";d.id = "MSVE_navAction_orthoZoomBar_minus";d.title = L_ZoomBarMinusToolTip_Text;d.unselectable = "on";d.attachEvent("onclick", l);pseudoHover(d);b.className = "MSVE_ZoomBar_slider";b.id = "MSVE_navAction_orthoZoomBar_slider";b.title = L_ZoomBarSliderToolTip_Text;b.unselectable = "on";b.attachEvent("onmousedown", o);b.attachEvent("onmousemove", p);b.attachEvent("onmouseup", q);b.attachEvent("onclick", IgnoreEvent);pseudoHover(b);e.className = "MSVE_OrthoZoomBar_bar";e.unselectable = "on";e.appendChild(b);e.attachEvent("onclick", r);f.className = "MSVE_ZoomBar_plus";f.id = "MSVE_navAction_orthoZoomBar_plus";f.title = L_ZoomBarPlusToolTip_Text;f.unselectable = "on";f.attachEvent("onclick", m);pseudoHover(f);c.className = "MSVE_ZoomBar";c.id = "MSVE_OrthoZoomBar";c.appendChild(d);c.appendChild(e);c.appendChild(f);c.attachEvent("onmousedown", IgnoreEvent);c.attachEvent("onmouseup", IgnoreEvent);c.attachEvent("onclick", IgnoreEvent);c.attachEvent("ondblclick", IgnoreEvent);t.appendChild(c);i();};this.Destroy = function () {d.detachEvent("onclick", l);b.detachEvent("onmousedown", o);b.detachEvent("onmousemove", p);b.detachEvent("onmouseup", q);b.detachEvent("onclick", IgnoreEvent);e.detachEvent("onclick", r);f.detachEvent("onclick", m);c.detachEvent("onmousedown", IgnoreEvent);c.detachEvent("onmousedown", IgnoreEvent);c.detachEvent("onclick", IgnoreEvent);c.detachEvent("ondblclick", IgnoreEvent);a.DetachEvent("onendzoom", i);d = b = e = f = c = t = null;};
function w() {c.style.display = "block";}

function v() {c.style.display = "none";}

function k() {x = GetLeftPosition(c);u = GetTopPosition(c);}

function o(a) {a = GetEvent(a);CancelEvent(a);k();if (b.setCapture) {b.setCapture();}j = true;return false;}

function p(a) {a = GetEvent(a);CancelEvent(a);if (j) {b.style.top = g(GetMouseY(a)) + "px";}return false;}

function q(a) {a = GetEvent(a);CancelEvent(a);if (b.releaseCapture) {b.releaseCapture();}j = false;n(g(GetMouseY(a)));s.UpdateFromMap();if (h) {h.UpdateFromMap();}return false;}

function m() {a.ZoomIn();}

function l() {a.ZoomOut();}

function r(a) {a = GetEvent(a);CancelEvent(a);k();n(g(GetMouseY(a)));return false;}

function g(a) {a -= u + d.offsetHeight + b.offsetHeight;var c = e.offsetHeight - b.offsetHeight;if (a < 0) {a = 0;} else if (a > c) {a = c;}return a;}

function n(f) {var c = e.offsetHeight - b.offsetHeight, d = 1 + MathRound((c - f) / c * 18);a.SetZoom(d);}

function i() {var c = e.offsetHeight - b.offsetHeight, d = c - (a.GetZoomLevel() - 1) / 18 * c;b.style.top = d + "px";}
this.UpdateFromMap = i;this.Show = w;this.Hide = v;}

function Ib(t) {var c = document.createElement("div"), f = document.createElement("div"), e = document.createElement("div"), b = document.createElement("div"), d = document.createElement("div"), y = 0, u = 0, i = false;this.Init = function () {d.className = "MSVE_ZoomBar_minus";d.id = "MSVE_navAction_obliqueZoomBar_minus";d.unselectable = "on";d.title = L_ZoomBarMinusToolTip_Text;d.attachEvent("onclick", l);pseudoHover(d);b.className = "MSVE_ZoomBar_slider";b.id = "MSVE_navAction_obliqueZoomBar_slider";b.unselectable = "on";b.attachEvent("onmousedown", o);b.attachEvent("onmousemove", p);b.attachEvent("onmouseup", q);b.attachEvent("onclick", IgnoreEvent);pseudoHover(b);e.className = "MSVE_ObliqueZoomBar_bar";e.unselectable = "on";e.appendChild(b);e.attachEvent("onclick", r);f.className = "MSVE_ZoomBar_plus";f.id = "MSVE_navAction_obliqueZoomBar_plus";f.title = L_ZoomBarPlusToolTip_Text;f.unselectable = "on";f.attachEvent("onclick", m);pseudoHover(f);c.className = "MSVE_ZoomBar";c.id = "MSVE_ObliqueZoomBar";c.appendChild(d);c.appendChild(e);c.appendChild(f);c.attachEvent("onmousedown", IgnoreEvent);c.attachEvent("onmouseup", IgnoreEvent);c.attachEvent("onclick", IgnoreEvent);c.attachEvent("ondblclick", IgnoreEvent);t.appendChild(c);k();};
function x() {c.style.display = "block";}

function w() {c.style.display = "none";}

function r(a) {a = GetEvent(a);CancelEvent(a);j();n(g(GetMouseY(a)));return false;}

function g(a) {a -= u + d.offsetHeight + b.offsetHeight;var c = e.offsetHeight - b.offsetHeight;if (a < 0) {a = 0;} else if (a > c) {a = c;}return a;}

function l() {a.ZoomOut();}

function m() {a.ZoomIn();}

function v() {d.detachEvent("onclick", l);b.detachEvent("onmousedown", o);b.detachEvent("onmousemove", p);b.detachEvent("onmouseup", q);b.detachEvent("onclick", IgnoreEvent);e.detachEvent("onclick", r);f.detachEvent("onclick", m);c.detachEvent("onmousedown", IgnoreEvent);c.detachEvent("onmousedown", IgnoreEvent);c.detachEvent("onclick", IgnoreEvent);c.detachEvent("ondblclick", IgnoreEvent);d = b = e = f = c = t = null;}

function o(a) {a = GetEvent(a);CancelEvent(a);j();if (b.setCapture) {b.setCapture();}i = true;return false;}

function p(a) {a = GetEvent(a);CancelEvent(a);if (i) {b.style.top = g(GetMouseY(a)) + "px";}return false;}

function q(a) {a = GetEvent(a);CancelEvent(a);if (b.releaseCapture) {b.releaseCapture();}i = false;n(g(GetMouseY(a)));s.UpdateFromMap();if (h) {h.UpdateFromMap();}return false;}

function j() {y = GetLeftPosition(c);u = GetTopPosition(c);}

function n(f) {var c = e.offsetHeight - b.offsetHeight, d = 1 + MathRound((c - f) / c * 1);a.SetZoom(d);}

function k() {if (a.GetZoomLevel() == 1) {b.style.top = e.offsetHeight - b.offsetHeight + "px";} else {b.style.top = "0px";}}
this.Destroy = v;this.Show = x;this.Hide = w;this.UpdateFromMap = k;}

function Lb(e) {var d = document.createElement("div"), c = document.createElement("div"), b = document.createElement("div");this.Init = function () {c.className = "MSVE_ZoomBar_plus";c.id = "MSVE_navAction_tinyZoomBar_plus";c.title = L_ZoomBarPlusToolTip_Text;c.unselectable = "on";c.attachEvent("onclick", a.ZoomIn);pseudoHover(c);b.className = "MSVE_ZoomBar_minus";b.id = "MSVE_navAction_tinyZoomBar_minus";b.title = L_ZoomBarMinusToolTip_Text;b.unselectable = "on";b.attachEvent("onclick", a.ZoomOut);pseudoHover(b);d.className = "MSVE_ZoomBar";d.id = "MSVE_TinyZoomBar";e.appendChild(d);d.appendChild(c);d.appendChild(b);};this.Destroy = function () {c.detachEvent("onclick", a.ZoomIn);b.detachEvent("onclick", a.ZoomOut);};}

function O(w, u, v) {var a = document.createElement("div");a.setAttribute("id", w);a.innerHTML = u;var c = "MSVE_obliqueCompassPointOff", f = v;a.attachEvent("onmouseover", e);a.attachEvent("onmouseout", g);a.attachEvent("onclick", h);this.onclick = null;this.onmouseover = null;this.onmouseout = null;var b = this, d = false, i = new s(a, 17, 17);
function e(e) {if (d) {return;}c = a.className;a.className = "MSVE_obliqueCompassPointHover";if (b.onmouseover) {b.onmouseover(e);}}

function h(a) {if (d) {return;}e(a);c = "MSVE_obliqueCompassPointOn";if (b.onclick) {b.onclick(a);}}

function g(e) {if (d) {return;}a.className = c;if (b.onmouseout) {b.onmouseout(e);}}

function l() {c = "MSVE_obliqueCompassPointOn";a.className = "MSVE_obliqueCompassPointOn";}

function k() {c = "MSVE_obliqueCompassPointOff";a.className = "MSVE_obliqueCompassPointOff";}

function r() {d = true;k();}

function j() {d = false;l();}

function p() {return a;}

function m() {return f;}

function n(a) {f = a;}

function t() {i.Reset();j();}

function o(b) {a.style.left = b.left;a.style.top = b.top;}

function s(s, o, p) {var g = s, a = 0, b = 0.3, d = 0, m = 40, h = 25, c = false, l = Math.PI / 2, i = true, q = b + 0.1;
function n(a, b, c) {if (b >= c - a && b <= c + a) {return true;}return false;}

function j() {a += b;if (a > Math.PI * 2) {a -= Math.PI * 2;} else if (a < 0) {a += Math.PI * 2;}if (n(q, a, d)) {b = 0.3;a = d;e(a);c = false;return;}e(a);window.setTimeout(j, m);}

function e(a) {var b = o + h * Math.sin(a), c = p + h * Math.cos(a);g.style.left = b + "px";g.style.top = c + "px";}

function f(a) {if (c) {return;}c = true;d = a;j();}

function k(a, c) {i = c;if (!i) {b *= -1;}f(l * a);}

function r() {c = false;a = 0;}
this.RotateTo = f;this.RotateToIndex = k;this.Reset = r;}

function q() {a.detachEvent("onmouseover", e);a.detachEvent("onmouseout", g);a.detachEvent("onclick", h);a = null;}
this.GetElement = p;this.GetCurrentPositionIndex = m;this.SetCurrentPositionIndex = n;this.SetCurrentPosition = o;this.On = l;this.Off = k;this.RotateToIndex = i.RotateToIndex;this.Reset = t;this.Disable = r;this.Enable = j;this.Destroy = q;}

function Hb(C) {var o = [];o.push({top:"-8px", left:"17px"});o.push({top:"17px", left:"42px"});o.push({top:"42px", left:"17px"});o.push({top:"17px", left:"-8px"});var f = document.createElement("div");f.setAttribute("id", "MSVE_obliqueCompassContainer");f.title = L_ObliqueCompassSelectDirection_Text;var b = new O("MSVE_obliqueCompassPointN", "N", 0), j = b.GetElement();j.attachEvent("onclick", r);j.attachEvent("onmouseover", u);j.attachEvent("onmouseout", h);var d = new O("MSVE_obliqueCompassPointE", "E", 1), l = d.GetElement();l.attachEvent("onclick", t);l.attachEvent("onmouseover", x);l.attachEvent("onmouseout", h);var c = new O("MSVE_obliqueCompassPointS", "S", 2), k = c.GetElement();k.attachEvent("onclick", s);k.attachEvent("onmouseover", v);k.attachEvent("onmouseout", h);var e = new O("MSVE_obliqueCompassPointW", "W", 3), m = e.GetElement();m.attachEvent("onclick", w);m.attachEvent("onmouseover", y);m.attachEvent("onmouseout", h);var n = document.createElement("div");f.appendChild(j);f.appendChild(l);f.appendChild(k);f.appendChild(m);f.appendChild(n);C.appendChild(f);q();
function p(a) {if (a < 0) {a = 4 - Math.abs(a);}return a;}

function i(g) {var f = g.GetCurrentPositionIndex();d.SetCurrentPositionIndex(p(d.GetCurrentPositionIndex() - f));e.SetCurrentPositionIndex(p(e.GetCurrentPositionIndex() - f));b.SetCurrentPositionIndex(p(b.GetCurrentPositionIndex() - f));c.SetCurrentPositionIndex(p(c.GetCurrentPositionIndex() - f));var a = true;if (f == 3) {a = false;}b.RotateToIndex(2 - b.GetCurrentPositionIndex() < 0 ? b.GetCurrentPositionIndex() : 2 - b.GetCurrentPositionIndex(), a);d.RotateToIndex(2 - d.GetCurrentPositionIndex() < 0 ? d.GetCurrentPositionIndex() : 2 - d.GetCurrentPositionIndex(), a);c.RotateToIndex(2 - c.GetCurrentPositionIndex() < 0 ? c.GetCurrentPositionIndex() : 2 - c.GetCurrentPositionIndex(), a);e.RotateToIndex(2 - e.GetCurrentPositionIndex() < 0 ? e.GetCurrentPositionIndex() : 2 - e.GetCurrentPositionIndex(), a);}

function g(a) {switch (a) {case 0:h();break;case 1:z();break;case 2:A();break;case 3:B();break;default:;}}

function h() {n.className = "MSVE_obliqueCompassArrowU";}

function A() {n.className = "MSVE_obliqueCompassArrowD";}

function z() {n.className = "MSVE_obliqueCompassArrowR";}

function B() {n.className = "MSVE_obliqueCompassArrowL";}

function s() {i(c);g(0);var b = a.GetObliqueScene();if (b) {var d = b.GetRotation("South");if (d) {a.SetObliqueOrientation("South");}}}

function r() {i(b);g(0);var c = a.GetObliqueScene();if (c) {var d = c.GetRotation("North");if (d) {a.SetObliqueOrientation("North");}}}

function t() {i(d);g(0);var b = a.GetObliqueScene();if (b) {var c = b.GetRotation("East");if (c) {a.SetObliqueOrientation("East");}}}

function w() {i(e);g(0);var b = a.GetObliqueScene();if (b) {var c = b.GetRotation("West");if (c) {a.SetObliqueOrientation("West");}}}

function v() {g(c.GetCurrentPositionIndex());}

function x() {g(d.GetCurrentPositionIndex());}

function y() {g(e.GetCurrentPositionIndex());}

function u() {g(b.GetCurrentPositionIndex());}

function E() {f.style.display = "none";}

function F() {f.style.display = "block";}

function q() {var f = a.GetObliqueScene();if (!f) {return;}switch (f.GetOrientation()) {case "North":i(b);break;case "South":i(c);break;case "East":i(d);break;case "West":i(e);break;default:;}g(0);if (f.GetRotation("North")) {b.Enable();} else {b.Disable();}if (f.GetRotation("South")) {c.Enable();} else {c.Disable();}if (f.GetRotation("East")) {d.Enable();} else {d.Disable();}if (f.GetRotation("West")) {e.Enable();} else {e.Disable();}}

function D() {b.Destroy();d.Destroy();c.Destroy();e.Destroy();j.detachEvent("onclick", r);j.detachEvent("onmouseover", u);j.detachEvent("onmouseout", h);l.detachEvent("onclick", t);l.detachEvent("onmouseover", x);l.detachEvent("onmouseout", h);k.detachEvent("onclick", s);k.detachEvent("onmouseover", v);k.detachEvent("onmouseout", h);m.detachEvent("onclick", w);m.detachEvent("onmouseover", y);m.detachEvent("onmouseout", h);f = null;}
this.Hide = E;this.Show = F;this.UpdateFromMap = q;this.Destroy = D;}
};
Msn.VE.LatLong = function (b, a) {this.latitude = b;this.longitude = a;};
Msn.VE.LatLong.prototype.ToString = function () {return "(" + this.latitude + ", " + this.longitude + ")";};
Msn.VE.LatLong.prototype.Copy = function (a) {if (!a) {return;}this.latitude = a.latitude;this.longitude = a.longitude;};
Msn.VE.LatLong.prototype.Equals = function (a) {if (a instanceof Msn.VE.LatLong) {return this.latitude == a.latitude && this.longitude == a.longitude;} else {return false;}};
Msn.VE.LatLongRectangle = function (a, b) {this.northwest = a;this.southeast = b;this.ToString = function () {return "(" + (this.northwest ? this.northwest.ToString() : "null") + ", " + (this.southeast ? this.southeast.ToString() : "null") + ")";};this.Copy = function (a) {if (!a) {return;}if (!this.northwest) {this.northwest = new Msn.VE.LatLong;}if (!this.southeast) {this.southeast = new Msn.VE.LatLong;}this.northwest.Copy(a.northwest);this.southeast.Copy(a.southeast);};this.Center = function () {var b = Math.sin(this.northwest.latitude * Math.PI / 180), c = Math.sin(this.southeast.latitude * Math.PI / 180), d = 0.25 * (Math.log((1 + b) / (1 - b)) + Math.log((1 + c) / (1 - c))), a = new Msn.VE.LatLong;a.latitude = Math.atan(Math.exp(d)) * 360 / Math.PI - 90;a.longitude = 0.5 * (parseFloat(this.northwest.longitude) + parseFloat(this.southeast.longitude));return a;};this.Contains = function (c) {return c.latitude <= a.latitude && c.longitude >= a.longitude && c.latitude >= b.latitude && c.longitude <= b.longitude;};};
Msn.VE.MapStyle = new (function () {this.Road = "r";this.Shaded = "s";this.Aerial = "a";this.Hybrid = "h";this.Oblique = "o";});
Msn.VE.MapViewType = function () {};
Msn.VE.MapViewType.Pixel = "pixel";
Msn.VE.MapViewType.PixelRect = "pixelRect";
Msn.VE.MapViewType.LatLong = "latlong";
Msn.VE.MapViewType.LatLongAccurate = "latlongaccurate";
Msn.VE.MapViewType.LatLongRect = "latlongRect";
Msn.VE.MapView = function (map) {this.zoomLevel = 0;this.mapStyle = null;this.doRoadShading = false;this.tilt = -90;this.direction = 0;this.altitude = -1000;this.center = new VEPixel;this.latlong = new Msn.VE.LatLong;this.cameraLatlong = null;this.pixelRect = new Msn.VE.PixelRectangle;this.latlongRect = new Msn.VE.LatLongRectangle;this.sceneId = null;this.sceneOrientation = null;this._supressFlyToCall = false;this._needsPivotOperation = true;var mapInstance = map, p_this = this, viewType = Msn.VE.MapViewType.Pixel;this.Destroy = function () {this.center = this.latlong = p_this = mapInstance = null;};this.GetViewType = function () {return viewType;};this.GetMap = function () {return mapInstance;};this.SetMap = function (a) {mapInstance = a;};
function MakeCopy() {var a = new Msn.VE.MapView;a.Copy(p_this);return a;}

function Copy(a) {p_this.zoomLevel = a.zoomLevel;p_this.mapStyle = a.mapStyle;p_this.doRoadShading = a.doRoadShading;p_this.tilt = a.tilt;p_this.direction = a.direction;p_this.altitude = a.altitude;p_this.center.Copy(a.center);if (a.cameraLatlong != null) {p_this.cameraLatlong = new Msn.VE.LatLong;p_this.cameraLatlong.Copy(a.cameraLatlong);}p_this.latlong.Copy(a.latlong);p_this.pixelRect.Copy(a.pixelRect);p_this.latlongRect.Copy(a.latlongRect);p_this.sceneId = a.sceneId;p_this.sceneOrientation = a.sceneOrientation;p_this.SetMap(a.GetMap());viewType = a.GetViewType();}

function Equals(a) {return a != null && p_this.zoomLevel == a.zoomLevel && p_this.mapStyle == a.mapStyle && MathAbs(p_this.tilt - a.tilt) < 0.000001 && MathAbs(p_this.direction - a.direction) < 0.000001 && MathAbs(p_this.altitude - a.altitude) < 0.000001 && MathAbs(p_this.center.x - a.center.x) < 0.000001 && MathAbs(p_this.center.y - a.center.y) < 0.000001 && p_this.sceneId == a.sceneId && p_this.GetMap() == a.GetMap() && p_this.sceneOrientation == a.sceneOrientation;}

function ToString() {return "(" + p_this.latlong.ToString() + ", " + p_this.zoomLevel + ", " + p_this.mapStyle + ")";}

function SetCenter(a) {if (!a) {return;}p_this.center = a;viewType = Msn.VE.MapViewType.Pixel;}

function SetCenterLatLong(a) {if (!a) {return;}p_this.latlong = a;p_this.cameraLatlong = null;viewType = Msn.VE.MapViewType.LatLong;}

function SetCenterLatLongAccurate(a) {if (a) {p_this.latlong = a;p_this.cameraLatlong = null;if (p_this.mapStyle == Msn.VE.MapStyle.Oblique) {viewType = Msn.VE.MapViewType.LatLongAccurate;} else {viewType = Msn.VE.MapViewType.LatLong;}}}

function SetPixelRectangle(a) {p_this.pixelRect = a;p_this.cameraLatlong = null;p_this.tilt = -90;p_this.direction = 0;viewType = Msn.VE.MapViewType.PixelRect;}

function SetLatLongRectangle(a) {p_this.latlongRect = a;p_this.cameraLatlong = null;p_this.tilt = -90;p_this.direction = 0;viewType = Msn.VE.MapViewType.LatLongRect;}

function SetZoomLevel(a) {if (a <= 0) {a = 1;}var c = mapInstance.GetCenterOffset().x, d = mapInstance.GetCenterOffset().y;switch (viewType) {case Msn.VE.MapViewType.Pixel:var b = Math.pow(2, a - p_this.zoomLevel);p_this.center.x = (p_this.center.x + c) * b - c;p_this.center.y = (p_this.center.y + d) * b - d;break;case Msn.VE.MapViewType.PixelRect:var b = Math.pow(2, a - p_this.zoomLevel);p_this.pixelRect.topLeft.x = p_this.pixelRect.topLeft.x * b;p_this.pixelRect.topLeft.y = p_this.pixelRect.topLeft.y * b;p_this.pixelRect.bottomRight.x = p_this.pixelRect.bottomRight.x * b;p_this.pixelRect.bottomRight.y = p_this.pixelRect.bottomRight.y * b;break;default:;}if (p_this.zoomLevel != a) {p_this.altitude = -1000;if (p_this.zoomLevel != 0) {p_this.cameraLatlong = null;}}p_this.zoomLevel = a;}

function SetMapStyle(a, c, b) {p_this.mapStyle = a;if (viewType == Msn.VE.MapViewType.Pixel) {viewType = Msn.VE.MapViewType.LatLong;}if (a != "o") {p_this.sceneId = null;p_this.sceneOrientation = null;} else {p_this.sceneId = c;p_this.sceneOrientation = b;}}

function SetTilt(a) {if (a >= 269.99999) {a = a - 360;}if (a < -90) {a = -90;}if (a > 90) {a = 90;}p_this.tilt = a;p_this._needsPivotOperation = true;}

function SetDirection(a) {if (a < 0 || a >= 360) {a = 0;}p_this.direction = a;p_this._needsPivotOperation = true;}

function SetAltitude(a) {if (a < -1000 || a > 15000000) {a = -1000;}p_this.altitude = a;}

function GetTilt() {return p_this.tilt;}

function GetDirection() {return p_this.direction;}

function GetAltitude() {return p_this.altitude;}

function GetX(a) {if (a) {return p_this.center.x * Math.pow(2, a - p_this.zoomLevel);}return p_this.center.x;}

function GetY(a) {if (a) {return p_this.center.y * Math.pow(2, a - p_this.zoomLevel);}return p_this.center.y;}

function GetCenter(a) {if (a == undefined) {var b = p_this.center.x + mapInstance.GetCenterOffset().x, c = p_this.center.y + mapInstance.GetCenterOffset().y;return new VEPixel(b, c);}var b = (p_this.center.x + mapInstance.GetCenterOffset().x) * Math.pow(2, a - p_this.zoomLevel), c = (p_this.center.y + mapInstance.GetCenterOffset().y) * Math.pow(2, a - p_this.zoomLevel);return new VEPixel(b, c);}

function GetZoomLevel() {return p_this.zoomLevel;}

function GetLatLongRectangle() {return p_this.latlongRect;}

function GetPixelRectangle() {return p_this.pixelRect;}

function GetCenterLatLong() {var b = p_this.center.x + mapInstance.GetCenterOffset().x, c = p_this.center.y + mapInstance.GetCenterOffset().y, a = mapInstance.GetCurrentMode().PixelToLatLong(new VEPixel(b, c), p_this.zoomLevel);return a == null ? p_this.latlong : a;}

function Resolve(b, d, c, a) {if (viewType == Msn.VE.MapViewType.LatLongAccurate) {ResolveAsync(b, d, c, a);} else {ResolveSync(b, d, c, a);}}

function ResolveAsync(b, e, d, a) {
function c(c) {if (c != null && typeof c != "undefined" && c.length == 1 && c[0]) {p_this.center = c[0];}if (p_this.cameraLatlong == null) {if (!p_this._UpdateCamera(b)) {p_this.tilt = -90;p_this.cameraLatlong = p_this.latlong;}}viewType = Msn.VE.MapViewType.Pixel;if (a != null && typeof a == "function") {a();}}
b.LatLongToPixelAsync([p_this.latlong], p_this.zoomLevel, c);}

function ResolveSync(a, d, c, b) {switch (viewType) {case Msn.VE.MapViewType.Pixel:p_this.latlong = a.PixelToLatLong(p_this.center, p_this.zoomLevel);break;case Msn.VE.MapViewType.LatLong:p_this.center = a.LatLongToPixel(p_this.latlong, p_this.zoomLevel);if (p_this.center != null) {p_this.center.x -= mapInstance.GetCenterOffset().x;p_this.center.y -= mapInstance.GetCenterOffset().y;}break;case Msn.VE.MapViewType.PixelRect:ResolveRectangle(a, d, c);break;case Msn.VE.MapViewType.LatLongRect:if (p_this.mapStyle == "o") {p_this.zoomLevel = 1;var e = a.GetScene();if (!e.ContainsLatLong(p_this.latlongRect.northwest) || !e.ContainsLatLong(p_this.latlongRect.southeast)) {p_this.latlong = p_this.latlongRect.Center();p_this.center = a.LatLongToPixel(p_this.latlong, p_this.zoomLevel);} else {p_this.pixelRect.topLeft = a.LatLongToPixel(p_this.latlongRect.northwest, p_this.zoomLevel);p_this.pixelRect.bottomRight = a.LatLongToPixel(p_this.latlongRect.southeast, p_this.zoomLevel);ResolveRectangle(a, d, c);}} else {p_this.zoomLevel = 12;p_this.altitude = -1000;p_this.pixelRect.topLeft = a.LatLongToPixel(p_this.latlongRect.northwest, p_this.zoomLevel);p_this.pixelRect.bottomRight = a.LatLongToPixel(p_this.latlongRect.southeast, p_this.zoomLevel);ResolveRectangle(a, d, c);}break;default:;}if (p_this.cameraLatlong == null) {if (!p_this._UpdateCamera(a)) {p_this.tilt = -90;p_this.cameraLatlong = p_this.latlong;}}viewType = Msn.VE.MapViewType.Pixel;if (b != null && typeof b == "function") {b();}}

function ResolveRectangle(i, k, j) {var c = 19, a = Math.pow(2, c - p_this.zoomLevel), g = MathMax(1, MathAbs(p_this.pixelRect.topLeft.x - p_this.pixelRect.bottomRight.x) * a), f = MathMax(1, MathAbs(p_this.pixelRect.topLeft.y - p_this.pixelRect.bottomRight.y) * a), d = Math.log(2), e = c - Math.ceil(Math.log(g / k) / d), h = c - Math.ceil(Math.log(f / j) / d), b = MathMin(e, h);if (b <= 0) {b = 1;}a = Math.pow(2, b - p_this.zoomLevel);p_this.center.x = 0.5 * (p_this.pixelRect.topLeft.x + p_this.pixelRect.bottomRight.x) * a - mapInstance.GetCenterOffset().x;p_this.center.y = 0.5 * (p_this.pixelRect.topLeft.y + p_this.pixelRect.bottomRight.y) * a - mapInstance.GetCenterOffset().y;p_this.zoomLevel = b;p_this.altitude = -1000;p_this.latlong = i.PixelToLatLong(p_this.center, p_this.zoomLevel);}

function _UpdateCamera(viewMode) {if (p_this.latlong == null) {if (p_this.center != null && p_this.zoomLevel != null && typeof viewMode._InternalOrthoMode == "function") {var orthoMode = viewMode._InternalOrthoMode();p_this.latlong = orthoMode.PixelToLatLong(p_this.center, p_this.zoomLevel);if (p_this.latlong != null) {p_this.tilt = -90;p_this.direction = 0;}}}if (p_this.latlong == null) {return false;}p_this._needsPivotOperation = false;if (mapInstance.IsModeEnabled(Msn.VE.MapActionMode.Mode3D)) {var control = mapInstance.Get3DControl();if (control != null) {var cam = control.CameraPositionGivenTarget(p_this.latlong.latitude, p_this.latlong.longitude, p_this.altitude, p_this.zoomLevel, p_this.tilt, p_this.direction);if (cam != null) {var lat, lon, alt;eval(cam);p_this.cameraLatlong = new Msn.VE.LatLong;p_this.cameraLatlong.latitude = lat;p_this.cameraLatlong.longitude = lon;p_this.altitude = alt;} else {return false;}}}return true;}
this.MakeCopy = MakeCopy;this.Copy = Copy;this.Equals = Equals;this.ToString = ToString;this.SetCenter = SetCenter;this.SetCenterLatLong = SetCenterLatLong;this.SetCenterLatLongAccurate = SetCenterLatLongAccurate;this.SetPixelRectangle = SetPixelRectangle;this.SetLatLongRectangle = SetLatLongRectangle;this.SetZoomLevel = SetZoomLevel;this.SetMapStyle = SetMapStyle;this.SetTilt = SetTilt;this.SetDirection = SetDirection;this.SetAltitude = SetAltitude;this.GetTilt = GetTilt;this.GetDirection = GetDirection;this.GetAltitude = GetAltitude;this.GetX = GetX;this.GetY = GetY;this.GetCenter = GetCenter;this.Resolve = Resolve;this.SetZoomLevel = SetZoomLevel;this.GetZoomLevel = GetZoomLevel;this.GetLatLongRectangle = GetLatLongRectangle;this.GetPixelRectangle = GetPixelRectangle;this.GetCenterLatLong = GetCenterLatLong;this._UpdateCamera = _UpdateCamera;};
Msn.VE.ViewChangeType = function () {};
Msn.VE.ViewChangeType.Zoom = 1;
Msn.VE.ViewChangeType.Pan = 2;
Msn.VE.ViewChangeType.Hybrid = 3;
Msn.VE.ViewChangeType.IsValid = function (a) {return typeof a == "number" && a > 0 && a < 4;};
Msn.VE.ObliqueScene = function (f, F, x, B, E, H, b, e, q, p, j, D) {var c = null, d = null, a = "ElevatedLoc.ashx";if (Msn.VE.API != null) {a = Msn.VE.API.Constants.obliquecalcservice;}var m = new VELatLongEncoding, l = 256, n = this;this.neighborScenes = j;var G = new Msn.VE.Bounds(1, 2, 0, 0, b / 2, e / 2);
function w(d, e) {var c = Math.pow(2, e - 2), f = [[d.x / c], [d.y / c], [1]], a = MatrixMultiply(q, f), b = new Msn.VE.LatLong;b.longitude = a[0][0] / a[2][0];b.latitude = a[1][0] / a[2][0];return b;}

function s(g, l, o) {if (a != null && typeof a != "undefined" && a.length > 0) {var i = Math.pow(2, l - 2), h = [];for (var e = 0; e < g.length; ++e) {h[e] = parseInt(g[e].x / i) + "," + parseInt(g[e].y / i);}var j = new VENetwork;j.ServiceUrl = a;var b = [];if (c) {b.push(new VEParameter("ct", c));}if (d) {b.push(new VEParameter("mapguid", d));}b.push(new VEParameter("a", "P2L"));b.push(new VEParameter("b", h.join(";")));b.push(new VEParameter("s", f));b.push(new VEParameter("f", "__PixelToLatLongAsyncResponse"));var k = function (b) {var c = null;if (b != null && (b.err == null || typeof b.err == "undefined")) {c = [];for (var a = 0; a < b.length; ++a) {if (b[a] != null) {if (Msn.VE.API != null) {var e = new VELatLong;e._reserved = b[a];c[a] = e;} else {var d = m.Decode(b[a]);c[a] = new Msn.VE.LatLong(d[0], d[1]);}} else {c[a] = null;}}}o(c);};j.BeginInvoke("__PixelToLatLongAsyncResponse", b, k, n);}}

function g(d, e) {var c = Math.pow(2, e - 2), f = [[d.longitude], [d.latitude], [1]], a = MatrixMultiply(p, f), b = new VEPixel;b.x = a[0][0] / a[2][0] * c;b.y = a[1][0] / a[2][0] * c;return b;}

function r(g, k, l) {if (a != null && typeof a != "undefined" && a.length > 0) {var h = [];for (var e = 0; e < g.length; ++e) {h[e] = m.Encode(g[e].latitude, g[e].longitude);}var i = new VENetwork;i.ServiceUrl = a;var b = [];if (c) {b.push(new VEParameter("ct", c));}if (d) {b.push(new VEParameter("mapguid", d));}b.push(new VEParameter("a", "L2P"));b.push(new VEParameter("b", h.join("")));b.push(new VEParameter("s", f));b.push(new VEParameter("f", "__LatLongToPixelAsyncResponse"));var j = function (a) {var c = null;if (a != null && (a.err == null || typeof a.err == "undefined")) {var d = Math.pow(2, k - 2);c = [];for (var b = 0; b < a.length; ++b) {if (a[b] != null && a[b].x != null && typeof a[b].x != "undefined" && a[b].y != null && typeof a[b].y != "undefined") {c[b] = new VEPixel(a[b].x * d, a[b].y * d);} else {c[b] = null;}}}l(c);};i.BeginInvoke("__LatLongToPixelAsyncResponse", b, j, n);}}

function A(a, c, d) {if (a < 0 || c < 0) {return false;}if (d == 1) {return a < b / 2 && c < e / 2;}return a < b && c < e;}

function I() {return f;}

function u(c, e, a) {var d = e * (a == 1 ? b / 2 : b) + c;return "http://c" + c % 2 + ".p" + H + ".oblique.tiles.virtualearth.net/tiles/o" + F + "-" + x + "-" + (E + a - 2) + "-" + d + ".jpeg?g=66";}

function o() {return "http://thumbs.oblique.tiles.virtualearth.net/tiles/ot" + f + ".jpeg?g=66";}

function y(b) {var a = j[b];if (a == null || a == -1) {return null;}return new Msn.VE.ObliqueScene(a);}

function z(b) {var a = D[b];if (a == null || a == -1) {return null;}return new Msn.VE.ObliqueScene(a);}

function v() {return B;}

function C() {return G;}

function k() {return b * l;}

function i() {return e * l;}

function t(a) {if (!a) {return false;}var b = g(a, 2);return h(b, 2);}

function h(b, e) {var a = Math.pow(2, 2 - e), c = b.x * a, d = b.y * a;return c >= 0 && d >= 0 && c < k() && d < i();}
this.SetClientToken = function (a) {c = a;};this.SetGUID = function (a) {d = a;};this.PixelToLatLong = w;this.PixelToLatLongAsync = s;this.LatLongToPixel = g;this.LatLongToPixelAsync = r;this.IsValidTile = A;this.GetID = I;this.GetTileFilename = u;this.GetThumbnailFilename = o;this.GetNeighbor = y;this.GetRotation = z;this.GetOrientation = v;this.GetBounds = C;this.GetWidth = k;this.GetHeight = i;this.ContainsLatLong = t;this.ContainsPixel = h;};
Msn.VE.Orientation = new (function () {this.North = "North";this.East = "East";this.West = "West";this.South = "South";});
VEPixel = function (a, b) {this.x = a;this.y = b;};
VEPixel.prototype.ToString = function () {return "(" + this.x + ", " + this.y + ")";};
VEPixel.prototype.Copy = function (a) {if (!a) {return;}this.x = a.x;this.y = a.y;};
Msn.VE.PixelRectangle = function (b, a) {this.topLeft = b;this.bottomRight = a;this.ToString = function () {return "(" + (this.topLeft ? this.topLeft.ToString() : "null") + ", " + (this.bottomRight ? this.bottomRight.ToString() : "null") + ")";};this.Copy = function (a) {if (!a) {return;}if (!this.topLeft) {this.topLeft = new VEPixel;}if (!this.bottomRight) {this.bottomRight = new VEPixel;}this.topLeft.Copy(a.topLeft);this.bottomRight.Copy(a.bottomRight);};this.Contains = function (a) {if (a instanceof VEPixel) {return a.x > this.topLeft.x && a.y > this.topLeft.y && a.x < this.bottomRight.x && a.y < this.bottomRight.y;}};};
Msn.VE.LineRegion = function (b, a, c) {this.boundingRectangle = b;this.indices = a;this.childRegions = c;
function d() {return "Bounding Rectangle: " + this.boundingRectangle[0].ToString() + " to " + this.boundingRectangle[1].ToString() + " | Indices: [" + a + "]";}
this.ToString = d;};
var L_integerencodingoutofrange_text = "VEIntegerEncoding: The number encoded is out of supported range", L_floatintegermapencodingoutofrange_text = "VEFloatIntegerMap: The number encoded is out of supported range", L_integerencodinginvalidstringlength_text = "VEIntegerEncoding: Invalid string length", L_integerencodingunknowndigit_text = "VEIntegerEncoding: The encoded string has an unknown digit";

function VEIntegerEncoding(g, j) {
    var e = g, d = g.length, a = j, h = 1;
    for (var i = 0; i < a; ++i) {
        h *= d;
    }
    var f = h - 1, c = [];
    for (var b = 0; b < e.length; ++b) {
        c[e.substr(b, 1)] = b;
    }
    this.MaxValue = function () {return f;};
    this.ValueLength = function () {return a;};
    this.Encode = function (c) {if (c <= f) {var h = "", g = [];for (var b = 0; b < a; ++b) {g[b] = 0;}var i = a - 1;while (c > 0) {g[i] = Math.floor(c % d);c = Math.floor(c / d);--i;}for (var b = 0; b < g.length; ++b) {h += e.substr(g[b], 1);}return h;} else {throw L_integerencodingoutofrange_text;}};
    this.Decode = function (c) {if (c.length == a) {var b = 0;for (var e = 0; e < c.length; ++e) {b *= d;b += this.DigitValue(c.substr(e, 1));}return b;} else {throw L_integerencodinginvalidstringlength_text;}};
    this.DigitValue = function (a) {if (c[a] != null && c[a] != "undefined") {return c[a];} else {throw L_integerencodingunknowndigit_text;}};
}


function VEFloatIntegerMap(e, d, f) {
    var a = e, c = d, b = f;
    this.MinFloat = function () {return a;};
    this.MaxFloat = function () {return c;};
    this.MaxInt = function () {return b;};
    this.FloatToInt = function (d) {if (d >= a && d <= c) {var e = (d - a) / (c - a), f = e * b + 0.5;return Math.min(Math.floor(f), b);} else {throw L_floatintegermapencodingoutofrange_text;}};
    this.IntToFloat = function (d) {if (d <= b) {var f = d / b, e = a + f * (c - a);return e;} else {throw L_floatintegermapencodingoutofrange_text;}};
}

var L_velatlongencodinginvalidstringlength_text = "VELatLongEncoding: Invalid string length";

function VELatLongEncoding(b) {
    var i = -90, h = 90, g = -180, f = 180, j = "0123456789bcdfghjkmnpqrstvwxyz", e = 6;
    if (b != null && typeof b != "undefined") {
        e = b;
    }
    var a = new VEIntegerEncoding(j, e), d = new VEFloatIntegerMap(i, h, a.MaxValue()), c = new VEFloatIntegerMap(g, f, a.MaxValue());
    this.Encode = function (e, b) {var f = a.Encode(d.FloatToInt(e)) + a.Encode(c.FloatToInt(b));return f;};
    this.Decode = function (f) {if (f.length == 2 * a.ValueLength()) {var e = a.ValueLength(), j = f.substr(0, e), h = f.substr(e, e), i = a.Decode(j), g = a.Decode(h), b = [];b[0] = d.IntToFloat(i);b[1] = c.IntToFloat(g);return b;} else {throw L_velatlongencodinginvalidstringlength_text;}};
}


function VELatLongEncodingForMobile() {
    VELatLongEncoding.call(this, 5);
}

var Shims = ["help", "msve_ScratchPad", "whereambiglist", "VE_MessageControl", "contextMenu", "MSVE_dashboardId"], vedomain = "http://local.live.com";

function initShimElements() {
    for (var a = 0; a < Shims.length; a++) {
        UpdateIFrameShim(Shims[a]);
    }
}


function hookResizeEvent(a) {
    if (a.onresize == null) {
        a.onresize = function () {var b = event.srcElement, a = b.shimElement;if (a) {SetShimPosition(a, b);}};
    }
}


function destroyShimElements() {
    for (var a = 0; a < Shims.length; a++) {
        destroyIFrameShim(Shims[a]);
    }
    var b = $ID("msve_ScratchPad");
    if (b) {
        b.onresize = null;
    }
}


function ConvertClipToSize(d, e) {
    var a = e.style.clip.split(",");
    if (a.length == 4) {
        var c = parseInt(a[1]), b = parseInt(a[2]);
        if (!isNaN(b)) {
            d.height = b;
        }
        if (!isNaN(c)) {
            d.width = c;
        }
    }
}

var UseClipToSize = window.navigator.userAgent.indexOf("Firefox") >= 0;

function SetShimPosition(a, b) {
    a.style.top = GetElementTopPosition(b, a.parentNode) + "px";
    a.style.left = GetElementLeftPosition(b, a.parentNode) + "px";
    a.width = b.offsetWidth;
    a.height = b.offsetHeight;
    if (UseClipToSize) {
        ConvertClipToSize(a, b);
    } else {
        a.style.clip = b.style.clip;
    }
}


function UpdateIFrameShim(c, d) {
    var a = typeof c == "object" ? c : $ID(c);
    if (!a) {
        return;
    }
    if (!a.shimElement) {
        addIFrameShim(a, d);
    }
    var b = a.shimElement;
    SetShimPosition(b, a);
    if (Msn.VE.Css.Functions.getComputedStyle(a, "display") == "none" ||
        Msn.VE.Css.Functions.getComputedStyle(a, "visibility") == "hidden") {
        b.style.display = "none";
    } else {
        b.style.display = "block";
    }
}


function RepositionShims() {
    if (!view3DMode) {
        return;
    }
    for (var b = 0; b < Shims.length; b++) {
        var a = $ID(Shims[b]);
        if (a && a.shimElement && a.shimElement.style.display != "none") {
            SetShimPosition(a.shimElement, a);
        }
    }
}


function addIFrameShim(b, e) {
    var a = document.createElement("iframe");
    a.frameBorder = "0";
    a.scrolling = "no";
    a.style.position = "absolute";
    a.style.zIndex = "1";
    a.style.backgroundColor = "white";
    b.shimElement = a;
    HideShim(b);
    var c = e;
    if (c == null) {
        c = b;
    }
    var d = c.parentNode;
    if (d == null) {
        d = document.body;
    }
    d.insertBefore(a, c);
    if (b.id == "msve_ScratchPad" ||
        b.id && b.id.indexOf("_vefindcontrolinput") > 0) {
        hookResizeEvent(b);
    }
    return a;
}


function destroyIFrameShim(b) {
    var a = $ID(b);
    if (a != null && a.shimElement) {
        a.shimElement.removeNode(true);
        a.shimElement = null;
    }
}


function ShowShim(a, b) {
    UpdateIFrameShim(a, b);
    if (a != null && a.shimElement) {
        a.shimElement.style.display = "block";
    }
}


function HideShim(a) {
    if (a != null && a.shimElement) {
        a.shimElement.style.display = "none";
    }
}


function RollShim(b) {
    var a = b.Recipient;
    if (a.shimElement) {
        if (UseClipToSize) {
            ConvertClipToSize(a.shimElement, a);
        } else {
            a.shimElement.style.clip = a.style.clip;
        }
    }
}


function OnView3DKeyDown(c, b) {
    CloseContextMenu();
    ero.hide();
    var a = GetMapControlInstance(b);
    if (a == null) {
        return;
    }
    var d = parseInt(c);
    switch (d) {
      case 65:
        a.SetMapStyle("a");
        break;
      case 72:
        a.SetMapStyle("h");
        break;
      case 82:
      case 86:
        a.SetMapStyle("r");
        break;
      case 50:
      case 98:
        a.EnableMode(Msn.VE.MapActionMode.Mode2D);
        break;
      default:;
    }
}


function OnNavigationHelpFired() {
    VE_Help.OpenLiveHelp("wl_local", "topic", "WL_LOCAL_PROC_3D_NavigateMap.htm");
}


function OnHardwareAccelHelpFired() {
    VE_Help.OpenLiveHelp("wl_local", "topic", "WL_LOCAL_TROU_3D_VideoAcceleration.htm");
}


function OnView3DMouseDown() {
    CloseContextMenu();
    ero.hide();
}


function OnView3DDropGeometry(pinPosition) {
    var layerId, pushpinId, lat, lon, alt;
    eval(pinPosition);
    var result = VE_MapManager.GetAnnotationById(pushpinId);
    if (result) {
        VE_Annotations.MovePushpin(null, new Msn.VE.LatLong(lat, lon));
    }
}


function OnView3DLatLonAltClicked(position) {
    var lat, lon, alt;
    eval(position);
    VE_MapUpdateView_AutoSaveEntity();
    VE_EditControl.AddPoint(null, lat, lon);
}


function OnBeginFlyTo(c, b) {
    var a = GetMapControlInstance(b);
    if (a != null) {
        a.OnBeginCameraUpdate();
    }
}


function OnView3DUpdateViewpoint(viewpoint, mapGuid) {
    var lat, lon, zoom, alt, heading, pitch, targetLat, targetLon;
    eval(viewpoint);
    var mapcontrolinstance = GetMapControlInstance(mapGuid);
    if (mapcontrolinstance == null) {
        return;
    }
    mapcontrolinstance.OnEndCameraUpdate();
    var ePosition = 0.000001, eOrientation = 0.1, eAltitude = 0.01, view = mapcontrolinstance.GetCurrentMapView(), orientationEqual = Math.abs(heading - view.GetDirection()) < eOrientation &&
        Math.abs(pitch - view.GetTilt()) < eOrientation, latlongEqual = view.cameraLatlong != null &&
        Math.abs(lat - view.cameraLatlong.latitude) < ePosition &&
        Math.abs(lon - view.cameraLatlong.longitude) < ePosition, altEqual = Math.abs(alt - view.GetAltitude()) < eAltitude &&
        view.GetZoomLevel() == zoom, animationFinished = latlongEqual &&
        orientationEqual &&
        view.GetAltitude() <= -1000 && view.GetZoomLevel() == zoom;
    if (!animationFinished) {
        var onAnimationInterruptedCallback = mapcontrolinstance.GetOn3DAnimationInterruptedCallback();
        if (onAnimationInterruptedCallback) {
            onAnimationInterruptedCallback();
        }
    }
    view = new Msn.VE.MapView(mapcontrolinstance);
    view.latlong = new Msn.VE.LatLong(targetLat, targetLon);
    view.cameraLatlong = new Msn.VE.LatLong(lat, lon);
    view.SetZoomLevel(zoom);
    view.SetMapStyle(mapcontrolinstance.GetMapStyle());
    view.SetAltitude(alt);
    view.SetDirection(heading);
    view.SetTilt(pitch);
    view._supressFlyToCall = true;
    mapcontrolinstance.SetView(view);
    mapcontrolinstance.Fire("onendpan");
    mapcontrolinstance.Fire("onchangeview");
}


function ProcessQueuedRequest(c, b) {
    var a = GetVEMapInstance(b);
    if (a != null) {
        a._ProcessQueuedRequest();
    }
}


function OnView3DHoverEnd() {
    ero.hide();
}


function CloseContextMenu() {
    VE_MapUpdateView_AutoSaveEntity();
    VE_MapUpdateView_AutoSaveEntity();
    if (VE_ContextMenu.MenuOpen) {
        VE_ContextMenu.RemoveContextPin();
        VE_ContextMenu.CloseMenu();
    }
}


function OnView3DPushpinHover(pushPinEval, mapGuid) {
    if (typeof VE_Annotations != "undefined") {
        if (VE_Annotations.PanelOpen) {
            return;
        }
    }
    var layerId, pushpinId, rX1, rY1, rX2, rY2;
    eval(pushPinEval);
    var vmap, mapcontrol, mapid;
    try {
        if (typeof Msn.VE.API == "undefined" || Msn.VE.API == null) {
            vmap = null;
            mapcontrol = map;
            mapid = "mapContainer";
        } else {
            vmap = GetVEMapInstance(mapGuid);
            if (vmap == null) {
                return;
            }
            mapcontrol = vmap.vemapcontrol;
            mapid = vmap.ID;
        }
    } catch (a) {
        return;
    }
    var mapdiv = $ID(mapid);
    if (mapdiv == null) {
        return;
    }
    var mapx, mapy;
    mapx = GetLeftPosition(mapdiv);
    mapy = GetTopPosition(mapdiv);
    var rect = new Msn.VE.Geometry.Rectangle(new Msn.VE.Geometry.Point(rX1 + mapx, rY1 + mapy), new Msn.VE.Geometry.Point(rX2 + mapx, rY2 + mapy));
    if (vmap != null) {
        if (pushpinId.indexOf("msftve") == 0) {
            VEShowVEShapeERO(pushpinId, mapGuid, rect);
            return;
        } else {
            var pushpins = vmap.pushpins;
            if (pushpins != null) {
                var len = pushpins.length;
                for (var i = 0; i < len; i++) {
                    var p = pushpins[i];
                    if (p != null && p.ID == pushpinId) {
                        ero.hide();
                        VEPushpin.Show3D(rect, p.Title, p.Details, p.TitleStyle, p.DetailsStyle);
                        return;
                    }
                }
            }
        }
        return;
    } else {
        var result = VE_MapManager.GetAnnotationById(pushpinId);
        if (result) {
            var entity = result;
            try {
                if (entity != "undefined" && entity != "" && entity) {
                    var content = null, col = null;
                    col = VE_MapManager.GetCollectionByAnId(pushpinId);
                    if (col.GetType() == MC_COL_TYPE_COLLECTION) {
                        content = VE_MapViewPreUpdate.CreateEroContent(pushpinId);
                    } else {
                        content = VE_MapViewPreUpdate.Viewer.CreatePopupContent(entity);
                    }
                    if (content &&
                        content != "undefined" &&
                        content != "" && content.length > 0) {
                        CloseContextMenu();
                        ero.setContent(content);
                        ero.dockToRect(rect, null, -1);
                    }
                }
            } catch (a) {
                alert(a.message);
            }
            return;
        }
    }
    var re = /veDDstep_(.*)_pin_pinDiv/g, result = re.exec(pushpinId);
    if (result != null && result.length >= 2) {
        var instNum = result[1];
        ero.clearActions();
        var content = VE_Directions.routeDisplayManager.GeneratePopupContent(instNum);
        CloseContextMenu();
        ero.setContent(content);
        ero.dockToRect(rect, null, -1);
        return;
    }
    var re = /pin_traffic_market_(.*)/g, result = re.exec(pushpinId);
    if (result != null && result.length >= 2) {
        var entity = VE_TrafficManager.GetEntity(pushpinId);
        if (entity != null) {
            var content = VE_TrafficManager.CreateZoomPopupContent(entity);
            if (content != null &&
                content != "" && content != "undefined") {
                CloseContextMenu();
                ero.setContent(content);
                ero.dockToRect(rect, null, -1);
                return;
            }
        }
    }
    var re = /pin_traffic_incident_(.*)/g, result = re.exec(pushpinId);
    if (result != null && result.length >= 2) {
        var entity = VE_TrafficManager.GetEntity(pushpinId);
        if (entity != null) {
            var content = VE_TrafficManager.CreatePopupContent(entity, true);
            if (content != null &&
                content != "" && content != "undefined") {
                CloseContextMenu();
                ero.setContent(content);
                ero.dockToRect(rect, null, -1);
                return;
            }
        }
    }
    if (pushpinId == "autolocate") {
        var pushpins = mapcontrol.GetPushpins();
        if (pushpins) {
            for (var i = 0; i < pushpins.length; ++i) {
                if (pushpins[i].pin.id == "autolocate") {
                    var pinDOM = pushpins[i].pin;
                    pinDOM.onmouseover(rect);
                    return;
                }
            }
        }
    }
    var re = /pin_(.*)_(.*)/g, result = re.exec(pushpinId);
    if (result != null && result.length >= 3) {
        var searchIndex = result[1], resultIndex = result[2], s = VE_SearchManager.FindByIndex(searchIndex);
        if (s != null) {
            var r = s.GetEntity(resultIndex);
            if (r != null) {
                VE_SearchManager.SetLatLong(r.latitude, r.longitude);
                var content = VE_SearchManager.CreatePopupContent(r, true, searchIndex);
                CloseContextMenu();
                ero.setContent(content);
                VE_SearchManager.AddClick2CallSend2Phone(r, resultIndex);
                ero.dockToRect(rect, null, -1);
            }
        }
        return;
    }
}


function OnHardwareCapabilitiesUpdate() {
    if (typeof view3DMode != "undefined" && view3DMode) {
        var a = map.Get3DControl();
        if (3 == a.HardwareClassificationLevel) {
            a.AddElevationSource("Terrain", "DEM", vedomain + "/Manifests/HighDemContentManifest.xml", 0);
            a.AddModelSource("Model", "Model", vedomain + "/Manifests/ModelContentManifest.xml");
        } else if (2 == a.HardwareClassificationLevel) {
            a.AddElevationSource("Terrain", "DEM", vedomain + "/Manifests/DemContentManifest.xml", 0);
            a.AddModelSource("Model", "Model", vedomain + "/Manifests/MedModelContentManifest.xml");
        } else {
            a.AddElevationSource("Terrain", "DEM", vedomain + "/Manifests/DemContentManifest.xml", 0);
            a.RemoveModelSource("Model", "Model");
        }
    }
}


function View3DMovePin(a) {
    map.Get3DControl().PickupGeometry("UniqueLayer_Hack", a);
}

Msn.VE.FFSentinel = function (a) {this.curVersion = a;this.CurrentVersion = function () {return curVersion;};};

function GetSentinel() {
    if (window.navigator.userAgent.indexOf("MSIE") != -1) {
        var b;
        try {
            b = new ActiveXObject("Microsoft.SentinelVirtualEarth3D.SentinelVE3D");
        } catch (e) {
            b = null;
        }
        return b;
    } else if (typeof navigator.plugins != undefined) {
        for (var a = 0; a < navigator.plugins.length; a++) {
            var c = navigator.plugins[a].name.indexOf("Virtual Earth 3D");
            if (c >= 0) {
                var d = parseFloat(navigator.plugins[a].name.substring(c + 17, c + 21));
                return new Msn.VE.FFSentinel(d);
            }
        }
    }
    return null;
}


function HandleModeNotInstalled(b) {
    if (b == Msn.VE.MapActionMode.Mode3D) {
        map.EnableMode(Msn.VE.MapActionMode.Mode2D);
        var a = GetSentinel();
        if (a != null) {
            View3DDamaged();
        } else {
            View3DInstall();
        }
    }
}


function View3DInstall() {
    try {
        state.Set3DViewInstallInProgress("true");
        if (window.navigator.userAgent.indexOf("MSIE") != -1) {
            VE_Help.Open(L_View3DHelpWindowTitle_Text, "Help/" + window.locale + "/View3DIEInstall.htm");
        } else {
            VE_Help.Open(L_View3DHelpWindowTitle_Text, "Help/" + window.locale + "/View3DFInstall.htm");
        }
    } catch (a) {
    }
}


function View3DUpgrade() {
    try {
        VE_Help.Open(L_View3DHelpWindowTitle_Text, "Help/" + window.locale + "/View3DUpgrade.htm");
    } catch (a) {
    }
}


function View3DDamaged() {
    try {
        VE_Help.Open("", "Help/" + window.locale + "/View3DUnavailable.htm");
    } catch (a) {
    }
}


function Start3DView() {
    if (map) {
        map.EnableMode(Msn.VE.MapActionMode.Mode3D);
    }
}


function PushpinURL(d, c) {
    var b = vedomain + "/i/bin/" + window.buildVersion + "/";
    if (typeof d == "undefined" || d == null || !d) {
        return b + "pins/red_circ7px.gif";
    }
    var a = Msn.VE.PushPinTypes;
    switch (d) {
      case a.Annotation:
        if (c === "shared") {
            return b + "pins/poi_viewer.gif";
        }
        if (c === "business") {
            return b + "pins/poi_businesslisting.gif";
        }
        return b + "pins/poi_usergenerated.gif";
      case a.SearchResult:
        if (c === "shared") {
            return b + "pins/poi_title_viewer.gif";
        }
        return b + "pins/poi_" + c + ".gif";
      case a.DirectionStep:
        return b + "pins/RedCircle" + c + ".gif";
      case a.Direction:
      case a.DirectionTemp:
        return b + "pins/mapicon_" + c + ".gif";
      case a.TrafficOthers:
        return b + "Traffic/Traffic" + c + ".gif";
      case a.YouAreHere:
        return b + "pins/poi_youarehere.gif";
      case a.Default:
        return b + "pins/" + c;
      case a.Context:
        return b + "pins/red_circ7px.gif";
      case a.AdRoofStandard:
      case a.AdRoofWide:
      case a.AdStandard:
      case a.AdWide:
      case a.AdCategory:
        return c;
      default:;
    }
    return b + "pins/poi_usergenerated.gif";
}


function _VEExtractImgUrlFromHtml(d) {
    var b = null, a = document.createElement("div");
    a.innerHTML = d;
    var c = a.getElementsByTagName("img");
    if (c.length >= 1) {
        b = c[0].getAttribute("src");
    }
    a = null;
    return b;
}

var _VEHtmlToImgUrlHash = [];

function TranslatePushpinURL(d, e, i, g) {
    var b = Msn.VE.PushPinTypes, h, c = null;
    switch (g) {
      case b.DirectionStep:
        var f = /RedCircle([0123456789]+)/g, a = f.exec(e);
        if (a != null && a.length >= 2) {
            c = a[1];
            break;
        } else {
            return vedomain + _VEExtractImgUrlFromHtml(e);
        }
      case b.Direction:
      case b.DirectionTemp:
        var f = /mapicon_(start|end).gif/g, a = f.exec(e);
        if (a != null && a.length >= 2) {
            c = a[1];
            break;
        } else {
            return vedomain + _VEExtractImgUrlFromHtml(e);
        }
      case b.SearchResult:
        var f = /VE_Pushpin VE_Pushpin_(.*)/g, a = f.exec(d);
        if (a != null && a.length >= 2) {
            c = a[1];
        }
        break;
      case b.TrafficOthers:
        if (typeof _VEHtmlToImgUrlHash[d] == "string") {
            c = _VEHtmlToImgUrlHash[d];
        } else {
            var f = new RegExp(/VE_Pushpin VE_Traffic_(.*)/g), a = f.exec(d);
            if (a != null && a.length >= 2) {
                c = a[1];
                _VEHtmlToImgUrlHash[d] = c;
            }
            f = null;
        }
        break;
      case b.AdRoofStandard:
      case b.AdRoofWide:
      case b.AdStandard:
      case b.AdWide:
      case b.AdCategory:
        c = _VEExtractImgUrlFromHtml(e);
        break;
      default:;
    }
    var h = PushpinURL(g, c);
    return h;
}


function RaiseMouseEvent3D(info, mapGuid, eventName) {
    try {
        var lat = null, lon = null, layerId = null, shapeId = null, button = "None";
        eval(info);
        var mapcontrolinstance = GetMapControlInstance(mapGuid);
        if (mapcontrolinstance == null) {
            return;
        }
        var r2d = 180 / Math.PI, clickEvent = mapcontrolinstance.CreateEvent(lat == null || lon == null ? null : new Msn.VE.LatLong(lat * r2d, lon * r2d), null, null, null, shapeId, button);
        mapcontrolinstance.Fire(eventName, clickEvent);
    } catch (a) {
    }
}


function OnMouseDown3D(b, a) {
    RaiseMouseEvent3D(b, a, "onmousedown");
}


function OnMouseUp3D(b, a) {
    RaiseMouseEvent3D(b, a, "onmouseup");
}


function OnClick3D(b, a) {
    RaiseMouseEvent3D(b, a, "onclick");
}


function OnMouseOver3D(b, a) {
    RaiseMouseEvent3D(b, a, "onmouseover");
}


function OnMouseOut3D(b, a) {
    RaiseMouseEvent3D(b, a, "onmouseout");
}


function OnDoubleClick3D(b, a) {
    RaiseMouseEvent3D(b, a, "ondoubleclick");
}


function GetMapControlInstance(b) {
    if (typeof Msn.VE.API == "undefined" || Msn.VE.API == null) {
        return map;
    }
    var a = GetVEMapInstance(b);
    if (a == null) {
        return null;
    }
    return a.vemapcontrol;
}


function GetVEMapInstance(a) {
    if (typeof a == "undefined" || a == null) {
        if (Msn.VE.API == null ||
            Msn.VE.API == "undefined" ||
            Msn.VE.API.Globals.vemapinstances == null ||
            Msn.VE.API.Globals.vemapinstances == "undefined") {
            return null;
        }
        var c = 0;
        for (var b in Msn.VE.API.Globals.vemapinstances) {
            if (Msn.VE.API.Globals.vemapinstances[b] instanceof VEMap &&
                Msn.VE.API.Globals.vemapinstances[b].GetMapMode() == VEMapMode.Mode3D) {
                c++;
                a = b;
            }
        }
        if (c != 1) {
            return null;
        }
    }
    return VEMap._GetMapFromGUID(a);
}

var __vemapcontrolisReady = true, windowWidth = 0, windowHeight = 0, scrollbarWidth = null;

function $ID(a) {
    var b = document;
    return b.getElementById(a);
}


function $CE(a) {
    var b = document;
    return b.createElement(a);
}


function $CENS(a) {
    var b = document;
    return b.createElementNS(a);
}


function GetWindowWidth() {
    var a = 0;
    if (typeof window.innerWidth == "number") {
        a = window.innerWidth;
    } else if (document.documentElement &&
        document.documentElement.clientWidth) {
        a = document.documentElement.clientWidth;
    } else if (document.body && document.body.clientWidth) {
        a = document.body.clientWidth;
    }
    if (!a || a < 100) {
        a = 100;
    }
    return a;
}


function GetWindowHeight() {
    var a = 0;
    if (typeof window.innerHeight == "number") {
        a = window.innerHeight;
    } else if (document.documentElement &&
        document.documentElement.clientHeight) {
        a = document.documentElement.clientHeight;
    } else if (document.body && document.body.clientHeight) {
        a = document.body.clientHeight;
    }
    if (!a || a < 100) {
        a = 100;
    }
    return a;
}


function GetScrollbarWidth() {
    if (scrollbarWidth) {
        return scrollbarWidth;
    }
    if (navigator.userAgent.indexOf("IE") >= 0) {
        var a = document.createElement("div"), b = null;
        a.style.visible = "hidden";
        a.style.overflowY = "scroll";
        a.style.position = "absolute";
        a.style.width = 0;
        document.body.insertAdjacentElement("afterBegin", a);
        b = a.offsetWidth;
        a.parentNode.removeChild(a);
        if (!b) {
            b = 16;
        }
        scrollbarWidth = b;
        return b;
    } else {
        return 0;
    }
}


function GetUrlPrefix() {
    var a = window.location.pathname.lastIndexOf("/"), b = window.location.protocol + "//" + window.location.hostname + window.location.pathname.substring(0, a + 1);
    return b;
}


function GetUrlParameterString() {
    var a = window.location.search;
    if (a.length == 0 || a.indexOf("?") == -1) {
        return "";
    }
    return a.substr(a.indexOf("?") + 1);
}


function CheckWipExistence() {
    var a = GetUrlParameterString();
    if (a != "" && a.indexOf("wip=") > -1) {
        return true;
    }
    return false;
}


function GetUrlParameters() {
    var b = [], d = GetUrlParameterString();
    if (!d) {
        return b;
    }
    var e = d.split("&");
    for (var c = 0; c < e.length; c++) {
        var a = e[c].split("=");
        if (a.length == 2 && a[0] && a[1]) {
            b.push(unescape(a[0]));
            b.push(unescape(a[1]));
        }
    }
    return b;
}


function ParseShiftKeyForLinks(a) {
    if (a.shiftKey) {
        return false;
    }
    return true;
}

_VERegisterNamespaces("Msn.VE.API.Globals");
_VERegisterNamespaces("Msn.VE.API.Constants");
Msn.VE.API.Globals.vemapinstances = null;
Msn.VE.API.Globals.veonbegininvokeevent = null;
Msn.VE.API.Globals.veonendinvokeevent = null;
Msn.VE.API.Globals.vefindresultsnpanel = null;
Msn.VE.API.Globals.language = "en";
Msn.VE.API.Globals.locale = "en-us";
Msn.VE.API.Globals.vecurrentversion = "1.3.20070327220207.22";
Msn.VE.API.Globals.vecurrentdomain = "http://local.live.com";
Msn.VE.API.Globals.veanalyticsenabled = "True";
Msn.VE.API.Globals.veomnitureaccount = "msnportalearth";
Msn.VE.API.Globals.vedebug = false;
Msn.VE.API.Globals.analyticsInitialized = false;
var VE_MapDispatch_SymbolLib = null;
Msn.VE.API.Constants.imageryurl = Msn.VE.API.Globals.vecurrentdomain + "/imagery.ashx";
Msn.VE.API.Constants.iconurl = Msn.VE.API.Globals.vecurrentdomain + "/i/bin/" + Msn.VE.API.Globals.vecurrentversion + "/pins/poi_usergenerated.gif";
Msn.VE.API.Constants.mapcontroljs = Msn.VE.API.Globals.vecurrentdomain + "/mapcontrol.ashx";
Msn.VE.API.Constants.searchservice = Msn.VE.API.Globals.vecurrentdomain + "/search.ashx";
Msn.VE.API.Constants.directionsservice = Msn.VE.API.Globals.vecurrentdomain + "/directions.ashx";
Msn.VE.API.Constants.obliquecalcservice = Msn.VE.API.Globals.vecurrentdomain + "/" + "ElevatedLoc.ashx";
Msn.VE.API.Constants.collectionservice = Msn.VE.API.Globals.vecurrentdomain + "/GeoCommunity.aspx";
Msn.VE.API.Constants.atlascompatjs = Msn.VE.API.Globals.vecurrentdomain + "/js/atlascompat.js";
Msn.VE.API.Constants.stylesheet = Msn.VE.API.Globals.vecurrentdomain + "/css/bin/" + Msn.VE.API.Globals.vecurrentversion + "/" + Msn.VE.API.Globals.language + "/api.css";
Msn.VE.API.Constants.erostylesheet = Msn.VE.API.Globals.vecurrentdomain + "/css/bin/" + Msn.VE.API.Globals.vecurrentversion + "/" + Msn.VE.API.Globals.language + "/ero.css";
Msn.VE.API.Constants.vedirectionsstarticon = Msn.VE.API.Globals.vecurrentdomain + "/i/bin/" + Msn.VE.API.Globals.vecurrentversion + "/pins/mapicon_start.gif";
Msn.VE.API.Constants.vedirectionsendicon = Msn.VE.API.Globals.vecurrentdomain + "/i/bin/" + Msn.VE.API.Globals.vecurrentversion + "/pins/mapicon_end.gif";
Msn.VE.API.Constants.vedirectionsstepicon = Msn.VE.API.Globals.vecurrentdomain + "/i/bin/" + Msn.VE.API.Globals.vecurrentversion + "/pins/RedCircle%1.gif";
Msn.VE.API.Constants.trafficstylesheet = Msn.VE.API.Globals.vecurrentdomain + "/css/bin/" + Msn.VE.API.Globals.vecurrentversion + "/" + Msn.VE.API.Globals.language + "/Traffic.css";
Msn.VE.API.Constants.trafficiconurl = Msn.VE.API.Globals.vecurrentdomain + "/i/bin/" + Msn.VE.API.Globals.vecurrentversion + "/Traffic/Traffic%1.gif";
Msn.VE.API.Constants.spacerurl = Msn.VE.API.Globals.vecurrentdomain + "/i/bin/" + Msn.VE.API.Globals.vecurrentversion + "/spacer.gif";
Msn.VE.API.Constants.mapguid = "mapguid";
Msn.VE.API.Constants.rim = "rim";
Msn.VE.API.Constants.rimargs = "rimargs";
Msn.VE.API.Constants.contextid = "contextid";
Msn.VE.API.Constants.clienttoken = "ct";
Msn.VE.API.Constants.market = "mkt";
Msn.VE.API.Globals.vemapmode = Msn.VE.MapActionMode.Mode2D;
Msn.VE.API.Globals.vemapheight = 400;
Msn.VE.API.Globals.vemapwidth = 600;
Msn.VE.API.Globals.vemapzoom = 4;
Msn.VE.API.Globals.vemaplatitude = 43.75;
Msn.VE.API.Globals.vemaplongitude = -99.71;
Msn.VE.API.Globals.vemapstyle = "r";
Msn.VE.API.Globals.vemaxzoom = 26;
Msn.VE.API.Globals.vetilesize = 256;
Msn.VE.API.Globals.vepushpinpanelzIndex = 999;
Msn.VE.API.Globals.vemessagepanelheight = 75;
Msn.VE.API.Globals.vemessagepanelzIndex = 99;
Msn.VE.API.Globals.veplacelistpanelheight = 200;
Msn.VE.API.Globals.veplacelistpanelwidth = 350;
Msn.VE.API.Globals.veplacelistpanelzIndex = 300;
Msn.VE.API.Globals.vefindresultsnpanelwidth = 200;
Msn.VE.API.Globals.vefindresultsnpanelzIndex = 99;
Msn.VE.API.Globals.vefindresultsnpanelcolor = "blue";
Msn.VE.API.Globals.veiscommercialcontrol = false;
Msn.VE.API.Globals.veobliqueMode = null;
Msn.VE.API.Globals.vefindnumresultsdefault = 10;
Msn.VE.API.Globals.vefindnumresultsmin = 1;
Msn.VE.API.Globals.vefindnumresultsmax = 20;
Msn.VE.API.Globals.Dispose = function () {Msn.VE.API.Globals.veonbegininvokeevent = null;Msn.VE.API.Globals.veonendinvokeevent = null;Msn.VE.API.Globals.vefindresultsnpanel = null;};
Msn.VE.API.Globals.PosX = function (a) {var b = 0;if (!a) {var a = window.event;}if (a.pageX) {b = a.pageX;} else if (a.clientX) {b = a.clientX + document.body.scrollLeft;}return b;};
Msn.VE.API.Globals.PosY = function (a) {var b = 0;if (!a) {var a = window.event;}if (a.pageY) {b = a.pageY;} else if (a.clientY) {b = a.clientY + document.body.scrollTop;}return b;};

function VE_Help() {
}

_VERegisterNamespaces("Msn.VE.Constants.Css");
var MSVE_header = document.getElementsByTagName("body")[0], VE_ContextMenu = null;
s_account = Msn.VE.API.Globals.veomnitureaccount;

function MVC_Init_AbstractView_Shared() {
    Msn.MVC.AbstractView.prototype.GetMoveMenuOptionAsHtml = function (a) {return a;};
}


function MVC_Init_View3D_Shared() {
    Msn.MVC.View3D.prototype.GetMoveMenuOptionAsHtml = function (d, c) {var e = c.GetPrimitiveCount();for (var a = 0; a < e; a++) {var b = c.GetPrimitive(a).type;if (b == VEShapeType.Polyline || b == VEShapeType.Polygon) {return "";}}return d;};
}


function MVC_Init_ViewFacade_Shared() {
    Msn.MVC.ViewFacade.prototype.GetMoveMenuOptionAsHtml = function (a, b) {if (this._curMvcView == null) {return "";}return this._curMvcView.GetMoveMenuOptionAsHtml(a, b);};
}


function VE_SelectItem(b, a) {
    this.data = b;
    this.description = a;
}

VE_SelectItem.prototype.toString = function () {return this.description;};

function VE_Select(h, l, k, j) {
    this.isVisible = false;
    var b = [], a = document.createElement("div");
    a.setAttribute("id", h);
    this.id = h;
    var v = h, d = this, c = -1, r = k ? k : "", m = l ? l : "", p = j ? j : "", e = "";

    function y(d) {
        if (!(d instanceof VE_SelectItem)) {
            d = new VE_SelectItem(d, d.toString());
        }
        b.push(d);
        var c = document.createElement("div");
        c.setAttribute("id", v + "_" + (b.length - 1));
        c.onclick = w;
        c.onmouseover = q;
        c.onmouseout = s;
        c.innerHTML = d.description;
        a.appendChild(c);
    }


    function x() {
        return b.length;
    }


    function u() {
        return a;
    }


    function w(e) {
        var c = GetTarget(e), a = f(c);
        i(a);
        if (d.OnClick) {
            d.OnClick(a, b[a]);
        }
        if (d.OnSelect) {
            d.OnSelect(a, b[a]);
        }
    }


    function q(g) {
        var a = GetTarget(g), c = f(a);
        e = a.className;
        a.className = p;
        if (d.OnMouseOver) {
            d.OnMouseOver(c, b[c]);
        }
    }


    function s(g) {
        var a = GetTarget(g), c = f(a);
        a.className = e;
        if (d.OnMouseOut) {
            d.OnMouseOut(c, b[c]);
        }
    }


    function i(d) {
        if (d >= 0 && d < b.length) {
            var f = g();
            if (f >= 0) {
                a.childNodes[f].className = m;
            }
            c = d;
            a.childNodes[d].className = r;
            e = a.childNodes[d].className;
        } else {
            var f = g();
            if (f >= 0) {
                a.childNodes[f].className = m;
            }
            c = -1;
        }
    }


    function g() {
        return c;
    }


    function o() {
        if (c >= 0 && c < b.length) {
            return b[c];
        }
        return null;
    }


    function n(d) {
        if (d < 0 || d >= b.length) {
            return;
        }
        if (d < c) {
            c -= 1;
        } else if (d == c) {
            c = -1;
        }
        b.splice(d, 1);
        a.removeChild(a.childNodes[d]);
    }


    function f(c) {
        for (var b = 0; b < a.childNodes.length; ++b) {
            if (c == a.childNodes[b]) {
                return b;
            }
        }
        return -1;
    }


    function t() {
        while (b.length > 0) {
            b.pop();
        }
        while (a.childNodes.length > 0) {
            a.removeChild(a.lastChild);
        }
        c = -1;
    }


    function A() {
        a.style.display = "block";
        this.isVisible = true;
    }


    function z() {
        a.style.display = "none";
        this.isVisible = false;
    }

    this.OnClick = null;
    this.GetCount = x;
    this.GetElement = u;
    this.GetSelectedIndex = g;
    this.GetSelectedItem = o;
    this.SelectItemAtIndex = i;
    this.OnSelect = null;
    this.AddItem = y;
    this.OnMouseOver = null;
    this.OnSelect = null;
    this.OnMouseOut = null;
    this.ClearItems = t;
    this.RemoveItemAtIndex = n;
    this.Show = A;
    this.Hide = z;
}


function DecodeHtml(a) {
    var c = "";
    if (typeof a == "string" && a.length > 0) {
        var b = document.createElement("span");
        b.innerHTML = a;
        c = b.firstChild.nodeValue;
        b = null;
    }
    return c;
}


function OutputEncoder_URLEncodeUTF8(e) {
    if (e == null) {
        return "";
    }
    var d = ["%00", "%01", "%02", "%03", "%04", "%05", "%06", "%07", "%08", "%09", "%0a", "%0b", "%0c", "%0d", "%0e", "%0f", "%10", "%11", "%12", "%13", "%14", "%15", "%16", "%17", "%18", "%19", "%1a", "%1b", "%1c", "%1d", "%1e", "%1f", "%20", "%21", "%22", "%23", "%24", "%25", "%26", "%27", "%28", "%29", "%2a", "%2b", "%2c", "%2d", "%2e", "%2f", "%30", "%31", "%32", "%33", "%34", "%35", "%36", "%37", "%38", "%39", "%3a", "%3b", "%3c", "%3d", "%3e", "%3f", "%40", "%41", "%42", "%43", "%44", "%45", "%46", "%47", "%48", "%49", "%4a", "%4b", "%4c", "%4d", "%4e", "%4f", "%50", "%51", "%52", "%53", "%54", "%55", "%56", "%57", "%58", "%59", "%5a", "%5b", "%5c", "%5d", "%5e", "%5f", "%60", "%61", "%62", "%63", "%64", "%65", "%66", "%67", "%68", "%69", "%6a", "%6b", "%6c", "%6d", "%6e", "%6f", "%70", "%71", "%72", "%73", "%74", "%75", "%76", "%77", "%78", "%79", "%7a", "%7b", "%7c", "%7d", "%7e", "%7f", "%80", "%81", "%82", "%83", "%84", "%85", "%86", "%87", "%88", "%89", "%8a", "%8b", "%8c", "%8d", "%8e", "%8f", "%90", "%91", "%92", "%93", "%94", "%95", "%96", "%97", "%98", "%99", "%9a", "%9b", "%9c", "%9d", "%9e", "%9f", "%a0", "%a1", "%a2", "%a3", "%a4", "%a5", "%a6", "%a7", "%a8", "%a9", "%aa", "%ab", "%ac", "%ad", "%ae", "%af", "%b0", "%b1", "%b2", "%b3", "%b4", "%b5", "%b6", "%b7", "%b8", "%b9", "%ba", "%bb", "%bc", "%bd", "%be", "%bf", "%c0", "%c1", "%c2", "%c3", "%c4", "%c5", "%c6", "%c7", "%c8", "%c9", "%ca", "%cb", "%cc", "%cd", "%ce", "%cf", "%d0", "%d1", "%d2", "%d3", "%d4", "%d5", "%d6", "%d7", "%d8", "%d9", "%da", "%db", "%dc", "%dd", "%de", "%df", "%e0", "%e1", "%e2", "%e3", "%e4", "%e5", "%e6", "%e7", "%e8", "%e9", "%ea", "%eb", "%ec", "%ed", "%ee", "%ef", "%f0", "%f1", "%f2", "%f3", "%f4", "%f5", "%f6", "%f7", "%f8", "%f9", "%fa", "%fb", "%fc", "%fd", "%fe", "%ff"], b, a = [], g = e.length;
    for (var f = 0; f < g; f++) {
        var c = e.charCodeAt(f), b = e.charAt(f);
        if ("A" <= b && b <= "Z") {
            a = a + b;
        } else if ("a" <= b && b <= "z") {
            a = a + b;
        } else if ("0" <= b && b <= "9") {
            a = a + b;
        } else if (b == " ") {
            a = a + "+";
        } else if (b == "-" ||
            b == "_" ||
            b == "." ||
            b == "!" ||
            b == "~" || b == "*" || b == "'" || b == "(" || b == ")") {
            a = a + String.fromCharCode(c);
        } else if (c <= 127) {
            a = a + d[c];
        } else if (c <= 2047) {
            a = a + d[192 | c >> 6];
            a = a + d[128 | c & 63];
        } else {
            a = a + d[224 | c >> 12];
            a = a + d[128 | c >> 6 & 63];
            a = a + d[128 | c & 63];
        }
    }
    return a;
}


function OutputEncoder_URLEncodeEscapeUTF8(e) {
    if (e == null) {
        return "";
    }
    var d = ["00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "0a", "0b", "0c", "0d", "0e", "0f", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "1a", "1b", "1c", "1d", "1e", "1f", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "2a", "2b", "2c", "2d", "2e", "2f", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "3a", "3b", "3c", "3d", "3e", "3f", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "4a", "4b", "4c", "4d", "4e", "4f", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "5a", "5b", "5c", "5d", "5e", "5f", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "6a", "6b", "6c", "6d", "6e", "6f", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "7a", "7b", "7c", "7d", "7e", "7f", "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "8a", "8b", "8c", "8d", "8e", "8f", "90", "91", "92", "93", "94", "95", "96", "97", "98", "99", "9a", "9b", "9c", "9d", "9e", "9f", "a0", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "aa", "ab", "ac", "ad", "ae", "af", "b0", "b1", "b2", "b3", "b4", "b5", "b6", "b7", "b8", "b9", "ba", "bb", "bc", "bd", "be", "bf", "c0", "c1", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9", "ca", "cb", "cc", "cd", "ce", "cf", "d0", "d1", "d2", "d3", "d4", "d5", "d6", "d7", "d8", "d9", "da", "db", "dc", "dd", "de", "df", "e0", "e1", "e2", "e3", "e4", "e5", "e6", "e7", "e8", "e9", "ea", "eb", "ec", "ed", "ee", "ef", "f0", "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "fa", "fb", "fc", "fd", "fe", "ff"], b, a = [], g = e.length;
    for (var f = 0; f < g; f++) {
        var c = e.charCodeAt(f), b = e.charAt(f);
        if ("A" <= b && b <= "Z") {
            a = a + b;
        } else if ("a" <= b && b <= "z") {
            a = a + b;
        } else if ("0" <= b && b <= "9") {
            a = a + b;
        } else if (b == " ") {
            a = a + "+";
        } else if (b == "-" ||
            b == "_" ||
            b == "." ||
            b == "!" ||
            b == "~" || b == "*" || b == "'" || b == "(" || b == ")") {
            a = a + String.fromCharCode(c);
        } else if (c <= 127) {
            a = a + "%" + d[c];
        } else if (c <= 2047) {
            a = a + "%25" + d[192 | c >> 6];
            a = a + "%25" + d[128 | c & 63];
        } else {
            a = a + "%25" + d[224 | c >> 12];
            a = a + "%25" + d[128 | c >> 6 & 63];
            a = a + "%25" + d[128 | c & 63];
        }
    }
    return a;
}


function OutputEncoder_EncodeHtml(c) {
    var a, b = "";
    if (c == null) {
        return "";
    }
    for (var d = 0; d < c.length; d++) {
        a = c.charCodeAt(d);
        if (a > 96 && a < 123 ||
            a > 64 && a < 91 ||
            a == 32 ||
            a > 47 && a < 58 ||
            a == 46 || a == 44 || a == 45 || a == 95) {
            b = b + String.fromCharCode(a);
        } else {
            b = b + "&#" + a + ";";
        }
    }
    return b;
}


function OutputEncoder_EncodeHtmlAttribute(c) {
    var a, b = "";
    if (c == null) {
        return "";
    }
    for (var d = 0; d < c.length; d++) {
        a = c.charCodeAt(d);
        if (a > 96 && a < 123 ||
            a > 64 && a < 91 ||
            a > 47 && a < 58 ||
            a == 46 || a == 44 || a == 45 || a == 95) {
            b = b + String.fromCharCode(a);
        } else {
            b = b + "&#" + a + ";";
        }
    }
    return b;
}


function OutputEncoder_EncodeXml(a) {
    return OutputEncoder_EncodeHtml(a);
}


function OutputEncoder_EncodeXmlAttribute(a) {
    return OutputEncoder_EncodeHtmlAttribute(a);
}


function OutputEncoder_EncodeJs(c) {
    var a, b = "";
    if (c == null) {
        return "";
    }
    for (var d = 0; d < c.length; d++) {
        a = c.charCodeAt(d);
        if (a > 96 && a < 123 ||
            a > 64 && a < 91 ||
            a == 32 ||
            a > 47 && a < 58 ||
            a == 46 || a == 44 || a == 45 || a == 95) {
            b = b + String.fromCharCode(a);
        } else if (a > 127) {
            b = b + "\\u" + OutputEncoder_TwoByteHex(a);
        } else {
            b = b + "\\x" + OutputEncoder_SingleByteHex(a);
        }
    }
    return "'" + b + "'";
}


function OutputEncoder_EncodeVbs(d) {
    var b, a = "", c = false;
    if (d == null) {
        return "";
    }
    for (var e = 0; e < d.length; e++) {
        b = d.charCodeAt(e);
        if (b > 96 && b < 123 ||
            b > 64 && b < 91 ||
            b == 32 ||
            b > 47 && b < 58 ||
            b == 46 || b == 44 || b == 45 || b == 95) {
            if (!c) {
                a = a + "&\"";
                c = true;
            }
            a = a + String.fromCharCode(b);
        } else {
            if (c) {
                a = a + "\"";
                c = false;
            }
            a = a + "&chrw(" + b + ")";
        }
    }
    if (a.charAt(0) == "&") {
        a = a.substring(1);
    }
    if (a.length == 0) {
        a = "\"\"";
    }
    if (c) {
        a = a + "\"";
    }
    return a;
}


function OutputEncoder_AsUrl(a) {
    if (a == null) {
        return "";
    }
    if (a.search(/^(?:http|https|ftp):\/\/[a-zA-Z0-9\.\-]+(?:\:\d{1,5})?(?:[A-Za-z0-9\.\;\:\@\&\=\+\$\,\?\/]|%u[0-9A-Fa-f]{4}|%[0-9A-Fa-f]{2})*$/i)) {
        throw "Unsanitized value passed to AsUrl";
    }
    return a;
}


function OutputEncoder_QualifyUrl(a) {
    if (a == null) {
        return "";
    }
    if (a.search(/^(?:http|https|ftp):\/\//i)) {
        if (document.location.protocol == "HTTPS") {
            return "https://" + document.location.hostname + OutputEncoder_QualifyUrl_MakePath(a);
        } else {
            return "http://" + document.location.hostname + OutputEncoder_QualifyUrl_MakePath(a);
        }
    } else {
        return a;
    }
}


function OutputEncoder_QualifyUrl_MakePath(a) {
    if (a == null) {
        return "";
    }
    if (!a.search(/^[\/\\]/)) {
        return a;
    }
    var b = /^(\/(?:.*\/|))(?:[^\/\\]*\.\w+|\w*)$/;
    if (!document.location.pathname.search(b)) {
        var c = b.exec(document.location.pathname);
        return c[1] + a;
    }
    return "/" + a;
}


function OutputEncoder_AsNumeric(a) {
    if (a == null) {
        return "";
    }
    if (isNaN(parseFloat(a))) {
        throw "IOSec.AsNumeric(): Error input [" + a + "] not a valid number.";
    }
    return a;
}


function OutputEncode_TruncateUrlSafe(a, b, e) {
    if (a.length <= b) {
        return a;
    }
    var d = "";
    if (e && e.length > 0) {
        d = OutputEncoder_EncodeUrl(e);
        b -= d.length;
    }
    var a = a.substring(0, b);
    for (var c = 1; c < 6; c++) {
        if (a.charAt(b - c) == "%") {
            a = a.substring(0, b - c);
            break;
        }
    }
    return a + d;
}


function OutputEncode_EncodeUrlDelims(f, c) {
    if (!f) {
        return c;
    }
    var a, h, b = "";
    for (var d = 0; d < c.length; d++) {
        a = c.charCodeAt(d);
        if (37 == a) {
            b = b + "%" + OutputEncoder_SingleByteHex(a);
            continue;
        }
        var e = c.charAt(d);
        for (var g = 0; g < f.length; g++) {
            h = f.charCodeAt(g);
            if (h == a) {
                if (a > 127) {
                    e = "%u" + OutputEncoder_TwoByteHex(a);
                } else {
                    e = "%" + OutputEncoder_SingleByteHex(a);
                }
                break;
            }
        }
        b += e;
    }
    return b;
}


function OutputEncoder_EncodeUrl(c) {
    if (c == null) {
        return "";
    }
    var a, b = "";
    for (var d = 0; d < c.length; d++) {
        a = c.charCodeAt(d);
        if (a > 96 && a < 123 ||
            a > 64 && a < 91 ||
            a > 47 && a < 58 || a == 46 || a == 45 || a == 95) {
            b = b + String.fromCharCode(a);
        } else if (a > 127) {
            b = b + "%u" + OutputEncoder_TwoByteHex(a);
        } else {
            b = b + "%" + OutputEncoder_SingleByteHex(a);
        }
    }
    return b;
}


function OutputEncoder_SingleByteHex(b) {
    if (b == null) {
        return "";
    }
    var a = b.toString(16);
    for (var c = a.length; c < 2; c++) {
        a = "0" + a;
    }
    return a;
}


function OutputEncoder_TwoByteHex(b) {
    if (b == null) {
        return "";
    }
    var a = b.toString(16);
    for (var c = a.length; c < 4; c++) {
        a = "0" + a;
    }
    return a;
}


function GetValidatedUrl(a) {
    if (a == null || a == "undefined" || a.length <= 0) {
        return "";
    }
    try {
        a = unescape(a);
        a = a.replace(/\|/g, " ").replace(/\^/g, " ").replace(/^\s+/g, "").replace(/\s+$/g, "");
        var b = new RegExp(/(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/);
        if (a.match(b)) {
            return a;
        } else {
            return "";
        }
    } catch (c) {
        return "";
    }
}


function OutputEncoder() {
    this.GetValidatedUrl = GetValidatedUrl;
    this.EncodeHtml = OutputEncoder_EncodeHtml;
    this.EncodeHtmlAttribute = OutputEncoder_EncodeHtmlAttribute;
    this.EncodeXml = OutputEncoder_EncodeXml;
    this.EncodeXmlAttribute = OutputEncoder_EncodeXmlAttribute;
    this.EncodeJs = OutputEncoder_EncodeJs;
    this.EncodeVbs = OutputEncoder_EncodeVbs;
    this.AsNumeric = OutputEncoder_AsNumeric;
    this.EncodeUrl = OutputEncoder_EncodeUrl;
    this.EncodeUrlDelims = OutputEncode_EncodeUrlDelims;
    this.TruncateUrlSafe = OutputEncode_TruncateUrlSafe;
    this.SingleByteHex = OutputEncoder_SingleByteHex;
    this.TwoByteHex = OutputEncoder_TwoByteHex;
    this.AsUrl = OutputEncoder_AsUrl;
    this.QualifyUrl = OutputEncoder_QualifyUrl;
    this.EncodeUrlUTF8 = OutputEncoder_URLEncodeUTF8;
    this.EncodeUrlEscapeUTF8 = OutputEncoder_URLEncodeEscapeUTF8;
    this.DecodeHtml = DecodeHtml;
}

var IOSec = new OutputEncoder;

function VE_Panel(c, m, n, k, i, f, d, j, l, h, o, g, e) {
    var a = this;
    this.index = 0;
    this.x = m;
    this.y = n;
    this.width = k;
    this.height = i;
    this.dynamicHeightMax = 600;
    this.color = f;
    this.sPanel = null;
    this.toolbarHeight = 20;
    this.footerHeight = 20;
    this.min = false;
    this.visible = true;
    this.onTitleClick = null;
    this.onCloseClick = null;
    this.onMaximize = null;
    this.onMinimize = null;
    var b = VE_Panel._CreateElement("div", c, "VE_Panel_el", d);
    this.el = b;
    this.titleDisabled = false;
    this.title = document.createElement("a");
    this.title.id = c + "_title";
    this.title.className = "VE_Panel_title";
    this.title.appendChild(document.createElement("span"));
    this.title.onclick = function (a) {VE_Panel._OnTitleClick(a);return false;};
    this.title.href = "#";
    b.appendChild(this.title);
    this.SetTitle(j);
    this.closeboxDisabled = false;
    this.cb = VE_Panel._CreateElement("a", c + "_cb", "VE_Panel_cb VE_Panel_cb_" + f, d + 1);
    this.cb.onclick = function (a) {VE_Panel._OnCloseClick(a);return false;};
    this.cb.onmouseover = function () {if (typeof Msn.VE.Css != "undefined") {Msn.VE.Css.Functions.addClass(a.title, "VE_Panel_title_hover");}};
    this.cb.onmouseout = function () {if (typeof Msn.VE.Css != "undefined") {Msn.VE.Css.Functions.removeClass(a.title, "VE_Panel_title_hover");}};
    this.cb.href = "#";
    this.cb.unselectable = "on";
    b.appendChild(this.cb);
    this.tb = VE_Panel._CreateElement("div", c + "_tb", "VE_Panel_tb VE_Panel_tb_" + f, d + 1);
    this.tb.unselectable = "on";
    b.appendChild(this.tb);
    this.body = VE_Panel._CreateElement("div", c + "_body", "VE_Panel_body", d + 1);
    this.body.innerHTML = l;
    b.appendChild(this.body);
    this.foot = VE_Panel._CreateElement("div", c + "_foot", "VE_Panel_foot VE_Panel_foot_" + f, d + 1);
    this.foot.innerHTML = h;
    this.foot.unselectable = "on";
    b.appendChild(this.foot);
    if (!g) {
        this.SetOpacity(90);
    }
    VE_Panel.panels.push(this);
    if (!e) {
        e = document.body;
    }
    e.appendChild(b);
    this.Destroy = function () {b.parentNode.removeChild(b);if (a.sPanel != null) {a.sPanel.Destroy();}if (b.shimElement) {b.shimElement.removeNode(true);b.shimElement = null;}var d = VE_Panel.panels;for (var c = 0; c < d.length; c++) {if (d[c] == a) {d.splice(c, 1);break;}}a.sPanel = null;a.tb = null;a.cb.onclick = a.cb.onmouseover = a.cb.onmouseout = null;a.cb = null;a.title.onclick = null;a.title = null;a.body = null;a.foot = null;a.onTitleClick = null;a.onCloseClick = null;a.onMaximize = null;b = a.el = null;a = null;e = null;};
}

VE_Panel.panels = [];
VE_Panel.shadowThickness = 3;
VE_Panel._CreateElement = function (d, e, b, c) {var a = document.createElement(d);a.id = e;a.className = b;a.style.zIndex = c;return a;};
VE_Panel._PositionElement = function (a, d, e, c, b) {a.style.top = e + "px";a.style.left = d + "px";a.style.width = c + "px";a.style.height = b + "px";};
VE_Panel.prototype.SetPosition = function (c, d, b, a) {this.x = c;this.y = d;this.width = b;this.height = a;if (map.IsModeEnabled(Msn.VE.MapActionMode.Mode3D)) {if (!MSVE_taskArea.contains(this)) {UpdateIFrameShim(this.el);}}};
VE_Panel.prototype.SetToolbarSize = function (toolbarHeight) {this.toolbarHeight = toolbarHeight;var d = eval(toolbarHeight) > 0 ? "block" : "none";this.tb.style.display = d;this.Resize();};
VE_Panel.prototype.SetFooterSize = function (footerHeight) {this.footerHeight = footerHeight;var d = eval(footerHeight) > 0 ? "block" : "none";this.foot.style.display = d;this.Resize();};
VE_Panel.prototype.Resize = function () {if (typeof MSVE_header == "undefined" || MSVE_header == "undefined" || MSVE_header == null || typeof MSVE_footer == "undefined" || MSVE_footer == "undefined" || MSVE_footer == null) {return;}var taskAreaHeight = document.body.clientHeight - (scopingBar_separator.offsetTop + scopingBar_separator.offsetHeight) - MSVE_footer.offsetHeight;if (document.all) {var css = MSVE_footer.currentStyle;if (css && typeof css != "undefined") {var strBottom = css.bottom;if (strBottom && typeof strBottom != "undefined") {var nBottom = Math.abs(parseInt(strBottom));taskAreaHeight += nBottom;}}}if (taskAreaHeight >= 0 && typeof taskAreaHeight == "number") {taskArea_transparency.style.height = taskAreaHeight + "px";taskArea_positioner.style.height = taskAreaHeight + "px";}if (this.el.id == "contextMenu" || this.el.id == "scratchpad" || this.el.id == "annotationPanel" || this.el.id == "annotationPopup" || this.el.id == "searchPopup" || this.el.id == "help") {if (this.height != "auto" && typeof this.height == "number") {this.el.style.height = eval(this.height) + "px";}if (this.width != "auto" && typeof this.width == "number") {this.el.style.width = eval(this.width) + "px";}if (this.x != "auto" && typeof this.x == "number") {this.el.style.left = eval(this.x) + "px";}if (this.y != "auto" && typeof this.y == "number") {this.el.style.top = eval(this.y) + "px";}} else {var count = MSVE_taskArea.getCount(), titleMargin = 3, titleHeight = this.title.offsetHeight + titleMargin, bodyHeight = taskArea_transparency.offsetHeight - titleHeight * count - this.tb.offsetHeight - this.foot.offsetHeight;if (bodyHeight >= 0 && typeof bodyHeight == "number") {this.body.style.height = bodyHeight + "px";}}if (this.el.shimElement) {ShowShim(this.el);}};
VE_Panel.prototype.SetHeightToFit = function () {var contentid = this.id + "_body_table", content = $ID(contentid);if (!content) {return false;}this.height = 0;var width = Math.max(eval(this.width), 100);if (content.offsetWidth > width - 14) {this.height += scrollbarWidth;}this.height += this.titleDisabled ? 14 : 35;this.height += this.toolbarHeight;this.height += content.offsetHeight;this.height += this.footerHeight;this.height = Math.min(this.dynamicHeightMax, this.height);};
VE_Panel.prototype.DisableClosebox = function () {if (this.closeboxDisabled) {return;}this.closeboxDisabled = true;this.el.removeChild(this.cb);};
VE_Panel.prototype.EnableClosebox = function () {if (!this.closeboxDisabled) {return;}this.closeboxDisabled = false;this.el.appendChild(this.cb);};
VE_Panel.prototype.DisableTitle = function () {if (this.titleDisabled) {return;}this.titleDisabled = true;this.el.removeChild(this.cb);this.el.removeChild(this.title);};
VE_Panel.prototype.EnableTitle = function () {if (!this.titleDisabled) {return;}this.titleDisabled = false;this.el.insertBefore(this.cb, this.tb);this.el.insertBefore(this.title, this.cb);};
VE_Panel.prototype.SetTitle = function (c) {var b = document.createTextNode(c), a = this.title.firstChild;if (a) {if (a.firstChild) {a.replaceChild(b, a.firstChild);} else {a.appendChild(b);}}};
VE_Panel.prototype.SetSPanel = function (c, a, b) {this.el.removeChild(this.title);this.el.removeChild(this.cb);this.el.removeChild(this.tb);this.el.removeChild(this.body);this.el.removeChild(this.foot);if (this.sPanel != null) {if (this.sPanel == b) {this.sPanel._CleanUp();} else {this.sPanel.Destroy();}}this.sPanel = b;this.el.innerHTML = c;this.title = $ID(a + "_title");this.cb = $ID(a + "_cb");this.tb = $ID(a + "_tb");this.body = $ID(a + "_body");this.foot = $ID(a + "_foot");if (this.cb != null) {this.cb.unselectable = "on";this.onCloseClick = function (b) {var a = b.srcPanel, c = MSVE_taskArea.getCurrent();a.Destroy();MSVE_taskArea.removeItem(a);};}if (this.tb != null) {this.tb.unselectable = "on";}if (this.foot != null) {this.foot.unselectable = "on";this.SetFooterSize(this.footerHeight);if (this.title != null) {this.title.onclick = function (a) {VE_Panel._OnTitleClick(a);return false;};this.Resize();}}};
VE_Panel.prototype.SetToolbar = function (a) {this.tb.innerHTML = a;};
VE_Panel.prototype.SetBody = function (a) {this.body.innerHTML = a;};
VE_Panel.prototype.SetDynamicBody = function (a) {this.body.innerHTML = "<table id=\"" + this.id + "_body_table\"><tr><td>" + a + "</td></tr></table>";};
VE_Panel.prototype.SetFooter = function (a) {this.foot.innerHTML = a;};
VE_Panel.prototype.SetOpacity = function (o) {if (o >= 100) {o = 99.99;}with (this.el.style) {filter = "alpha(opacity:" + o + ")";o *= 0.01;KHTMLOpacity = o;MozOpacity = o;opacity = o;}};
VE_Panel.prototype.SetColor = function (a) {this.color = a;this.title.className = "VE_Panel_title VE_Panel_title_" + a;this.foot.className = "VE_Panel_foot VE_Panel_foot_" + a;this.cb.className = "VE_Panel_cb VE_Panel_cb_" + a;};
VE_Panel.prototype.Minimize = function () {this.el.className = " VE_Panel_el_minimized";if (this.onMinimize) {this.onMinimize(this._CreateEvent());}};
VE_Panel.prototype.Maximize = function () {this.el.className = "VE_Panel_el";if (this.onMaximize) {this.onMaximize(this._CreateEvent());}this.Resize();};
VE_Panel.prototype.isMaximized = function () {return this.el.className == "VE_Panel_el";};
VE_Panel.prototype.Show = function () {this.el.style.display = "block";this.visible = true;if (!MSVE_taskArea.contains(this)) {mvcViewFacade.ShowShimIfSupported(this.el);}};
VE_Panel.prototype.Hide = function () {this.el.style.display = "none";this.visible = false;HideShim(this.el);};
VE_Panel.prototype.IsVisible = function () {return this.el.style.display != "none";};

function VE_PanelEvent(a) {
    this.srcPanel = a;
}

VE_Panel.prototype._CreateEvent = function () {return new VE_PanelEvent(this);};
VE_Panel._OnTitleClick = function (c) {if (!c) {c = window.event;}var d = GetTarget(c), b = VE_Panel.panels;for (var a = 0; a < b.length; a++) {if (b[a].title == d || b[a].title == d.parentNode) {if (b[a].onTitleClick) {b[a].onTitleClick(b[a]._CreateEvent());}return;}}};
VE_Panel._OnCloseClick = function (c) {if (!c) {c = window.event;}var d = GetTarget(c), b = VE_Panel.panels;for (var a = 0; a < b.length; a++) {if (b[a].cb == d) {if (b[a].onCloseClick) {b[a].onCloseClick(b[a]._CreateEvent());}return;}}};

function Ad(h, j, a, e, b, c, d, i, g, f, k) {
    this.title = h;
    this.url = j;
    this.description = a;
    this.latitude = e;
    this.longitude = b;
    this.address1 = c;
    this.address2 = d;
    this.city = i;
    this.state = g;
    this.country = f;
    this.zip = k;
}

Ad.prototype.ToHtml = function () {var a = "<li>" + "<a href = \"" + this.url + "\" target = \"_blank\">" + IOSec.EncodeHtml(this.title) + "</a>" + "$AdDescription$" + "</li>";if (this.description && this.description.length > 0) {a = a.replace("$AdDescription$", "<p>" + IOSec.EncodeHtml(this.description) + "</p>");}return a;};
Ad.prototype.HasAddress = function () {return this.address1.length > 0 && this.city.length > 0 && this.state.length > 0 && this.zip.length > 0;};
Ad.prototype.GetAdDescription = function () {var a = this.description;if (this.HasAddress()) {a = this.address1 + ", " + this.city + ", " + this.state + " " + this.zip;}return a;};
Msn.VE.DirectionsDecoder = function () {var b = 4, c = 1000000;
function d(a, c, m, l) {if (!a || a.length < c) {return [];}var k = a.length - a.length % c, i = [], f = false, b = 0, j = c - 1;for (var d = 0; d < k; d++) {var e = a.charCodeAt(d), h = d % c;if (l && h == 0) {f = e & 128;e &= 127;}b |= e;if (h == j) {var g = b / m;i.push(f ? - g : g);b = 0;f = false;} else {b <<= 8;}}return i;}

function a(a) {return d(a, b, c, true);}
this.DecodeCoordinatesString = a;};
var HelpHistory = [];

function VE_Help() {
}

VE_Help.helpZIndex = 31;
VE_Help.introZIndex = 31;
VE_Help.introPanel = null;
VE_Help.helpPanel = null;
VE_Help.margins = 110;
VE_Help.LiveHelp = new (function () {this.Keyword = "keyword";this.Search = "search";this.Topic = "topic";});
VE_Help.CreateHelpPanel = function () {var b = "<iframe id=\"helpFrame\" src=\"about:blank\" width=\"100%\" height=\"100%\" allowtransparency=\"true\" frameborder=\"0\"></iframe>", a = new VE_Panel("help", 220, 160, windowWidth <= 430 ? 300 : windowWidth - 430, windowHeight <= 220 ? 200 : windowHeight - 220, "blue", VE_Help.helpZIndex, L_Help_Text, b, "");a.body.className = "VE_Panel_body_help";a.Hide();a.SetToolbarSize(0);a.SetFooterSize(0);a.SetOpacity(95);a.onCloseClick = function () {VE_Help.DisablePreventLayer();VE_Help.ClosePanel();};VE_Help.helpPanel = a;};
VE_Help.EnablePreventLayer = function () {var a = $ID("__preventLayer__");if (!a) {a = document.createElement("div");}a.id = "__preventLayer__";a.className = "preventLayer";document.body.appendChild(a);};
VE_Help.DisablePreventLayer = function () {var a = $ID("__preventLayer__");if (a) {document.body.removeChild(a);}};
VE_Help.EnableDrawingPreventLayer = function () {var e = $ID("msve_Header");if (e) {var d = $ID("__preventLayerHeader__");if (!d) {d = document.createElement("div");}d.id = "__preventLayerHeader__";d.className = "preventLayer";d.style.left = e.clientLeft;d.style.top = e.clientTop;d.style.width = e.clientWidth;d.style.height = e.clientHeight;document.body.appendChild(d);}var f = $ID("msve_MapActionBar_Menu");if (e && f) {var a = $ID("__preventLayerActionBar__");if (!a) {a = document.createElement("div");}a.id = "__preventLayerActionBar__";a.className = "preventLayer";var i = findPosX(f);a.style.left = i;a.style.top = findPosY(f);a.style.width = f.clientWidth;a.style.height = f.clientHeight + 6;document.body.appendChild(a);var h = $ID("msve_TaskArea_positioner");if (h && i > 0) {var b = $ID("__preventLayerTaskArea__");if (!b) {b = document.createElement("div");}b.id = "__preventLayerTaskArea__";b.className = "preventLayer";b.style.left = 0;b.style.top = a.style.top;b.style.width = a.style.left;b.style.height = h.clientHeight;document.body.appendChild(b);}}var g = $ID("msve_Footer");if (g) {var c = $ID("__preventLayerFooter__");if (!c) {c = document.createElement("div");}c.id = "__preventLayerFooter__";c.className = "preventLayer";c.style.left = 0;c.style.top = GetWindowHeight() - g.clientHeight;c.style.width = g.clientWidth;c.style.height = g.clientHeight;document.body.appendChild(c);}};
VE_Help.DisableDrawingPreventLayer = function () {var d = $ID("__preventLayerHeader__");if (d) {document.body.removeChild(d);}var b = $ID("__preventLayerTaskArea__");if (b) {document.body.removeChild(b);}var a = $ID("__preventLayerActionBar__");if (a) {document.body.removeChild(a);}var c = $ID("__preventLayerFooter__");if (c) {document.body.removeChild(c);}};

function findPosX(a) {
    var b = 0;
    if (a.offsetParent) {
        while (a.offsetParent) {
            b += a.offsetLeft;
            a = a.offsetParent;
        }
    } else if (a.x) {
        b += a.x;
    }
    return b;
}


function findPosY(a) {
    var b = 0;
    if (a.offsetParent) {
        while (a.offsetParent) {
            b += a.offsetTop;
            a = a.offsetParent;
        }
    } else if (a.y) {
        b += a.y;
    }
    return b;
}

VE_Help.CreateIntroPanel = function () {var b = "";if (typeof window.welcomeUrl == "undefined" || window.welcomeUrl == "" || window.welcomeUrl == null) {b = "<div class = \"loading\">" + L_SearchLoading_Text + "</div>";} else {b = "<iframe id=\"introFrame\" src=" + window.welcomeUrl + " width=\"100%\" height=\"100%\" allowtransparency=\"true\" frameborder=\"0\"></iframe>";}var a = VE_Help.introPanel;if (!a) {a = new VE_Panel("intro", 0, 0, "auto", "auto", "welcomePanel", VE_Help.introZIndex, L_Welcome_Text, b, "", "", true, taskArea_data);a.el.className = "welcomePanel";a.body.className = "VE_Panel_body_help";if (typeof pseudoHover != "undefined") {pseudoHover(a.title);}a.SetToolbarSize(0);a.SetFooterSize(0);VE_Help.introPanel = a;MSVE_taskArea.addItem(a);}if (window.welcomeUrl) {a.SetBody(b);a.onTitleClick = function () {MSVE_taskArea.setCurrent(this);};a.onMaximize = function () {resetWhatBox();};a.onCloseClick = function () {MSVE_taskArea.removeItem(this);VE_Help.introPanel.Destroy();VE_Help.introPanel = null;};}};
VE_Help.Open = function (b, c) {VE_Help.EnablePreventLayer();VE_Help.helpPanel.Show();VE_Help.helpPanel.SetTitle(b);VE_Help.helpPanel.SetBody("<iframe id = \"helpFrame\" src = \"about:blank\" width = \"100%\" allowtransparency = \"true\" scrolling = \"auto\" frameborder = \"0\"></iframe>");var a = $ID("helpFrame");a.src = c;VE_Help.Redraw();};
VE_Help.OpenLiveHelp = function (b, a, c) {var g = "_live_help", f = 550, e = 575, i = (screen.availWidth - f) * 0.5, j = (screen.availHeight - e) * 0.5, h = "resizable=yes,top=" + j + ",width=" + f + ",height=" + e + ",left=" + i;if (typeof b == "undefined" || b == null || b == "") {b = liveLocalHelpProjectCode;}if (typeof a == "undefined" || a == null || a == "") {a = VE_Help.LiveHelp.Keyword;}if (typeof c == "undefined" || c == null || c == "") {c = "qaf";}var k = liveHelpUrl + "&project=" + b + "&querytype=" + a + "&query=" + c, d = window.open(k, g, h);if (d != null && typeof d == "object") {d.focus();}};
VE_Help.Redraw = function (d) {var a = VE_Help.helpPanel;if (!a) {return;}if (!d) {var f = taskArea_transparency ? taskArea_transparency.offsetWidth : 0, e = scratchPad ? scratchPad.getElement().offsetWidth : 0;if (document.body.clientWidth > 800) {var c = document.body.clientWidth - 2 * VE_Help.margins;} else {var c = document.body.clientWidth - 50, b = document.body.clientHeight - MSVE_header.offsetHeight - mapActionBar.offsetHeight - VE_Help.margins - 30;}if (c > 0) {a.width = c;}if (b > 0) {a.height = b;}}a.y = mapActionBar.offsetTop + mapActionBar.offsetHeight + 8;a.x = VE_Help.margins;a.Resize();};
VE_Help.CloseIntro = function () {if (VE_Help.introPanel) {VE_Help.introPanel.Hide();}};
VE_Help.OpenIntro = function () {if (!VE_Help.introPanel) {VE_Help.CreateIntroPanel();} else {MSVE_taskArea.setCurrent(VE_Help.introPanel);}toggleTaskArea(true);$VE_A.Log("VE | Welcome Pane", "Welcome");};
VE_Help.ClosePanel = function () {if (VE_Help.helpPanel) {VE_Help.helpPanel.Hide();VE_Help.DisablePreventLayer();}};
VE_Help.Destroy = function () {if (VE_Help.introPanel) {VE_Help.introPanel.Destroy();VE_Help.introPanel = null;}if (VE_Help.helpPanel) {VE_Help.helpPanel.Destroy();VE_Help.helpPanel = null;}};

function SanitizeHtmlString(a) {
    if (!a || typeof a != "string") {
        return a;
    }
    return IOSec.EncodeHtml(a);
}


function GetMousePosX(a) {
    var b = 0;
    if (a.pageX) {
        b = a.pageX;
    } else if (a.clientX) {
        b = a.clientX + document.body.scrollLeft;
    }
    return b;
}


function GetMousePosY(a) {
    var b = 0;
    if (a.pageY) {
        b = a.pageY;
    } else if (a.clientY) {
        b = a.clientY + document.body.scrollTop;
    }
    return b;
}


function GetTarget(b) {
    if (!b) {
        var b = window.event, a;
    }
    if (b.srcElement) {
        a = b.srcElement;
    } else if (b.target) {
        a = b.target;
    }
    if (a && a.nodeType == 3) {
        a = targ.parentNode;
    }
    return a;
}


function SelectText(a, c, d) {
    if (!a) {
        return;
    }
    if (a.createTextRange) {
        var b = a.createTextRange();
        b.moveStart("character", c);
        b.moveEnd("character", d);
        b.select();
    } else if (a.setSelectionRange) {
        a.setSelectionRange(c, d);
    }
}


function GetElementLeftPositionByID(a) {
    return GetElementLeftPosition($ID(a));
}


function GetElementLeftPosition(d, c) {
    var a = d, b = 0;
    while (a && a != c) {
        b += a.offsetLeft;
        a = a.offsetParent;
    }
    if (navigator.userAgent.indexOf("Mac") != -1 &&
        typeof document.body.leftMargin != "undefined") {
        b += document.body.leftMargin;
    }
    return b;
}


function GetElementTopPositionByID(a) {
    return GetElementTopPosition($ID(a));
}


function GetElementTopPosition(d, c) {
    var a = d, b = 0;
    while (a && a != c) {
        b += a.offsetTop;
        a = a.offsetParent;
    }
    if (navigator.userAgent.indexOf("Mac") != -1 &&
        typeof document.body.topMargin != "undefined") {
        b += document.body.topMargin;
    }
    return b;
}


function SelectedTextLength(a) {
    if (!a) {
        return 0;
    }
    if (a.document) {
        var b = a.document.selection.createRange();
        return b.text.length;
    } else {
        var c = a.selectionStart, d = a.selectionEnd;
        return d - c;
    }
}


function VEValidator() {
}

VEValidator.ValidateFloat = function (b, c) {var a = "";if (arguments != null && arguments.caller != null) {a = VEValidator.GetCaller(arguments.caller);}if (a == "") {a = "VEValidator.ValidateFloat";}if (b == null || b == "undefined") {throw new VEException(a, "err_invalidargument", L_invalidargument_text.replace("%1", c).replace("%2", "float"));}try {if (isNaN(parseFloat(b))) {throw new VEException(a, "err_invalidargument", L_invalidargument_text.replace("%1", c).replace("%2", "float"));}return true;} catch (d) {throw new VEException(a, "err_invalidargument", L_invalidargument_text.replace("%1", c).replace("%2", "float"));}};
VEValidator.ValidateInt = function (b, c) {var a = "";if (arguments != null && arguments.caller != null) {a = VEValidator.GetCaller(arguments.caller);}if (a == "") {a = "VEValidator.ValidateInt";}if (b == null || b == "undefined") {throw new VEException(a, "err_invalidargument", L_invalidargument_text.replace("%1", c).replace("%2", "int"));}try {if (isNaN(parseInt(b)) || parseFloat(b) != parseInt(b)) {throw new VEException(a, "err_invalidargument", L_invalidargument_text.replace("%1", c).replace("%2", "int"));}return true;} catch (d) {throw new VEException(a, "err_invalidargument", L_invalidargument_text.replace("%1", c).replace("%2", "int"));}};
VEValidator.ValidateNonNegativeInt = function (a, c) {var b = "";if (arguments != null && arguments.caller != null) {b = VEValidator.GetCaller(arguments.caller);}if (b == "") {b = "VEValidator.ValidateNonNegativeInt";}if (a == null || a == "undefined") {throw new VEException(b, "err_invalidargument", L_invalidnonnegativeint_text.replace("%1", c));}try {if (isNaN(parseInt(a)) || parseFloat(a) != parseInt(a) || parseInt(a) < 0) {throw new VEException(b, "err_invalidargument", L_invalidnonnegativeint_text.replace("%1", c));}return true;} catch (d) {throw new VEException(b, "err_invalidargument", L_invalidnonnegativeint_text.replace("%1", c));}};
VEValidator.ValidateFunction = function (b, c) {var a = "";if (arguments != null && arguments.caller != null) {a = VEValidator.GetCaller(arguments.caller);}if (a == "") {a = "VEValidator.ValidateFunction";}if (b == null || typeof b != "function") {throw new VEException(a, "err_invalidargument", L_invalidargument_text.replace("%1", c).replace("%2", "function"));}};
VEValidator.ValidateNonNull = function (b, c) {var a = "";if (arguments != null && arguments.caller != null) {a = VEValidator.GetCaller(arguments.caller);}if (a == "") {a = "VEValidator.ValidateNonNull";}if (b == null || b == "undefined") {throw new VEException(a, "err_invalidargument", L_invalidargument_text.replace("%1", c).replace("%2", "non null"));}};
VEValidator.ValidateBetween = function (b, e, d, c) {var a = "";if (arguments != null && arguments.caller != null) {a = VEValidator.GetCaller(arguments.caller);}if (a == "") {a = "VEValidator.ValidateBetween";}if (b < d || b > c) {throw new VEException(a, "err_invalidargument", L_invalidbetweenint_text.replace("%1", e).replace("%2", d).replace("%3", c));}};
VEValidator.ValidateBoolean = function (b, c) {var a = "";if (arguments != null && arguments.caller != null) {a = VEValidator.GetCaller(arguments.caller);}if (a == "") {a = "VEValidator.ValidateBoolean";}if (b != true && b != false) {throw new VEException(a, "err_invalidargument", L_invalidargument_text.replace("%1", c).replace("%2", "bool"));}};
VEValidator.ValidateMapStyle = function (a, c) {var b = "";if (arguments != null && arguments.caller != null) {b = VEValidator.GetCaller(arguments.caller);}if (b == "") {b = "VEValidator.ValidateMapStyle";}if (a == null || a == "undefined") {throw new VEException(b, "err_invalidargument", L_invalidargument_text.replace("%1", c).replace("%2", "MapStyle"));}if (a == "r" || a == "R" || a == "s" || a == "S" || a == "a" || a == "A" || a == "o" || a == "O" || a == "h" || a == "H") {return true;}throw new VEException(b, "err_invalidargument", L_invalidargument_text.replace("%1", c).replace("%2", "MapStyle"));};
VEValidator.ValidateMapMode = function (b, c) {var a = "";if (arguments != null && arguments.caller != null) {a = VEValidator.GetCaller(arguments.caller);}if (a = "") {a = "VEValidator.ValidateMapMode";}if (b == null || b == "undefined") {throw new VEException(a, "err_invalidargument", L_invalidargument_text.replace("%1", c).replace("%2", "MapMode"));}if (b == VEMapMode.Mode2D || b == VEMapMode.Mode3D) {return true;}throw new VEException(a, "err_invalidargument", L_invalidargument_text.replace("%1", c).replace("%2", "MapMode"));};
VEValidator.ValidateDistanceUnit = function (b, c) {var a = "";if (arguments != null && arguments.caller != null) {a = VEValidator.GetCaller(arguments.caller);}if (a == "") {a = "VEValidator.ValidateDistanceUnit";}if (b == null || b == "undefined") {throw new VEException(a, "err_invalidargument", L_invalidargument_text.replace("%1", c).replace("%2", "VEDistanceUnit"));}if (b == VEDistanceUnit.Miles || b == VEDistanceUnit.Kilometers) {return true;}throw new VEException(a, "err_invalidargument", L_invalidargument_text.replace("%1", c).replace("%2", "VEDistanceUnit"));};
VEValidator.ValidateMaxZoom = function (b, c) {var a = "";if (arguments != null && arguments.caller != null) {a = VEValidator.GetCaller(arguments.caller);}if (a == "") {a = "VEValidator.ValidateMaxZoom";}if (b == null || b == "undefined") {throw new VEException(a, "err_invalidargument", L_invalidargument_text.replace("%1", c).replace("%2", "ValidateMaxZoom"));}if (b <= Msn.VE.API.Globals.vemaxzoom) {return true;}throw new VEException(a, "err_invalidargument", L_invalidargument_text.replace("%1", c).replace("%2", "ValidateMaxZoom"));};
VEValidator.ValidateLayerType = function (a, c) {var b = "";if (arguments != null && arguments.caller != null) {b = VEValidator.GetCaller(arguments.caller);}if (b == "") {b = "VEValidator.ValidateLayerType";}if (a == null || a == "undefined") {throw new VEException(b, "err_invalidargument", L_invalidargument_text.replace("%1", c).replace("%2", "VEDataType"));}if (a == VEDataType.GeoRSS || a == VEDataType.VECollection || a == VEDataType.VETileSource) {return true;}throw new VEException(b, "err_invalidargument", L_invalidargument_text.replace("%1", c).replace("%2", "VEDataType"));};
VEValidator.ValidateDashboardSize = function (a, c) {var b = "";if (arguments != null && arguments.caller != null) {b = VEValidator.GetCaller(arguments.caller);}if (b == "") {b = "VEValidator.ValidateDashboardSize";}if (a == null || a == "undefined") {throw new VEException(b, "err_invalidargument", L_invalidargument_text.replace("%1", c).replace("%2", "VEDashboardSize"));}if (a == VEDashboardSize.Normal || a == VEDashboardSize.Small || a == VEDashboardSize.Tiny) {return true;}throw new VEException(b, "err_invalidargument", L_invalidargument_text.replace("%1", c).replace("%2", "VEDashboardSize"));};
VEValidator.ValidateMiniMapSize = function (b, c) {var a = "";if (arguments != null && arguments.caller != null) {a = VEValidator.GetCaller(arguments.caller);}if (a == "") {a = "VEValidator.ValidateMiniMapSize";}if (b == null || b == "undefined") {throw new VEException(a, "err_invalidargument", L_invalidargument_text.replace("%1", c).replace("%2", "VEMiniMapSize"));}if (b == VEMiniMapSize.Small || b == VEMiniMapSize.Large) {return true;}throw new VEException(a, "err_invalidargument", L_invalidargument_text.replace("%1", c).replace("%2", "VEMiniMapSize"));};
VEValidator.ValidateObject = function (b, c, e, d) {var a = "";if (arguments != null && arguments.caller != null) {a = VEValidator.GetCaller(arguments.caller);}if (a == "") {a = "VEValidator.ValidateObject";}if (b == null || b == "undefined") {throw new VEException(a, "err_invalidargument", L_invalidargument_text.replace("%1", c).replace("%2", "non null"));}if (!e.prototype.isPrototypeOf(b)) {throw new VEException(a, "err_invalidargument", L_invalidargument_text.replace("%1", c).replace("%2", d));}};
VEValidator.ValidateObjectArray = function (a, d, f, e) {var b = "";if (arguments != null && arguments.caller != null) {b = VEValidator.GetCaller(arguments.caller);}if (b == "") {b = "VEValidator.ValidateObject";}if (a == null || typeof a == "undefined" || a.length == null || typeof a.length == "undefined") {throw new VEException(b, "err_invalidargument", L_invalidargument_text.replace("%1", d).replace("%2", "array"));}for (var c = 0; c < a.length; ++c) {if (a[c] == null || typeof a[c] == "undefined" || !f.prototype.isPrototypeOf(a[c])) {throw new VEException(b, "err_invalidargument", L_invalidargument_text.replace("%1", d).replace("%2", e));}}};
VEValidator.GetCaller = function (b) {if (b != null || b != "") {try {var a = b.toString().match(/function (\w*)/)[1];} catch (c) {a = "";}if (a == null || a.length == 0) {return "";} else {return a;}} else {return "";}};

function VEPushpin(f, e, d, h, g, c, b, a) {
    VEValidator.ValidateNonNull(f, "pinId");
    VEValidator.ValidateNonNull(e, "veLatLong");
    var i = this;
    this.IsInLayer = false;
    this.ID = f;
    this.LatLong = e;
    this.Title = h;
    if (d == null || d == "undefined" || d.length == 0) {
        this.Iconurl = Msn.VE.API.Constants.iconurl;
    } else {
        this.Iconurl = d;
    }
    this.Details = g;
    if (c == null || c == "undefined" || c.length == 0) {
        this.IconStyle = "";
    } else {
        this.IconStyle = c;
    }
    if (b == null || b == "undefined" || b.length == 0) {
        this.TitleStyle = "VE_Pushpin_Popup_Title";
    } else {
        this.TitleStyle = b;
    }
    if (a == null || a == "undefined" || a.length == 0) {
        this.DetailsStyle = "VE_Pushpin_Popup_Body";
    } else {
        this.DetailsStyle = a;
    }
    if (window.ero == null || window.ero == "undefined") {
        window.ero = ERO.getInstance();
    }
}

VEPushpin.ShowDetailOnMouseOver = true;
VEPushpin.OnMouseOverCallback = null;
VEPushpin.prototype.Dispose = function () {this.DetailsStyle == null;this.TitleStyle = null;this.IconStyle = null;this.Details = null;this.IconUrl = null;this.Title = null;this.LatLong = null;this.ID = null;this.m_vemapcontrol = null;this.m_vemap = null;};
VEPushpin.Hide = function (a) {VEMap.ValidateState();if (window.ero != null) {if (a == "undefined" || a == null) {a = false;}window.ero.hide(a);}};
VEPushpin.GetEroContent = function (c, b, e, d) {var a = "<p>";if (c != null && c != "undefined" && c.length > 0) {a += "<div class=\"" + e + "\">" + unescape(c) + "</div>";}if (b != null && b != "undefined" && b.length > 0) {a += "<div class=\"" + d + "\">" + unescape(b) + "</div>";}if (!document.all && (c.length == 0 || b.length == 0)) {a += "<br/><br/>";}a += "</p>";return a;};
VEPushpin.Show = function (l, m, k, h, d, c, g, e) {var a = VEMap._GetMapFromGUID(l);if (a == null || a == "undefined") {return;}VEMap.ValidateState();var i = a.vemapcontrol.GetX(h) + a.GetLeft(), j = a.vemapcontrol.GetY(k) + a.GetTop();if (VEPushpin.ShowDetailOnMouseOver) {var b = $ID(m + "_" + a.GUID);if (b != null && b != "undefined") {window.ero.setBoundingArea(new Msn.VE.Geometry.Point(0, 0), new Msn.VE.Geometry.Point(document.body.clientWidth, document.body.clientHeight));var f = VEPushpin.GetEroContent(d, c, g, e);window.ero.setContent(f);window.ero.dockToElement(b);}}if (VEPushpin.OnMouseOverCallback != null) {VEPushpin.OnMouseOverCallback(i, j, d, unescape(c));}};
VEPushpin.Show3D = function (a, c, b, f, d) {if (VEPushpin.ShowDetailOnMouseOver) {var e = VEPushpin.GetEroContent(c, b, f, d);window.ero.setContent(e);ero.setGlitz(false, false, false, true);window.ero.dockToRect(a, null, -1);}if (VEPushpin.OnMouseOverCallback != null) {VEPushpin.OnMouseOverCallback(a.getP1().x, a.getP1().y, c, unescape(b));}};

function GetContent() {
    var g = this.ID + "_" + this.m_vemap.GUID, a = "<img class='" + this.IconStyle + "' src='" + this.Iconurl + "' id='" + g + "' ", f = Msn.VE.Environment.BrowserInfo;
    if (f.Type == Msn.VE.BrowserType.MSIE &&
        parseFloat(f.MajorVersion) < 7 &&
        this.Iconurl != null && this.Iconurl.search(/.gif$/) < 0) {
        a += "onload='this.onload=\"\";if(this.fileSize!=-1){this.style.width=this.width;this.style.height=this.height;this.src=\"" + Msn.VE.API.Constants.spacerurl + "\";this.style.filter=\"progid:DXImageTransform.Microsoft.AlphaImageLoader(src=\\\"" + this.Iconurl + "\\\", sizingMethod=\\\"scale\\\")\";}' ";
    }
    var e = this.Title != null &&
        this.Title != "undefined" && this.Title.length > 0, d = this.Details != null &&
        this.Details != "undefined" && this.Details.length > 0;
    if (e || d) {
        var b = "if (VEMap._GetMapFromGUID(" + this.m_vemap.GUID + ").FireEvent(", c = "))return;";
        a += " onmouseout='" + b + "\"onmouseout\"" + c + "VEPushpin.Hide();' ";
        a += " onmousedown='" + b + "\"onmousedown\"" + c + "VEPushpin.Hide(true);' ";
        a += " onmouseover='" + b + "\"onmouseover\"" + c + "VEPushpin.Show(\"" + this.m_vemap.GUID + "\",\"" + this.ID + "\"," + this.LatLong.Latitude + "," + this.LatLong.Longitude;
        if (e) {
            a += ", \"" + escape(this.Title) + "\"";
        } else {
            a += ",\"\"";
        }
        if (d) {
            a += ", \"" + escape(this.Details) + "\"";
        } else {
            a += ",\"\"";
        }
        a += ",\"" + this.TitleStyle + "\"";
        a += ",\"" + this.DetailsStyle + "\"";
        a += ");' ";
    }
    a += "/>";
    return a;
}

VEPushpin.DisposeERO = function () {if (window.ero != null && window.ero != "undefined") {window.ero.destroy();window.ero = null;}};
VEPushpin.prototype._SetMapInstance = function (a) {this.m_vemap = a;this.m_vemapcontrol = a.vemapcontrol;};
VEPushpin.prototype.GetContent = GetContent;

function GetImageFullUrl(a) {
    var b = "";
    if (a && a.constructor == String && a.length > 0) {
        var c = new Image;
        c.src = a;
        b = c.src;
    }
    return b;
}


function VE_ScratchpadManager() {
}

VE_ScratchpadManager.AddGeoLocation = function () {return;};
VE_ScratchpadManager.AddLocation = VE_ScratchpadManager.AddGeoLocation;
VE_Scratchpad = VE_ScratchpadManager;

function VEMessage(b) {
    VEValidator.ValidateObject(b, "vemap", VEMap, "VEMap");
    this.m_vemap = b;
    var a = this;
    this.Show = function (g) {if (g == null || g == "undefined" || g.length <= 0) {return;}g = c(g);if (this.vemessagepanel == null || this.vemessagepanel == "undefined") {var d = document.createElement("div");d.id = this.m_vemap.ID + "_vemessagepanel";d.className = "VE_Message";d.style.zIndex = Msn.VE.API.Globals.vemessagepanelzIndex;var i = this.m_vemap.GetHeight() / 2 - Msn.VE.API.Globals.vemessagepanelheight / 2;if (i < 0) {i = 0;}d.style.top = i + "px";d.style.left = "30px";var h = this.m_vemap.GetWidth() - 60;if (h < 30) {h = 30;}d.style.width = h + "px";d.style.height = Msn.VE.API.Globals.vemessagepanelheight + "px";d.style.position = "absolute";this.vemessagepanel = d;var e = document.createElement("a");e.className = "VE_Message_Title";e.style.zIndex = parseInt(Msn.VE.API.Globals.vemessagepanelzIndex) + 1;e.style.top = "1px";e.style.left = "1px";e.style.width = parseInt(this.vemessagepanel.style.width) - 5 + "px";e.innerHTML = IOSec.EncodeHtml(L_error_text);e.unselectable = "on";this.vemessagepanel.appendChild(e);var f = document.createElement("a");f.className = "VE_Message_Close";f.style.zIndex = parseInt(Msn.VE.API.Globals.vemessagepanelzIndex) + 2;f.style.top = "1px";f.style.right = "1px";f.onclick = a.Hide;f.unselectable = "on";f.innerHTML = L_close_text;this.vemessagepanel.appendChild(f);var b = document.createElement("div");b.id = this.m_vemap.ID + "_vemessagepanel_body";b.className = "VE_Message_Body";b.style.zIndex = parseInt(Msn.VE.API.Globals.vemessagepanelzIndex) + 3;b.style.top = "22px";b.style.left = "0px";b.style.width = parseInt(this.vemessagepanel.style.width) - 8 + "px";b.onclick = a.Hide;b.unselectable = "on";b.innerHTML = g;this.vemessagepanel.appendChild(b);this.m_vemap.AddControl(this.vemessagepanel, Msn.VE.API.Globals.vemessagepanelzIndex);} else {var b = $ID(this.m_vemap.ID + "_vemessagepanel_body");b.innerHTML = g;}this.vemessagepanel.style.display = "block";mvcViewFacade.ShowShimIfSupported(this.vemessagepanel);this.timeoutIntervalID = window.setInterval(this.Hide, 10000);};
    this.Hide = function () {VEMap.ValidateState();if (a.vemessagepanel != null && a.vemessagepanel != "undefined") {a.vemessagepanel.style.display = "none";HideShim(a.vemessagepanel);if (a.timeoutIntervalID != null) {window.clearInterval(a.timeoutIntervalID);a.timeoutIntervalID = null;}}};
    this.Dispose = function () {if (this.vemessagepanel != null && this.vemessagepanel != "undefined") {this.vemessagepanel = null;}};

    function c(a) {
        var b = /<a[^>]*>/gi;
        a = a.replace(b, "");
        b = /<\/a>/gi;
        a = a.replace(b, "");
        return a;
    }

}


function VEAmbiguouslist(vemap) {
    VEValidator.ValidateNonNull(vemap, "vemap");
    this.m_vemap = vemap;
    var self = this;
    this.ID = this.m_vemap.ID + "_veplacelistpanel";
    this.Show = function (a, onSelectCallback, callbackOnClose) {var body = null, veambiglistHide = "VEMap._GetMapFromGUID('" + this.m_vemap.GUID + "').m_veambiguouslist.Hide();", veambiglistSetViewport = "VEMap._GetMapFromGUID('" + this.m_vemap.GUID + "').vemapcontrol.SetViewport";if (this.veplacelistpanel == null || this.veplacelistpanel == "undefined") {var e = document.createElement("div");e.id = this.ID;e.className = "VE_PlaceList";e.style.top = this.m_vemap.GetHeight() / 2 - Msn.VE.API.Globals.veplacelistpanelheight / 2 + "px";e.style.left = this.m_vemap.GetWidth() / 2 - Msn.VE.API.Globals.veplacelistpanelwidth / 2 + "px";e.style.width = Msn.VE.API.Globals.veplacelistpanelwidth + "px";e.style.height = Msn.VE.API.Globals.veplacelistpanelheight + "px";e.style.position = "absolute";this.veplacelistpanel = e;var title = document.createElement("a");title.className = "VE_PlaceList_Title";title.style.zIndex = parseInt(Msn.VE.API.Globals.veplacelistpanelzIndex) + 1;title.style.width = parseInt(Msn.VE.API.Globals.veplacelistpanelwidth) - 5 + "px";title.style.top = "1px";title.style.left = "1px";title.innerHTML = IOSec.EncodeHtml(L_selectlocation_text);title.unselectable = "on";this.veplacelistpanel.appendChild(title);var cb = document.createElement("a");cb.className = "VE_PlaceList_Close";cb.id = this.m_vemap.ID + "_veplaceListclose";cb.style.zIndex = parseInt(Msn.VE.API.Globals.veplacelistpanelzIndex) + 2;cb.style.top = "1px";cb.style.right = "1px";cb.unselectable = "on";cb.innerHTML = L_close_text;this.veplacelistpanel.appendChild(cb);body = document.createElement("div");body.id = this.m_vemap.ID + "_veplacelistbody";body.style.zIndex = 300;body.className = "VE_PlaceList_Body";this.veplacelistpanel.appendChild(body);this.m_vemap.AddControl(this.veplacelistpanel, Msn.VE.API.Globals.veplacelistpanelzIndex);} else {body = $ID(this.m_vemap.ID + "_veplacelistbody");}var cb = $ID(this.m_vemap.ID + "_veplaceListclose");if (callbackOnClose == true) {cb.onclick = function () {eval(veambiglistHide + onSelectCallback + "();");};} else {cb.onclick = self.Hide;}body.innerHTML = "";for (var i = 0; i < a.length; i++) {if (a[i] == null || a[i] == "undefined") {continue;}var loc = document.createElement("div");loc.id = "veplacelistpanel_body_loc" + i;loc.className = "VE_PlaceList_Location";loc.style.position = "relative";loc.style.zIndex = parseInt(Msn.VE.API.Globals.veplacelistpanelzIndex) + 4;loc.unselectable = "on";if (a[i].name) {if (onSelectCallback != null && onSelectCallback != "undefined") {loc.innerHTML = "<a onclick=\"javascript:" + veambiglistHide + onSelectCallback + "('" + a[i].name + "', " + a[i].latitude + ", " + a[i].longitude + ");\">" + a[i].name + "</a>";} else {loc.innerHTML = "<a onclick=\"javascript:" + veambiglistHide + "\">" + a[i].name + "</a>";}} else if (onSelectCallback != null && onSelectCallback != "undefined") {loc.innerHTML = "<a onclick=\"javascript:" + veambiglistHide + onSelectCallback + "('" + a[i][0] + "', " + a[i][1] + ", " + a[i][2] + ", " + a[i][3] + ", " + a[i][4] + ");\">" + a[i][0] + "</a>";} else {loc.innerHTML = "<a onclick=\"javascript:" + veambiglistHide + veambiglistSetViewport + "(" + a[i][1] + ", " + a[i][2] + ", " + a[i][3] + ", " + a[i][4] + ");\">" + a[i][0] + "</a>";}body.appendChild(loc);}this.veplacelistpanel.style.display = "block";mvcViewFacade.ShowShimIfSupported(this.veplacelistpanel);};
    this.Hide = function () {if (self.veplacelistpanel != null && self.veplacelistpanel != "undefined") {HideShim(self.veplacelistpanel);self.veplacelistpanel.style.display = "none";}};
    this.IsVisible = function () {var a = false;if (this.veplacelistpanel != null && this.veplacelistpanel != "undefined" && this.veplacelistpanel.style.display != "none") {a = true;}return a;};
    this.Dispose = function () {if (this.veplacelistpanel != null && this.veplacelistpanel != "undefined") {this.veplacelistpanel = null;}};
}


function VEGraphicsManager(q) {
    VEValidator.ValidateObject(q, "vemap", VEMap, "VEMap");
    var a = this;
    this._spacecontrol = null;
    this._hackUniqueLayerId = "UniqueLayer_Hack";
    var D = null;
    this._entityIdShapePostfix = "_Shape";
    this.m_vemap = q;
    this.m_vemapcontrol = this.m_vemap.vemapcontrol;
    var b = null, f = 1, c = null, d = null;
    this.m_spec = null;
    var u = null, e = null, g = true, C = Msn.VE.API.Constants.iconurl, h = 0, j = new VELatLongDecoder;
    this.SetDisplayThreshold = function (a) {h = a;};
    this.Initialize = function () {if (this.m_vegraphiccanvas == null || this.m_vegraphiccanvas == "undefined") {try {this.m_vegraphicspolylines = [];this.m_vegraphicspolygons = [];var b = document.createElement("div");b.id = "rootgraphicshape";this.m_vemapcontrol.SetChildDiv(b);this.m_vegraphiccanvas = Msn.Drawing.Graphic.CreateGraphic(b, this.m_vemapcontrol);this.m_vegraphiccanvas.SetZIndex(17);this.m_vemapcontrol.AttachEvent("onstartzoom", a.OnStartZoom);this.m_vemapcontrol.AttachEvent("onchangeview", a.Update);this.m_vemapcontrol.AttachEvent("onobliquechange", a.Update);this.m_vemapcontrol.AttachEvent("oninitmode", a.UpdateViewMode);if (window.ero == null || window.ero == "undefined") {window.ero = ERO.getInstance();window.ero.setBoundingArea(new Msn.VE.Geometry.Point(0, 0), new Msn.VE.Geometry.Point(document.body.clientWidth, document.body.clientHeight));}} catch (c) {throw c;return;}}};
    this.UpdateViewMode = function () {if (a.m_vemap.GetMapMode() == Msn.VE.MapActionMode.Mode3D) {a.DrawAll3DPushpins();a.Draw();} else {_spacecontrol = null;}};
    this.Update = function () {if (a.m_vemap.GetMapMode() != Msn.VE.MapActionMode.Mode3D) {a.Clear();a.Draw();}window.ero.setBoundingArea(new Msn.VE.Geometry.Point(0, 0), new Msn.VE.Geometry.Point(document.body.clientWidth, document.body.clientHeight));};
    this.OnStartZoom = function () {a.Clear();if (a.m_vemap.GetMapMode() == Msn.VE.MapActionMode.Mode2D) {p();}};
    this.Clear = function () {if (a.m_vegraphiccanvas != null && a.m_vegraphiccanvas != "undefined") {a.m_vegraphiccanvas.Clear();}};

    function l(a) {
        var b = false;
        if (a.minX > c.x1 &&
            a.minY > c.y1 && a.maxX < c.x2 && a.maxY < c.y2) {
            b = true;
        }
        return b;
    }


    function v(a) {
        if (typeof a == "undefined" || a.type == VEShapeType.Pushpin) {
            return false;
        }
        if (a.minX == null ||
            a.minY == null || a.maxX == null || a.maxY == null) {
            var c = null;
            c = Msn.Drawing.ComputeBoundingBox(a.points);
            if (c) {
                a.minX = c[0];
                a.minY = c[1];
                a.maxX = c[2];
                a.maxY = c[3];
            } else {
                return false;
            }
        }
        var d = true;
        d = IsRecIntersect(b.x1, b.y1, b.x2, b.y2, a.minX, a.minY, a.maxX, a.maxY);
        return d;
    }


    function x(d) {
        if (!l(d)) {
            var a = c;
            if (a == null) {
                return;
            }
            var b = null;
            b = VE_LineClip.Clip(d.points, a.x1, a.y1, a.x2, a.y2);
            if (b) {
                d.points = b;
                return true;
            }
        }
        return false;
    }


    function s(b) {
        if (v(b)) {
            var f = b.points;
            if (!l(b)) {
                var d = c;
                if (d == null) {
                    return;
                }
                var e = null;
                e = VE_LineClip.Clip(f, d.x1, d.y1, d.x2, d.y2);
                if (e) {
                    b.points = e;
                }
            }
            a.m_vegraphiccanvas.DrawPrimitive(b);
            b.points = f;
        }
    }


    function w(b) {
        a.m_vemap.m_velayermanager = b;
        d = b.VE_LayerManager;
        e = d.GetCollectionListDiv();
        a.m_vemapcontrol.SetChildDiv(e);
        a.m_spec = new VELatLongFactorySpecFromMap(a.m_vemap);
        u = new VELatLongFactory(b.m_spec);
    }


    function B() {
        if (!d) {
            return;
        }
        MC_MAX_COL_SIZE = 200;
        var h = d.GetCollectionCount();
        if (h < 1) {
            return;
        }
        if (b == null) {
            b = GetCurrentMapViewBounds(a.m_vemapcontrol);
            c = GetBufferedMapViewBounds(f, b);
        }
        for (var e = 0; e < h; e++) {
            var g = d.GetCollectionByIndex(e);
            g._index = e;
            MC_MAX_COL_SIZE = Math.max(MC_MAX_COL_SIZE, g.GetShapeCount());
            o(g);
        }
    }


    function o(j) {
        if (!d) {
            return;
        }
        if (j.GetType() == MC_COL_TYPE_TILEIMAGE) {
            return;
        }
        var p = i(j);
        j._mapGuid = a.m_vemap.GUID;
        if (!j.GetVisibility()) {
            return;
        }
        var s = j.GetShapeCount();
        if (s < 1) {
            return;
        }
        if (a.m_vemap.GetMapMode() == Msn.VE.MapActionMode.Mode3D) {
            if (VE_CheckModuleStatus(VE_ModuleName.API3D) == "loaded") {
                mvcViewFacade._curMvcView._DrawCollectionLayer(j);
            }
            return;
        }
        var r = a.m_vemapcontrol.GetZoomLevel();
        if (r > j.MaxScale || r < j.MinScale) {
            return;
        }
        if (b == null) {
            b = GetCurrentMapViewBounds(a.m_vemapcontrol);
            c = GetBufferedMapViewBounds(f, b);
        }
        var k = j.GetBoundingBox();
        if (!IsBoundsIntersect(b, k)) {
            return;
        }
        if (j.Spec != null &&
            j.Spec.IconUrl != null && j.Spec.IconUrl != "undefined") {
            C = j.Spec.IconUrl;
        }
        var l = document.createElement("div"), q = true;
        g = true;
        if (IsContainedInView(c, k)) {
            g = false;
            q = IsDisplayShape(a.m_vemap.vemapcontrol, h, k.x1, k.y1, k.x2, k.y2);
        }
        for (var m = 0; m < s; m++) {
            var o = j.Annotations[m];
            o._shplayer = j;
            o.SetIndex(m);
            n(o, l);
            if (!q) {
                break;
            }
        }
        g = true;
        l.setAttribute("id", j.GetId());
        if (p != null) {
            e.replaceChild(l, p);
        } else {
            e.appendChild(l, p);
        }
    }


    function n(d, g) {
        if (d.GetVisibility()) {
            if (a.m_vemap.GetMapMode() == Msn.VE.MapActionMode.Mode3D) {
                if (VE_CheckModuleStatus(VE_ModuleName.API3D) == "loaded") {
                    mvcViewFacade._curMvcView._DrawEntity(d);
                }
                return;
            }
            var l = a.m_vemapcontrol.GetZoomLevel();
            if (l > d.maxZoomLevel || l < d.minZoomLevel) {
                return;
            }
            if (b == null) {
                b = GetCurrentMapViewBounds(a.m_vemapcontrol);
                c = GetBufferedMapViewBounds(f, b);
            }
            var m = d.GetBoundingBox();
            if (!IsBoundsIntersect(b, m)) {
                return;
            }
            if (typeof g == "undefined" || g == null) {
                g = r(d.iid);
            }
            var e = d.GetPrimitive(0), i = null, j = null;
            if (d.GetIconVisibility()) {
                if (d.IconUrl == null) {
                    d.IconUrl = Msn.VE.API.Constants.iconurl;
                }
                i = y(d);
                if (i) {
                    g.appendChild(i);
                }
            }
            if (e.type != VEShapeType.Pushpin) {
                var k = true;
                k = IsDisplayShape(a.m_vemap.vemapcontrol, h, e.minX, e.minY, e.maxX, e.maxY);
                if (!k) {
                    return;
                }
                j = t(a.m_vemapcontrol, e, d.GetIndex(), d.GetTitle());
                if (document.all && j) {
                    g.appendChild(j);
                }
            }
        }
    }


    function y(b) {
        if (a.m_vemap.GetMapMode() == Msn.VE.MapActionMode.Mode3D) {
            return null;
        }
        var c = b.GetPrimitive(0), e = null, d = c.iid;
        if (c.type != VEShapeType.Pushpin) {
            d = Msn.Drawing.GetLabelUID(c.iid);
        }
        return a.m_vemap.vemapcontrol.AddPushpin(d, b.Latitude, b.Longitude, 25, 25, "VEAPI_Pushpin", VECreateVEShapeERO(b, a.m_vemap.GUID), Msn.VE.API.Globals.vepushpinpanelzIndex - 1, null, true);
        return null;
    }


    function t(c, a, h, f) {
        if (!a ||
            !a.points ||
            a.points.length < 1 || typeof a.points[0] == "undefined") {
            return;
        }
        if (a.type == VEShapeType.Pushpin &&
            (a.symbol == null ||
            a.symbol != null && a.symbol.id == MC_PROPERTY_PUSHPIN)) {
            a.symbol = VE_MapDispatch_SymbolLib.GetMapSymbolByID(MC_PROPERTY_PUSHPIN);
        } else if (a.symbol == null) {
            var b = VE_MapDispatch_SymbolLib.GetCurrentDefaultSymbol();
            if (b) {
                a.symbol = b.Clone();
            }
        }
        var e = a.points, d = null;
        if (g) {
            x(a);
        }
        d = c.GetGraphic().CreatePrimitive(c, a, f);
        a.points = e;
        return d;
    }


    function p() {
        if (!d) {
            return;
        }
        var b = d.GetCollectionCount();
        if (b < 1) {
            return;
        }
        for (var a = 0; a < b; a++) {
            var c = d.GetCollectionByIndex(a);
            i(c);
        }
    }


    function i(c) {
        if (a.m_vemap.GetMapMode() == Msn.VE.MapActionMode.Mode3D) {
            if (VE_CheckModuleStatus(VE_ModuleName.API3D) == "loaded") {
                mvcViewFacade._curMvcView._ClearCollectionLayer(c);
            }
        }
        if (c.GetType() == MC_COL_TYPE_TILEIMAGE) {
            return;
        }
        var b = null;
        b = $ID(c.GetId());
        if (b == null) {
            return null;
        }
        if (!document.all || b && b.hasChildNodes()) {
            var e = c.GetShapeCount();
            for (var d = 0; d < e; d++) {
                m(c.Annotations[d]);
            }
            b.innerHTML = "";
        }
        return b;
    }


    function m(b) {
        if (a.m_vemap.GetMapMode() == Msn.VE.MapActionMode.Mode3D) {
            if (VE_CheckModuleStatus(VE_ModuleName.API3D) == "loaded") {
                mvcViewFacade._curMvcView._ClearEntity(b);
            }
        }
        k(b.GetPrimitive(0));
    }


    function k(d) {
        var a = null, b = null, e = d.iid;
        if (d.type != VEShapeType.Pushpin) {
            e = Msn.Drawing.GetLabelUID(d.iid);
            b = $ID(d.iid);
            if (b && b.parentNode) {
                b.parentNode.removeChild(b);
            }
        }
        a = $ID(e);
        if (!a) {
            return null;
        }
        a.detachEvent("onmouseover", VEShowVEShapeERO);
        a.detachEvent("onmouseout", VEHideVEShapeERO);
        a.detachEvent("onclick", VEShowVEShapeERO);
        a.parentNode.removeChild(a);
        var c = a.vePushpin;
        if (typeof c != "undefined" && c != null) {
            c.Destroy();
            c.innerHtml = "";
            c = null;
        }
    }


    function r(b) {
        var a = d.ParseInternalID(b);
        if (a && a[1]) {
            return parentElement = z(a[1], false, e);
        } else {
            return e;
        }
    }


    function z(b, d, c) {
        var a = null;
        a = $ID(b);
        if (a && d) {
            a.innerHTML = "";
        }
        if (!a) {
            a = document.createElement("div");
            a.setAttribute("id", b);
            c.appendChild(a);
        }
        return a;
    }

    this.InitLayerManager = w;
    this.DrawAll = B;
    this.DrawLayer = o;
    this.DrawEntity = n;
    this.ClearAll = p;
    this.ClearLayerDom = i;
    this.ClearPrimitiveDom = k;
    this.ClearEntityDom = m;
    this.Draw = function () {b = GetCurrentMapViewBounds(a.m_vemapcontrol);c = GetBufferedMapViewBounds(f, b);if (!document.all) {a.m_vemapcontrol.resetSvgLayer();}a.DrawAll();if (a.m_vegraphicspolylines != null && a.m_vegraphicspolylines.length > 0) {var e = a.m_vegraphicspolylines.length;for (var d = 0; d < e; d++) {var g = a.m_vegraphicspolylines[d];a.DrawOne(g, true, c);}}if (a.m_vegraphicspolygons != null && a.m_vegraphicspolygons.length > 0) {var i = a.m_vegraphicspolygons.length;for (var d = 0; d < i; d++) {var h = a.m_vegraphicspolygons[d];a.DrawOne(h, false, c);}}};
    this.DrawOne = function (d, k, m) {if (typeof d == "undefined" || d == null) {return;}if (a.m_vemap.GetMapMode() == Msn.VE.MapActionMode.Mode3D) {A(d, k, m);return;} else {a._spacecontrol = null;}if (m == null) {b = GetCurrentMapViewBounds(a.m_vemapcontrol);c = GetBufferedMapViewBounds(f, b);}a.m_vegraphiccanvas.resetOffset();var l = d.GetLatLongs(), e = [];for (var h = 0; h < l.length; h++) {var i = j.Decode(l[h]);e.push(parseFloat(i.Longitude));e.push(parseFloat(i.Latitude));}var g;if (k) {g = new Msn.Drawing.PolyLine(e);} else {g = new Msn.Drawing.Polygon(e);}a.m_vegraphiccanvas.SetZIndex(17);a.m_vegraphiccanvas.SetStroke(d.Stroke);s(g);};

    function A(d, g) {
        if (typeof d == "undefined" || d == null) {
            return;
        }
        if (!a._spacecontrol) {
            a._spacecontrol = a.m_vemapcontrol.Get3DControl();
        }
        var m = d.GetLatLongs(), e = [];
        for (var h = 0; h < m.length; h++) {
            var i = j.Decode(m[h]);
            e.push(i.Longitude);
            e.push(i.Latitude);
        }
        var f;
        if (g) {
            f = new Msn.Drawing.PolyLine(e);
        } else {
            f = new Msn.Drawing.Polygon(e);
        }
        a.m_vegraphiccanvas.SetZIndex(17);
        a.m_vegraphiccanvas.SetStroke(d.Stroke);
        var o = d.ID, n = a._hackUniqueLayerId, l = ConvertPointArrayToView3DParameter(f.points), c = GetPrimitiveSymbolOrDefault(f, d.Stroke), p = ConvertStrokeWeightToView3DParameter(c.stroke_weight), b = "Linecolor='" + c.stroke_color + "'" + " Lineweight='" + p + "'" + " Dashstyle='" + c.stroke_dashstyle + "'" + " Lineopacity='" + c.stroke_opacity + "'", k = o + a._entityIdShapePostfix;
        if (g) {
            a._spacecontrol.AddPolylineWithProperties(n, k, l, b);
        } else if (!g) {
            b = b.concat(" Fillcolor='", c.fill_color, "'");
            b = b.concat(" Fillopacity='", c.fill_opacity, "'");
            b = b.concat(" Lineopacity='", c.stroke_opacity, "'");
            a._spacecontrol.AddPolygonWithProperties(n, k, l, b);
        }
    }

}

VEGraphicsManager.prototype.RemoveLine = function (a) {this.RemoveLinebyId(a.ID);};
VEGraphicsManager.prototype.RemoveLinebyId = function (b) {if (this.m_vegraphiccanvas == null || this.m_vegraphiccanvas == "undefined") {throw new VEException("VEMap:RemoveLinebyId", "err_GraphicsInitError", L_GraphicsInitError_Text);return;}try {var c = this.m_vegraphicspolylines.length, a = 0;while (a < c && b != this.m_vegraphicspolylines[a].ID) {a++;}if (a < c) {this.m_vegraphicspolylines.splice(a, 1);} else {throw new VEException("VEMap:RemoveLinebyId", "err_GraphicsInitError", L_invalidpolylineid_text);return;}} catch (d) {throw d;return;}if (this.m_vemap.GetMapMode() == Msn.VE.MapActionMode.Mode3D) {this.Clear3DShape(b);} else {this.Clear();this.Draw();}};
VEGraphicsManager.prototype.RemoveAllLines = function () {if (this.m_vemap.GetMapMode() == Msn.VE.MapActionMode.Mode3D) {this.ClearAll3DShape();}this.m_vegraphicspolylines = [];this.Clear();this.Draw();};
VEGraphicsManager.prototype.DrawLine = function (a) {if (this.m_vegraphiccanvas == null || this.m_vegraphiccanvas == "undefined") {throw new VEException("VEMap:DrawLine", "err_GraphicsInitError", L_GraphicsInitError_Text);return;}try {VEValidator.ValidateObject(a, "vePolyline", VEPolyline, "VEPolyline");var c = this.m_vegraphicspolylines.length;for (var b = 0; b < c; b++) {if (a.ID == this.m_vegraphicspolylines[b].ID) {throw new VEException("VEMap:DrawLine", "err_invalidpolylineid", L_invalidpolylineid_text);}}this.m_vegraphicspolylines.push(a);} catch (d) {throw d;return;}this.DrawOne(a, true);};
VEGraphicsManager.prototype.RemovePolygon = function (a) {this.RemovePolygonbyId(a.ID);};
VEGraphicsManager.prototype.RemovePolygonbyId = function (b) {if (this.m_vegraphiccanvas == null || this.m_vegraphiccanvas == "undefined") {throw new VEException("VEMap:RemovePolygonbyId", "err_GraphicsInitError", L_GraphicsInitError_Text);return;}try {var c = this.m_vegraphicspolygons.length, a = 0;while (a < c && b != this.m_vegraphicspolygons[a].ID) {a++;}if (a < c) {this.m_vegraphicspolygons.splice(a, 1);} else {throw new VEException("VEMap:RemovePolygonbyId", "err_GraphicsInitError", L_invalidpolygonid_text);return;}} catch (d) {throw d;return;}if (this.m_vemap.GetMapMode() == Msn.VE.MapActionMode.Mode3D) {this.Clear3DShape(b);} else {this.Clear();this.Draw();}};
VEGraphicsManager.prototype.RemoveAllPolygons = function () {if (this.m_vemap.GetMapMode() == Msn.VE.MapActionMode.Mode3D) {this.ClearAll3DShape();}this.m_vegraphicspolygons = [];this.Clear();this.Draw();};
VEGraphicsManager.prototype.DrawPolygon = function (a) {if (this.m_vegraphiccanvas == null || this.m_vegraphiccanvas == "undefined") {throw new VEException("VEMap:DrawPolygon", "err_GraphicsInitError", L_GraphicsInitError_Text);return;}try {VEValidator.ValidateObject(a, "vePolygon", VEPolygon, "VEPolygon");var c = this.m_vegraphicspolygons.length;for (var b = 0; b < c; b++) {if (a.ID == this.m_vegraphicspolygons[b].ID) {throw new VEException("VEMap:DrawPolygon", "err_invalidpolygonid", L_invalidpolygonid_text);}}this.m_vegraphicspolygons.push(a);} catch (d) {throw d;return;}this.DrawOne(a, false);};
VEGraphicsManager.prototype.Dispose = function () {if (this.m_vegraphiccanvas != null) {this.m_vegraphiccanvas.Clear();this.m_vegraphiccanvas.Destroy();this.m_vegraphiccanvas = null;}if (this.m_vegraphicspolylines != null && this.m_vegraphicspolylines != "undefined") {var b = this.m_vegraphicspolylines.length;for (var a = 0; a < b; a++) {this.m_vegraphicspolylines.pop().Dispose();}}if (this.m_vegraphicspolygons != null && this.m_vegraphicspolygons != "undefined") {var c = this.m_vegraphicspolygons.length;for (var a = 0; a < c; a++) {this.m_vegraphicspolygons.pop().Dispose();}}if (this.m_vemap != null) {this.m_vemapcontrol.DetachEvent("onchangeview", this.Update);this.m_vemapcontrol.DetachEvent("onobliquechange", this.Update);this.m_vemapcontrol.DetachEvent("onstartzoom", this.Clear);}};
VEGraphicsManager.prototype.DrawAll3DPushpins = function () {if (this.m_vemap.GetMapMode() != Msn.VE.MapActionMode.Mode3D) {return;}if (!this.m_vemap.pushpins) {return;}if (typeof this._spacecontrol == "undefined" || this._spacecontrol == null) {this._spacecontrol = this.m_vemapcontrol.Get3DControl();}if (!this._spacecontrol) {return;}var c = this.m_vemap.pushpins, e = c.length;for (var a = 0; a < e; a++) {var b = c[a], d = b.LatLong;this.Add3DPushpin(b.ID, d.Latitude, d.Longitude, 25, 25, "VEAPI_Pushpin", b, Msn.VE.API.Globals.vepushpinpanelzIndex - 1);}};
VEGraphicsManager.prototype.Add3DPushpin = function (b, e, f, n, l, g, d, m) {var h = f, j = e, k = this._hackUniqueLayerId, o = "text=\"\"", c;c = GetImageFullUrl(d.Iconurl);var i = b;this.m_vemapcontrol.Get3DControl().AddPointWithProperties(k, i, j, h, c, o);var a = null;if (!$ID(b)) {a = this.m_vemapcontrol.AddPushpin(b, e, f, n, l, g, d.GetContent(), m, "VEAPI_Pushpin", false, false);if (a) {a.style.display = "none";}}};
VEGraphicsManager.prototype.Remove3DPushpin = function (a) {if (typeof this._spacecontrol == "undefined" || this._spacecontrol == null) {this._spacecontrol = this.m_vemapcontrol.Get3DControl();}this.Clear3DShape(a);this.m_vemapcontrol.RemovePushpin(a);};
VEGraphicsManager.prototype.ClearAllPushpins = function (b) {if (typeof this._spacecontrol == "undefined" || this._spacecontrol == null) {this._spacecontrol = this.m_vemapcontrol.Get3DControl();}var d = b.length;for (var c = 0; c < d; c++) {var a = b.pop();if (!a.IsInLayer) {this.Clear3DShape(a.ID);a.Dispose();}}this.m_vemapcontrol.ClearPushpins();};
VEGraphicsManager.prototype.ClearAll3DShape = function () {var c = null, b = 0;if (this.m_vegraphicspolylines != null && this.m_vegraphicspolylines != "undefined") {b = this.m_vegraphicspolylines.length;for (var a = 0; a < b; a++) {c = this.m_vegraphicspolylines[a];this.Clear3DShape(c.ID);}}if (this.m_vegraphicspolygons != null && this.m_vegraphicspolygons != "undefined") {b = this.m_vegraphicspolygons.length;for (var a = 0; a < b; a++) {c = this.m_vegraphicspolygons[a];this.Clear3DShape(c.ID);}}};
VEGraphicsManager.prototype.Clear3DShape = function (c) {var a = c;this._spacecontrol.DeleteGeometry(this._hackUniqueLayerId, a);var b = a + this._entityIdShapePostfix;this._spacecontrol.DeleteGeometry(this._hackUniqueLayerId, b);};

function ConvertPointArrayToView3DParameter(a) {
    var b = "", c = a.length;
    for (i = 0; i < c; i += 2) {
        var d = a[i], e = a[i + 1];
        b += d + "," + e + " ";
    }
    return b;
}


function ConvertStrokeWeightToView3DParameter(a) {
    if (a == null) {
        return "";
    }
    var c = a.length, b = a.substring(0, c - 2);
    return b + "px";
}


function GetPrimitiveSymbolOrDefault(c, b) {
    var a = c.symbol;
    if (a == null) {
        if (typeof b != "undefined") {
            c.symbol = new VEShapeStyle;
            a = c.symbol;
            a.stroke_weight = b.width + "pt";
            a.joinstyle = b.linejoin;
            a.stroke_color = b.color.ToHexString();
            a.stroke_dashstyle = b.linecap;
            a.stroke_opacity = b.color.A.toString();
            a.fill_color = b.fillcolor.ToHexString();
            a.fill_opacity = b.fillcolor.A.toString();
            return a;
        } else if (_defaultSymbol == null) {
            _defaultSymbol = new VEShapeStyle;
            _defaultSymbol.id = MC_PROPERTY_DEFAULT;
            c.symbol = _defaultSymbol;
        }
        return _defaultSymbol;
    }
    return a;
}


function VELatLong(b, a) {
    try {
        this.Latitude = null;
        this.Longitude = null;
        this._reserved = null;
        if (b != null && b != "undefined") {
            VEValidator.ValidateFloat(b, "latitude");
            this.Latitude = b;
        }
        if (a != null && a != "undefined") {
            VEValidator.ValidateFloat(a, "longitude");
            this.Longitude = a;
        }
    } catch (c) {
        throw c;
        return;
    }
}


function Clone() {
    var a = new VELatLong;
    a.Latitude = this.Latitude;
    a.Longitude = this.Longitude;
    a._reserved = this._reserved;
    return a;
}


function toString() {
    var a = "";
    if (this.Latitude != null && this.Longitude != null) {
        a = this.Latitude + ", " + this.Longitude;
    }
    return a;
}

VELatLong.prototype.toString = toString;
VELatLong.prototype.Clone = Clone;

function VELatLongRectangle(d, c, b, a) {
    VEValidator.ValidateObject(d, "topLeftLatLong", VELatLong, "VELatLong");
    VEValidator.ValidateObject(c, "bottomRightLatLong", VELatLong, "VELatLong");
    this.TopLeftLatLong = d;
    this.BottomRightLatLong = c;
    if (b != null && b != "undefined") {
        VEValidator.ValidateObject(b, "topRightLatLong", VELatLong, "VELatLong");
        this.TopRightLatLong = b;
    }
    if (a != null && a != "undefined") {
        VEValidator.ValidateObject(a, "bottomLeftLatLong", VELatLong, "VELatLong");
        this.BottomLeftLatLong = a;
    }
}


function VELatLongDecoder() {
    var a = new VELatLongEncoding;
    this.Decode = function (c) {VEValidator.ValidateObject(c, "veLatLong", VELatLong, "VELatLong");var b = c.Clone();if (b.Latitude == null || b.Longitude == null && b._reserved != null) {var d = a.Decode(b._reserved);b.Latitude = d[0];b.Longitude = d[1];b._reserved = null;}return b;};
}


function VELatLongFactoryAlwaysEncodeSpec() {
    this.IsEncode = function () {return true;};
}


function VELatLongFactorySpecFromMap(a) {
    VEValidator.ValidateObject(a, "vemap", VEMap, "VEMap");
    var b = a;
    this.IsEncode = function () {return b.GetMapStyle() == VEMapStyle.Birdseye;};
}


function VELatLongFactorySpecFromMapView(a) {
    VEValidator.ValidateNonNull(a, "mapView");
    var b = a;
    this.IsEncode = function () {return b.mapStyle == Msn.VE.MapStyle.Oblique;};
}


function VELatLongFactory(a) {
    VEValidator.ValidateNonNull(a, "veLatLongFactorySpec");
    var c = a, b = new VELatLongEncoding;
    this.CreateVELatLong = function (e, d) {var a = null;if (c.IsEncode()) {a = new VELatLong;a._reserved = b.Encode(e, d);} else {a = new VELatLong(e, d);}return a;};
}


function VEPolyline(d, c, a, b) {
    VEValidator.ValidateNonNull(d, "id");
    VEValidator.ValidateNonNull(c, "arrVELatLong");
    this.ID = d;
    this.LatLongs = c;
    this.Stroke = new Msn.Drawing.Stroke;
    if (a == null || a == "undefined") {
        a = new VEColor(17, 221, 17, 0.7);
    }
    this.SetColor(a);
    if (b == null || b == "undefined") {
        b = 6;
    }
    this.SetWidth(b);
}


function SetColor(a) {
    $VE_A.LogAPI("VE | APIs", "VEPolyline - SetColor");
    VEValidator.ValidateNonNull(a);
    this.Stroke.color = new Msn.Drawing.Color(a.R, a.G, a.B, a.A);
}


function SetWidth(a) {
    $VE_A.LogAPI("VE | APIs", "VEPolyline - SetWidth");
    VEValidator.ValidateInt(a, "width");
    this.Stroke.width = a;
}


function GetLatLongs() {
    return this.LatLongs;
}


function Dispose() {
    this.ID = null;
    this.LatLongs = null;
    this.Stroke = null;
}

VEPolyline.prototype.SetColor = SetColor;
VEPolyline.prototype.SetWidth = SetWidth;
VEPolyline.prototype.GetLatLongs = GetLatLongs;
VEPolyline.prototype.Dispose = Dispose;

function VEPolygon(e, d, c, a, b) {
    VEValidator.ValidateNonNull(e, "id");
    VEValidator.ValidateNonNull(d, "arrVELatLong");
    this.ID = e;
    this.LatLongs = d;
    this.Stroke = new Msn.Drawing.Stroke;
    if (c == null || c == "undefined") {
        c = new VEColor(17, 221, 17, 0.7);
    }
    this.SetFillColor(c);
    if (a == null || a == "undefined") {
        a = new VEColor(17, 221, 17, 0.7);
    }
    this.SetOutlineColor(a);
    if (b == null || b == "undefined") {
        b = 6;
    }
    this.SetOutlineWidth(b);
}


function SetFillColor(a) {
    $VE_A.LogAPI("VE | APIs", "VEPolygon - SetFillColor");
    VEValidator.ValidateNonNull(a);
    this.Stroke.fillcolor = new Msn.Drawing.Color(a.R, a.G, a.B, a.A);
}


function SetOutlineColor(a) {
    $VE_A.LogAPI("VE | APIs", "VEPolygon - SetOutlineColor");
    VEValidator.ValidateNonNull(a);
    this.Stroke.color = new Msn.Drawing.Color(a.R, a.G, a.B, a.A);
}


function SetOutlineWidth(a) {
    $VE_A.LogAPI("VE | APIs", "VEPolygon - SetOutlineWidth");
    VEValidator.ValidateInt(a, "width");
    this.Stroke.width = a;
}


function GetLatLongs() {
    return this.LatLongs;
}


function Dispose() {
    this.ID = null;
    this.LatLongs = null;
    this.Stroke = null;
}

VEPolygon.prototype.SetFillColor = SetFillColor;
VEPolygon.prototype.SetOutlineColor = SetOutlineColor;
VEPolygon.prototype.SetOutlineWidth = SetOutlineWidth;
VEPolygon.prototype.GetLatLongs = GetLatLongs;
VEPolygon.prototype.Dispose = Dispose;

function VEColor(d, c, b, a) {
    try {
        VEValidator.ValidateInt(d, "r");
        VEValidator.ValidateBetween(d, "r", 0, 255);
        VEValidator.ValidateInt(c, "g");
        VEValidator.ValidateBetween(c, "g", 0, 255);
        VEValidator.ValidateInt(b, "b");
        VEValidator.ValidateBetween(b, "b", 0, 255);
        VEValidator.ValidateFloat(a, "a");
        VEValidator.ValidateBetween(a, "a", 0, 1);
        this.R = d;
        this.G = c;
        this.B = b;
        this.A = a;
    } catch (e) {
        throw e;
        return;
    }
}

var L_integerencodingoutofrange_text = "VEIntegerEncoding: The number encoded is out of supported range", L_floatintegermapencodingoutofrange_text = "VEFloatIntegerMap: The number encoded is out of supported range", L_integerencodinginvalidstringlength_text = "VEIntegerEncoding: Invalid string length", L_integerencodingunknowndigit_text = "VEIntegerEncoding: The encoded string has an unknown digit";

function VEIntegerEncoding(g, j) {
    var e = g, d = g.length, a = j, h = 1;
    for (var i = 0; i < a; ++i) {
        h *= d;
    }
    var f = h - 1, c = [];
    for (var b = 0; b < e.length; ++b) {
        c[e.substr(b, 1)] = b;
    }
    this.MaxValue = function () {return f;};
    this.ValueLength = function () {return a;};
    this.Encode = function (c) {if (c <= f) {var h = "", g = [];for (var b = 0; b < a; ++b) {g[b] = 0;}var i = a - 1;while (c > 0) {g[i] = Math.floor(c % d);c = Math.floor(c / d);--i;}for (var b = 0; b < g.length; ++b) {h += e.substr(g[b], 1);}return h;} else {throw L_integerencodingoutofrange_text;}};
    this.Decode = function (c) {if (c.length == a) {var b = 0;for (var e = 0; e < c.length; ++e) {b *= d;b += this.DigitValue(c.substr(e, 1));}return b;} else {throw L_integerencodinginvalidstringlength_text;}};
    this.DigitValue = function (a) {if (c[a] != null && c[a] != "undefined") {return c[a];} else {throw L_integerencodingunknowndigit_text;}};
}


function VEFloatIntegerMap(e, d, f) {
    var a = e, c = d, b = f;
    this.MinFloat = function () {return a;};
    this.MaxFloat = function () {return c;};
    this.MaxInt = function () {return b;};
    this.FloatToInt = function (d) {if (d >= a && d <= c) {var e = (d - a) / (c - a), f = e * b + 0.5;return Math.min(Math.floor(f), b);} else {throw L_floatintegermapencodingoutofrange_text;}};
    this.IntToFloat = function (d) {if (d <= b) {var f = d / b, e = a + f * (c - a);return e;} else {throw L_floatintegermapencodingoutofrange_text;}};
}

var L_velatlongencodinginvalidstringlength_text = "VELatLongEncoding: Invalid string length";

function VELatLongEncoding(b) {
    var i = -90, h = 90, g = -180, f = 180, j = "0123456789bcdfghjkmnpqrstvwxyz", e = 6;
    if (b != null && typeof b != "undefined") {
        e = b;
    }
    var a = new VEIntegerEncoding(j, e), d = new VEFloatIntegerMap(i, h, a.MaxValue()), c = new VEFloatIntegerMap(g, f, a.MaxValue());
    this.Encode = function (e, b) {var f = a.Encode(d.FloatToInt(e)) + a.Encode(c.FloatToInt(b));return f;};
    this.Decode = function (f) {if (f.length == 2 * a.ValueLength()) {var e = a.ValueLength(), j = f.substr(0, e), h = f.substr(e, e), i = a.Decode(j), g = a.Decode(h), b = [];b[0] = d.IntToFloat(i);b[1] = c.IntToFloat(g);return b;} else {throw L_velatlongencodinginvalidstringlength_text;}};
}


function VELatLongEncodingForMobile() {
    VELatLongEncoding.call(this, 5);
}

VEMapMode = new (function () {this.Mode2D = 1;this.Mode3D = 2;});

function VEMapViewSpecification(c, d, e, g, f) {
    try {
        this.LatLong = null;
        this.ZoomLevel = null;
        this.Altitude = null;
        this.Pitch = null;
        this.Heading = null;
        if (c != null && c != "undefined") {
            VEValidator.ValidateObject(c, "veLatLong", VELatLong, "VELatLong");
            this.LatLong = c;
        }
        if (d != null && d != "undefined") {
            VEValidator.ValidateInt(d, "zoomLevel");
            this.ZoomLevel = d;
        }
        if (e != null && e != "undefined") {
            VEValidator.ValidateFloat(e, "altitude");
            this.Altitude = parseFloat(e);
        }
        if (g != null && g != "undefined") {
            VEValidator.ValidateFloat(g, "pitch");
            var a = parseFloat(g);
            a = a % 360;
            if (a < -90) {
                a = -90;
            }
            if (a > 90) {
                a = 90;
            }
            this.Pitch = a;
        }
        if (f != null && f != "undefined") {
            VEValidator.ValidateFloat(f, "heading");
            var b = parseFloat(f);
            b = b % 360;
            if (b < 0) {
                b += 360;
            }
            this.Heading = b;
        }
    } catch (h) {
        throw h;
        return;
    }
}


function MapViewSpecClone() {
    var a = new VEMapViewSpecification;
    a.LatLong = this.LatLong.Clone();
    a.Altitude = this.Altitude;
    a.Pitch = this.Pitch;
    a.Heading = this.Heading;
    return veLatLong;
}

VEMapViewSpecification.prototype.Clone = MapViewSpecClone;
VEMapStyle = new (function () {this.Road = Msn.VE.MapStyle.Road;this.Shaded = Msn.VE.MapStyle.Shaded;this.Aerial = Msn.VE.MapStyle.Aerial;this.Hybrid = Msn.VE.MapStyle.Hybrid;this.Oblique = Msn.VE.MapStyle.Oblique;this.Birdseye = Msn.VE.MapStyle.Oblique;});
VEOrientation = new (function () {this.North = Msn.VE.Orientation.North;this.East = Msn.VE.Orientation.East;this.West = Msn.VE.Orientation.West;this.South = Msn.VE.Orientation.South;this.SouthWest = "Southwest";this.NorthEast = "Northeast";this.SouthEast = "Southeast";this.NorthWest = "Northwest";});

function VEBirdseyeScene(e) {
    VEValidator.ValidateNonNull(e, "obliqueScene");
    var a = e, c = null, d = null, f = new VELatLongFactory(new VELatLongFactoryAlwaysEncodeSpec), b = new VELatLongDecoder;
    this.PixelToLatLong = function (b, d, c) {$VE_A.LogAPI("VE | APIs", "VEBirdseyeScene - PixelToLatLong");if (c) {VEValidator.ValidateObjectArray(b, "pixelArray", VEPixel, "VEPixel array");VEValidator.ValidateFunction(c, "callback");this.PixelToLatLongAsync(b, d, c);} else {VEValidator.ValidateObject(b, "pixel", VEPixel, "VEPixel");var e = a.PixelToLatLong(b, d);return f.CreateVELatLong(e.latitude, e.longitude);}};
    this.PixelToLatLongAsync = function (b, c, d) {$VE_A.LogAPI("VE | APIs", "VEBirdseyeScene - PixelToLatLongAsync");a.PixelToLatLongAsync(b, c, d);};
    this.LatLongToPixel = function (c, f, d) {$VE_A.LogAPI("VE | APIs", "VEBirdseyeScene - LatLongToPixel");if (d) {VEValidator.ValidateObjectArray(c, "veLatLongArray", VELatLong, "VELatLong array");VEValidator.ValidateFunction(d, "callback");this.LatLongToPixelAsync(c, f, d);} else {VEValidator.ValidateObject(c, "veLatLong", VELatLong, "VELatLong");var e = b.Decode(c), g = new Msn.VE.LatLong(e.Latitude, e.Longitude);return a.LatLongToPixel(g, f);}};
    this.LatLongToPixelAsync = function (e, g, h) {$VE_A.LogAPI("VE | APIs", "VEBirdseyeScene - LatLongToPixelAsync");var f = [];for (var c = 0; c < e.length; ++c) {var d = b.Decode(e[c]);f[c] = new Msn.VE.LatLong(d.Latitude, d.Longitude);}a.LatLongToPixelAsync(f, g, h);};
    this.IsValidTile = function (c, d, b) {$VE_A.LogAPI("VE | APIs", "VEBirdseyeScene - IsValidTile");return a.IsValidTile(c, d, b);};
    this.GetID = function () {$VE_A.LogAPI("VE | APIs", "VEBirdseyeScene - GetID");return a.GetID();};
    this.GetTileFilename = function () {$VE_A.LogAPI("VE | APIs", "VEBirdseyeScene - GetTileFilename");return a.GetTileFilename();};
    this.GetThumbnailFilename = function () {$VE_A.LogAPI("VE | APIs", "VEBirdseyeScene - GetThumbnailFilename");return a.GetThumbnailFilename();};
    this.GetNeighbor = function (f) {$VE_A.LogAPI("VE | APIs", "VEBirdseyeScene - GetNeighbor");var b = null, e = a.GetNeighbor(f);if (e) {b = new VEBirdseyeScene(b);b.SetClientToken(c);b.SetGUID(d);}return b;};
    this.GetRotation = function (f) {$VE_A.LogAPI("VE | APIs", "VEBirdseyeScene - GetRotation");var b = null, e = a.GetRotation(f);if (e != null) {b = new VEBirdseyeScene(e);b.SetClientToken(c);b.SetGUID(d);}return b;};
    this.GetOrientation = function () {$VE_A.LogAPI("VE | APIs", "VEBirdseyeScene - GetOrientation");return a.GetOrientation();};
    this.GetBounds = function () {return a.GetBounds();};
    this.GetWidth = function () {$VE_A.LogAPI("VE | APIs", "VEBirdseyeScene - GetWidth");return a.GetWidth();};
    this.GetHeight = function () {$VE_A.LogAPI("VE | APIs", "VEBirdseyeScene - GetHeight");return a.GetHeight();};
    this.ContainsLatLong = function (d) {$VE_A.LogAPI("VE | APIs", "VEBirdseyeScene - ContainsLatLong");VEValidator.ValidateObject(d, "veLatLong", VELatLong, "VELatLong");var c = b.Decode(d), e = new Msn.VE.LatLong(c.Latitude, c.Longitude);return a.ContainsLatLong(e);};
    this.ContainsPixel = function (d, e, b) {$VE_A.LogAPI("VE | APIs", "VEBirdseyeScene - ContainsPixel");var c = new VEPixel(d, e);return a.ContainsPixel(c, b);};
    this.SetClientToken = function (b) {c = b;a.SetClientToken(b);};
    this.SetGUID = function (b) {d = b;a.SetGUID(b);};
}

VEAuthenticationCode = function () {};
VEAuthenticationCode.TokenValid = "0";
VEAuthenticationCode.TokenInvalid = "1";
VEAuthenticationCode.TokenExpired = "2";
VEMap.prototype._HandleAuthenticationError = function (a) {if (a != VEAuthenticationCode.TokenValid) {if (a == VEAuthenticationCode.TokenExpired) {this.vemapcontrol.Fire("ontokenexpire");} else {this.vemapcontrol.Fire("ontokenerror");}}};

function $VE_A() {
}


function VE_Range(b, a) {
    this.min = b;
    this.max = a;
}

VE_Range.prototype.IsInRange = function (a) {return a >= this.min && a <= this.max;};
VE_Range.prototype.toString = function () {return this.min + "-" + this.max;};
$VE_A.distanceBuckets = new Array(new VE_Range(0, 10), new VE_Range(11, 25), new VE_Range(26, 100), new VE_Range(101, 200), new VE_Range(201, 500), new VE_Range(501, 1000));
$VE_A.analyticsEnabled = true;
$VE_A.PanLogDelayTimerId = null;
$VE_A.AccumulatedPans = 0;
$VE_A.PanLogDelay = 500;
$VE_A.LogDD = false;
$VE_A.LogHelp = function () {$VE_A.Log("VE | Help Pane", "Help");};
$VE_A.LogAbout = function () {$VE_A.Log("VE | About Pane", "About");};
$VE_A.LogPrintDetailsPage = function () {$VE_A.Log("VE | Details Page", "Print");};
$VE_A.LogSendToMobileDrivingDirectionsPanel = function () {$VE_A.Log("VE | Driving Directions Panel", "Send to mobile");};
$VE_A.LogSendToMobileSearchPopup = function () {$VE_A.Log("VE | Search Popup", "Send to mobile");};
$VE_A.LogReportAbuse = function () {$VE_A.Log("VE | CollectionsViewer", "Report Abuse");};
$VE_A.LogGetMoreInfoDetailsPage = function () {$VE_A.Log("VE | Details Page", "MSN Search");};
$VE_A.LogLocate = function () {$VE_A.Log("VE | Locate Me", "Locate Me");};
$VE_A.LogResponseTimes = function () {var a = map.GetFailureRate() * 100;s.prop33 = a.toFixed(1);a = map.GetResponseRangeCounts()[0] * 100;s.prop34 = a.toFixed(1);a = map.GetResponseRangeCounts()[2] * 100;s.prop35 = a.toFixed(1);$VE_A.Log("VE | Response Times");map.ResetResponseRangeCounts();};
$VE_A.LogZoom = function () {$VE_A.Log(map.GetMapStyle() == Msn.VE.MapStyle.Oblique ? "VE | Oblique Imagery" : "VE | Home Page", "Zoom", "Mouse/Game Control/Keyboard");};
$VE_A.LogPan = function () {if ($VE_A.PanLogDelayTimerId != null && typeof $VE_A.PanLogDelayTimerId == "number") {window.clearTimeout($VE_A.PanLogDelayTimerId);}$VE_A.PanLogDelayTimerId = window.setTimeout("$VE_A.FireLogPan();", $VE_A.PanLogDelay);$VE_A.AccumulatedPans += 1;};
$VE_A.FireLogPan = function () {$VE_A.PanLogDelayTimerId = null;$VE_A.Log(map.GetMapStyle() == Msn.VE.MapStyle.Oblique ? "VE | Oblique Imagery" : "Main | VE", "PAN", "Mouse/Game Control/Keyboard", null, $VE_A.AccumulatedPans);$VE_A.AccumulatedPans = 0;};
$VE_A.FireLog3DPan = function () {$VE_A.Log("Main | VE", "3D PAN", "Mouse/Game Control/Keyboard", null, 0);};
$VE_A.LogFailedSearch = function () {s.prop11 = "No Search Results";$VE_A.Log("VE | Exception", "Search");};
$VE_A.LogJSWatson = function (a) {if (a != null && a != "undefined" && a.length > 0) {s.prop11 = a;$VE_A.Log("VE | Exception", "JSWatson");}};
$VE_A.LogScrachPadItems = function () {s.prop12 = VE_ScratchpadManager.highWaterCount;$VE_A.Log("VE | Scratch Pad", "Exit");};
$VE_A.LogPushpinERO = function (d, c, a, b) {if (a != null) {s.prop21 = a;}if (b != null) {s.prop38 = b;}$VE_A.Log(d, c);};
$VE_A.LogSearchResponse = function (p, o, c, h, g, l, m, k, j, n, e, d, b, i, a, f) {if (k || b || a) {s.events = k;if (c != null) {s.prop8 = c;s.eVar8 = c;}if (m != null) {s.prop3 = m;}if (l != null) {s.prop4 = l;}if (h != null && g != null) {s.prop5 = $VE_A.FormatLatLong(h, g);}s.eVar10 = n;if (e != null) {s.eVar17 = e;}if (j != null) {s.eVar12 = j;}if (d != null) {s.prop27 = d;}if (b != null) {s.prop18 = b;}if (i != null) {s.prop25 = i;}if (a != null) {s.prop19 = a;}if (f != null) {s.prop26 = f;}$VE_A.Log(p, o);}};
$VE_A.LogAdClicked = function (a, b, e, d, c) {s.events = "Event6";s.prop8 = a;s.eVar8 = a;s.eVar11 = b;s.eVar12 = e;s.prop5 = $VE_A.FormatLatLong(d, c);$VE_A.Log("Main > SEARCH | VE", "Ad Clicked");};
$VE_A.SearchDictionary = ["", "Where-only", "What-only", "What and Where", "Who-only", "Who and Where", "Q"];
$VE_A.LogSearch = function (c, f, g, e) {s.events = "Event8";s.pageName = "Main > SEARCH | VE";var b = "%1%2", a = 0;if (e) {a = a + 6;s.prop48 = c;} else {if (typeof c == "string" && c.length > 0) {switch (g) {case VE_SearchType.Business:a = a + 2;break;case VE_SearchType.Person:a = a + 4;break;default:;}}if (f) {a = a + 1;}}if ($VE_A.SearchDictionary.length > a) {b = b.replace(/%2/, $VE_A.SearchDictionary[a]);s.eVar13 = b.replace(/%1/, "");s.prop6 = b.replace(/%1/, "SEARCH ");} else {s.eVar13 = "";s.prop6 = "";}s.prop3 = window.map ? map.GetMapStyle() : "";s.prop4 = window.map ? map.GetZoomLevel() : "";s.prop5 = window.map ? $VE_A.FormatLatLong(map.GetCenterLatitude(), map.GetCenterLongitude()) : "";s.prop8 = $ID("what") ? $ID("what").value == L_MainWhatHelp_Text ? "" : $ID("what").value : "";s.prop9 = $ID("where") ? $ID("where").value == L_SearchUseCurrentViewText_Text ? state.GetStartWhere() : $ID("where").value : "";s.prop13 = window.map ? map.GetMapMode() : "";s.prop36 = window.usertype == undefined ? 1 : usertype;var d = $ID("logging");if (d) {d.innerHTML = s.t();}$VE_A.ResetLogProps("Main > SEARCH | VE");};
$VE_A.SetCampaignId = function (a) {if (a != null && a != "" && a != "undefined") {if (s) {s.campaign = a;$VE_A.Log("VE | Home Page", "Campaign Page View");}}};
$VE_A.LogClick2Call = function (a) {if (a != null && a != "undefined") {if (a == "1") {$VE_A.Log("VE | Search Pane ERO", "C2C call Entry Point");} else if (a == "2") {$VE_A.Log("VE | Map ERO", "C2C call Entry Point");} else if (a == "3") {$VE_A.Log("VE | Details Page", "C2C call Entry Point");} else {$VE_A.Log("VE | Click-2-Call", "C2C call Entry Point");}} else {$VE_A.Log("VE | Click-2-Call", "C2C call Entry Point");}};
$VE_A.LogSend2Phone = function (a) {if (a != null && a != "undefined") {if (a == "1") {$VE_A.Log("VE | Search Pane ERO", "S2P call Entry Point");} else if (a == "2") {$VE_A.Log("VE | Map ERO", "S2P call Entry Point");} else if (a == "3") {$VE_A.Log("VE | Details Page", "S2P call Entry Point");} else {$VE_A.Log("VE | Send-2-Phone", "S2P call Entry Point");}} else {$VE_A.Log("VE | Send-2-Phone", "S2P call Entry Point");}};
$VE_A.LogAPI = function (c, a) {return;if (window.s == "undefined" || window.s == null) {return;}if (!$VE_A.analyticsEnabled) {return;}s.pageName = c;s.prop6 = a ? a : "";var b = $ID("logging");if (b) {b.innerHTML = s.t();}$VE_A.ResetLogProps();};
$VE_A.LogGeoCommunity = function (c, a, b) {if (window.s == "undefined" || window.s == null) {return;}if (a) {s.prop43 = a;}if (b) {s.prop44 = b;}$VE_A.Log("Main > ".concat(c, " | VE"), c);};
$VE_A.Log = function (b, d, e, h, f) {if (window.s == "undefined" || window.s == null) {return;}if (!$VE_A.analyticsEnabled) {return;}s.pageName = b;if (s.prop3 == "") {s.prop3 = window.map ? map.GetMapStyle() : "";}if (s.prop4 == "") {s.prop4 = window.map ? map.GetZoomLevel() : "";}if (s.prop5 == "") {s.prop5 = window.map ? $VE_A.FormatLatLong(map.GetCenterLatitude(), map.GetCenterLongitude()) : "";}s.prop6 = d ? d : "";s.prop7 = e ? e : "";if (s.prop8 == "") {s.prop8 = $ID("what") ? $ID("what").value == L_MainWhatHelp_Text ? "" : $ID("what").value : "";}s.prop9 = $ID("where") ? $ID("where").value == L_SearchUseCurrentViewText_Text ? state.GetStartWhere() : $ID("where").value : "";s.prop13 = window.map ? map.GetMapMode() : "";s.prop36 = window.usertype == undefined ? 1 : usertype;s.charSet = "UTF-8";if (s.prop13 == Msn.VE.MapActionMode.Mode3D) {var a = map.GetCurrentMapView(), c = null;if (a.cameraLatlong != null && a.cameraLatlong != "undefined") {c = a.cameraLatlong.latitude.toFixed(3) + "," + a.cameraLatlong.longitude.toFixed(3);} else {c = a.latlong.latitude.toFixed(3) + "," + a.latlong.longitude.toFixed(3);}s.prop14 = c + "," + a.GetAltitude().toFixed(0) + "," + a.GetTilt().toFixed(1) + "," + a.GetDirection().toFixed(1);} else {s.prop14 = "";}if (typeof f == "number") {s.prop45 = f;}if (d == "CID Parameter") {try {if (typeof window._collectionIdFromState != "undefined" && window._collectionIdFromState != null) {s.prop39 = window._collectionIdFromState;}} catch (i) {}} else {s.prop39 = "";}if ($VE_A.LogDD == true && b != "VE | Driving Directions Panel") {$VE_A.ResetLogProps(b);return;}var g = $ID("logging");if (g) {g.innerHTML = s.t();}$VE_A.ResetLogProps(b);};
$VE_A.FormatLatLong = function (b, a) {if (!b || !a) {if (state && state.GetLatitude() && state.GetLongitude()) {return state.GetLatitude().toFixed(3) + "," + state.GetLongitude().toFixed(3);}return "0.0,0.0";}return b.toFixed(3) + "," + a.toFixed(3);};
$VE_A.ConvertDistanceToBucket = function (c) {var a = c.distance;if (!a) {return "";}if (c.distanceUnit && c.distanceUnit.indexOf("mi") != -1) {a = Math.round(a * 1.6093);}for (var b = 0; b < $VE_A.distanceBuckets.length; b++) {if ($VE_A.distanceBuckets[b].IsInRange(a)) {return $VE_A.distanceBuckets[b].toString();}}return "1001 and Above";};
$VE_A.LogDDEntryPoint = function (a, c) {var b = c != null;if (!b && VE_Directions.PanelEntryPoint == "") {s.prop17 = a;VE_Directions.PanelEntryPoint = a;$VE_A.Log("VE | Driving Directions Panel", "Driving directions Panel");} else if (b) {s.prop17 = a;$VE_A.Log("VE | Driving Directions Panel", "Driving directions Panel");}};
$VE_A.LogDirections = function (b, c, a) {s.events = "Event3";s.eVar1 = VE_Directions.PanelEntryPoint;s.eVar2 = b;if (VE_Directions.StartEntryPoint == null || VE_Directions.StartEntryPoint == "") {s.eVar3 = VE_Directions.EntryPoint.Manual;} else {s.eVar3 = VE_Directions.StartEntryPoint;}s.eVar4 = c;if (VE_Directions.EndEntryPoint == null || VE_Directions.EndEntryPoint == "") {s.eVar5 = VE_Directions.EntryPoint.Manual;} else {s.eVar5 = VE_Directions.EndEntryPoint;}s.eVar6 = VE_Directions.TrafficStatus;if (a) {s.prop10 = $VE_A.ConvertDistanceToBucket(a);s.prop32 = a.numberOfWaypoints;} else {s.prop10 = "";}$VE_A.LogDD = true;$VE_A.Log("VE | Driving Directions Panel", "Driving directions Panel");};
$VE_A.ResetLogProps = function (a) {s.prop3 = "";s.prop4 = "";s.prop5 = "";s.prop8 = "";s.prop10 = "";s.prop11 = "";s.prop12 = "";s.prop17 = "";s.prop18 = "";s.prop19 = "";s.prop21 = "";s.prop25 = "";s.prop26 = "";s.prop27 = "";s.prop32 = "";s.prop33 = "";s.prop34 = "";s.prop35 = "";s.prop38 = "";s.prop45 = "";s.prop48 = "";s.events = "";s.eVar8 = "";s.eVar9 = "";s.eVar10 = "";s.eVar11 = "";s.eVar12 = "";s.eVar17 = "";s.campaign = "";s.eVar1 = "";s.eVar2 = "";s.eVar3 = "";s.eVar4 = "";s.eVar5 = "";s.eVar6 = "";if (a != null && $VE_A.LogDD == true && a == "VE | Driving Directions Panel") {$VE_A.LogDD = false;}};
var VE_ModuleName = {APICORE:"core", APICONTROLS:"controls", APIBIRDSEYE:"birdseye", APILAYERS:"layers", APIFIND:"find", APIROUTING:"routing", APITRAFFIC:"traffic", API3D:"3d", APITILES:"tiles"}, _VE_ModuleStatus = {core:"loaded", layers:null, controls:null, find:null, routing:null, traffic:null, _3d:null, birdseye:null, tiles:null};

function _VE_InitAllModules(a) {
    if (Msn.VE.API.Globals.vemapinstances || a == null) {
        var b = Msn.VE.API.Globals.vemapinstances;
        for (var c in b) {
            if (b[c] instanceof VEMap) {
                b[c]._InitializeModules(a.split(","));
            }
        }
    }
    if (_VEDownloadQueue) {
        _VEDownloadQueue.Fire(a);
    }
}


function VE_GetLoadedAPIModules() {
    var b = [VE_ModuleName.APICORE, VE_ModuleName.APICONTROLS, VE_ModuleName.APIBIRDSEYE, VE_ModuleName.APILAYERS, VE_ModuleName.APIFIND, VE_ModuleName.APIROUTING, VE_ModuleName.APITRAFFIC, VE_ModuleName.API3D, VE_ModuleName.APITILES], c = [], d = b.length;
    for (var a = 0; a < d; a++) {
        if (VE_CheckModuleStatus(b[a]) == "loaded") {
            c.push(b[a]);
        }
    }
    return c;
}


function VE_CheckModuleStatus(a) {
    if (a == VE_ModuleName.API3D) {
        a = "_" + a;
    }
    return _VE_ModuleStatus[a];
}


function VE_SetModuleStatus(a, b) {
    if (a == null && typeof _VE_ModuleStatus[a] == "undefined") {
        return;
    }
    if (a == VE_ModuleName.API3D) {
        a = "_" + a;
    }
    _VE_ModuleStatus[a] = b;
}

VE_RequestUrl = Msn.VE.API.Globals.vecurrentdomain + "/veapi.ashx?VEAPI_DisableAtlasCompat=true&v=" + Msn.VE.API.Globals.vecurrentversion + "&modules";

function VEOndemandJsDownloads(l, a, d, g) {
    var e = null;
    try {
        if (a == null || typeof a != "string" || typeof d != "object") {
            throw new VEException("VEJsDownloadQueue:Fire", "err_invalidmoduleurl", L_noscripturl_text);
        }
        if (typeof g != "object") {
            g = null;
        }
        var j = false, h = false, b = null;
        b = a.split(",");
        var m = b.length, i = true, f = null;
        for (var c = 0; c < m; c++) {
            f = VE_CheckModuleStatus(b[c]);
            if (typeof f == "undefined") {
                throw new VEException("VEJsDownloadQueue:Fire", "err_invalidmoduleurl", L_noscripturl_text);
            } else if (f == null) {
                if (i) {
                    a = b[0];
                    i = false;
                } else {
                    a += "," + b[c];
                }
                j = true;
                VE_SetModuleStatus(b[c], "loading");
            } else if (f == "loading") {
                h = true;
            }
        }
        if (j) {
            if (_VEDownloadQueue == null) {
                _VEDownloadQueue = new VEJsDownloadQueue;
            }
            var k = VE_RequestUrl + "=" + a;
            _VEDownloadQueue.Push(a, d.GUID, g);
            if (l) {
                VENetwork.DownloadScript(k);
            } else {
                VENetwork.DownloadScript(k, _VEDownloadQueue.Fire, a);
            }
            e = null;
        } else if (h) {
            _VEDownloadQueue.Push(a, d.GUID, g);
            e = null;
        } else {
            e = d;
        }
    } catch (n) {
        throw n;
    }
    return e;
}


function VEJsDownloadQueue() {
    var a = [], c = [], b = [];
    this.Dispose = function () {a = [];c = [];b = [];};
    this.Push = function (d, f, e) {if (typeof mapContext == "undefined") {mapContext = null;}a.push(e);c.push(d);b.push(f);};
    this.Fire = function (f) {try {if (a.length == 0) {return;}for (var d = 0; d < a.length; d++) {if (c[d] == f) {if (b[d]) {var e = null;e = Msn.VE.API.Globals.vemapinstances[b[d]];if (e && typeof a[d][0] == "function") {a[d][0].call(e, a[d][1], a[d][2], a[d][3], a[d][4]);} else {throw new VEException("VEJsDownloadQueue:Fire", "err_invalidinvoketarget", L_invalidinvoketarget_text);}} else {a[d][0](a[d][1], a[d][2], a[d][3], a[d][4]);}a.splice(d, 1);c.splice(d, 1);b.splice(d, 1);d--;}}} catch (g) {throw g;}};
}

var _VEDownloadQueue = null;
_VERegisterNamespaces("Msn.VE");
Msn.VE.Animation = {Animation:function (h, f) {var b = false;this.Running = b;var e = h, d = f, a = null;
function c() {if (b) {e();a = setTimeout(c, d);} else {a = null;}}

function g() {if (!b) {b = true;c();a = window.setTimeout(c, d);}}
this.Start = g;
function i() {if (a != null) {window.clearTimeout(a);a = null;}b = false;}
this.Stop = i;}, AccelerationFunction:function (e) {var b = null, a = 200, d = e;this.setSteps = function (d) {a = d;b = null;c();};this.getSteps = function () {return a;};this.getValue = function (e) {if (!b) {c();}var d = parseInt(Math.round(e * a));if (d < 0) {d = 0;}if (d > a) {d = a;}return b[d];};this.getTotal = function () {return this.getValue(1);};
function c() {b = [];b[0] = 0;for (var c = 1; c <= a; c++) {b[c] = b[c - 1] + d(c / a);}}
}, Movie:function (b, g) {var a = this;this.Repeat = true;this.AppendContent = true;var e = [], c = -1, d = null;this.addFrame = function (b, a) {if (a == null) {a = true;}var c = {data:b, append:a};e.push(c);};this.start = function () {a.stop();a.show();a.clear();c = -1;d = setInterval(h, g);};this.stop = function () {if (d) {clearInterval(d);}};this.end = function () {a.stop();f(e.length - 1);};this.show = function () {b.style.visibility = "visible";};this.hide = function () {b.style.visibility = "hidden";};this.clear = function () {b.innerHTML = "";};
function h() {c++;if (c > e.length - 1) {c = 0;if (!a.Repeat) {clearInterval(d);return;} else {a.clear();}}f(c);}

function f(c) {var a = e[c];if (a.append) {b.innerHTML += a.data;} else {b.innerHTML = a.data;}}
}, RollDirection:{TopDown:1, RightLeft:2, BottomUp:4, LeftRight:8}, RollStyle:{In:0, Out:1}, Roller:function (q) {var c = this;this.superclass = Msn.VE.OO.Eventable.EventableObject;this.superclass();var d = Msn.VE.Css, b = Msn.VE.Animation, h = Msn.VE.OO.Eventable, a = q, e = null, k = true, g = false, f = AccelerationFunctions.CrazyElevator, i = 10, j = 10, l = 5, p = {top:1, right:2, bottom:3, left:4}, o = {top:3, right:4, bottom:1, left:2};this.setAccelerationFunction = function (a) {if (a instanceof Msn.VE.Animation.AccelerationFunction) {f = a;}};this.setXLeave = function (a) {if (typeof a == "number" && a >= 0) {i = Math.floor(a, 10);}};this.setYLeave = function (a) {if (typeof a == "number" && a >= 0) {j = Math.floor(a, 10);}};this.getLeave = function () {return {x:i, y:j};};this.setDelay = function (a) {if (typeof a == "number" && a > 0) {l = Math.floor(a, 10);}};this.isExpanded = function () {return k;};this.isRolling = function () {return g;};this.isAssociated = function () {if (e != null && e.length > 0) {return true;}return false;};this.associate = function (a) {if (a instanceof Array) {e = a;}};this.rollIn = function (d) {if (g) {return;}c.executeEvent("beforerollin", c, new h.EventArgs("beforerollin", a));m(b.RollStyle.In, d);k = false;};this.rollOut = function (d) {if (g) {return;}c.executeEvent("beforerollout", c, new h.EventArgs("beforerollout", a));m(b.RollStyle.Out, d);k = true;};
function m(t, m) {g = true;n();var k = p, q = 0, r = 0;if (t == b.RollStyle.Out) {k = o;q = i;r = j;}var w = a.offsetWidth, u = a.offsetHeight, y = w - i, z = u - j, A = y / f.getTotal(), B = z / f.getTotal(), v = f.getSteps();for (var s = 0; s <= v; s++) {var x = s / v;setTimeout(C(x), s * l);}
function C(i) {return function () {var l = parseInt(Math.round(f.getValue(i) * A)) + q, n = parseInt(Math.round(f.getValue(i) * B)) + r, j = {top:0, right:0, bottom:0, left:0};if ((m & b.RollDirection.TopDown) == b.RollDirection.TopDown) {d.Functions.setClip(a, k.top, n + d.Units.Pixels);j.top = n - r;}if ((m & b.RollDirection.RightLeft) == b.RollDirection.RightLeft) {d.Functions.setClip(a, k.right, w - l + d.Units.Pixels);j.right = - l + q;}if ((m & b.RollDirection.BottomUp) == b.RollDirection.BottomUp) {d.Functions.setClip(a, k.bottom, u - n + d.Units.Pixels);j.bottom = - n + r;}if ((m & b.RollDirection.LeftRight) == b.RollDirection.LeftRight) {d.Functions.setClip(a, k.left, l + d.Units.Pixels);j.left = l - q;}if (e != null) {var p;for (p = 0; p < e.length; p++) {var o = e[p], v = j.top + j.bottom, y = o.origPos.y + v, s = j.left + j.right, x = o.origPos.x + s;if (s != 0) {o.style.left = x + d.Units.Pixels;}if (v != 0) {o.style.top = y + d.Units.Pixels;}}}if (i == 1) {g = false;if (t == b.RollStyle.In) {c.executeEvent("afterrollin", c, new h.EventArgs("afterrollin", a));} else {a.style.clip = "rect(auto auto auto auto)";c.executeEvent("afterrollout", c, new h.EventArgs("afterrollout", a));}}c.executeEvent("roll", c, new h.EventArgs("roll", a));};}
}

function n() {var b = Msn.VE.Css;if (e == null) {return;}var c, i = e.length;for (c = 0; c < i; c++) {var a = e[c];a.origPos = {x:parseInt(b.Functions.getComputedStyle(a, "left")), y:parseInt(b.Functions.getComputedStyle(a, "top"))};if (isNaN(a.origPos.x)) {var f = parseInt(b.Functions.getComputedStyle(a, "marginLeft"), 10), d = parseInt(b.Functions.getCoputedStyle(a, "paddingLeft"), 10);a.origPos.x = a.offsetLeft - (isNaN(f) ? 0 : f) - (isNaN(d) ? 0 : d);}if (isNaN(a.origPos.y)) {var h = parseInt(b.Functions.getComputedStyle(a, "marginTop"), 10), g = parseInt(b.Functions.getComputedStyle(a, "paddingTop"), 10);a.origPos.y = a.offsetTop - (isNaN(h) ? 0 : h) - (isNaN(g) ? 0 : g);}}b = null;}
}, Slider:function () {var d = this, c = Msn.VE.Geometry, a = AccelerationFunctions.Linear, b = 5;this.setAccelerationFunction = function (b) {if (b instanceof Msn.VE.Animation.AccelerationFunction) {a = b;}};this.setDelay = function (a) {if (typeof a == "number" && a > 0) {b = a;}};this.slideToPoint = function (e, i) {var d = new c.Point(e.offsetLeft, e.offsetTop), n = d.getDistanceFrom(i);a.setSteps(Math.floor(n / 10));var p = n / a.getTotal(), o = i.y - d.y, l = i.x - d.x, f = Math.atan(o / l), m = a.getSteps();for (var h = 0; h <= m; h++) {sum = a.getValue(h / m);var g = sum * p, k, j;if (l < 0) {k = d.y - Math.sin(f) * g;j = d.x - Math.cos(f) * g;} else {k = d.y + Math.sin(f) * g;j = d.x + Math.cos(f) * g;}setTimeout(q(j, k), h * b);}
function q(a, b) {return function () {e.style.top = parseInt(Math.round(b)) + "px";e.style.left = parseInt(Math.round(a)) + "px";};}
};}};
var AccelerationFunctions = {Linear:new Msn.VE.Animation.AccelerationFunction(function () {return 1;}), ExponentialAcc:new Msn.VE.Animation.AccelerationFunction(function (b) {var a = 0, d = 1, c = d - a, f = a + b * c, e = Math.pow(f, 2);return e;}), ExponentialDec:new Msn.VE.Animation.AccelerationFunction(function (b) {var a = -1, d = 0, c = d - a, f = a + b * c, e = Math.pow(f, 2);return e;}), CosineWave:new Msn.VE.Animation.AccelerationFunction(function (b) {var a = - Math.PI, d = Math.PI, c = d - a, f = a + b * c, e = Math.cos(f) + 1;return e;}), CrazyElevator:new Msn.VE.Animation.AccelerationFunction(function (b) {var a = -5, d = 5, c = d - a, f = a + b * c, e = 2 / (Math.pow(Math.abs(f), 3) + 1);return e;})};
_VERegisterNamespaces("Msn.VE.Geometry");
Msn.VE.Geometry.Point = function (c, d) {var a = this, b = Msn.VE.Geometry;this.x = c;this.y = d;this.add = function (c, d) {var e = new b.Point(a.x + c, a.y + d);return e;};this.getDistanceFrom = function (b) {var c = Math.pow(b.x - a.x, 2) + Math.pow(b.y - a.y, 2), d = Math.sqrt(c);return d;};};
Msn.VE.Geometry.Overlap = {Range:{GreaterThanX:1, LessThanX:2, GreaterThanY:4, LessThanY:8, InXRange:16, InYRange:32, InRange:48}, getInstance:function (f, g) {var d = Msn.VE.Geometry.Overlap, a = f, b = g, c = 0;e();
function e() {if (b.getP2().x > a.getP2().x) {c += d.Range.GreaterThanX;}if (b.getP1().x < a.getP1().x) {c += d.Range.LessThanX;}if (b.getP2().y > a.getP2().y) {c += d.Range.GreaterThanY;}if (b.getP1().y < a.getP1().y) {c += d.Range.LessThanY;}if (a.getP1().x <= b.getP1().x && b.getP2().x <= a.getP2().x) {c += d.Range.InXRange;}if (a.getP1().y <= b.getP1().y && b.getP2().y <= a.getP2().y) {c += d.Range.InYRange;}}
this.getRange = function () {return c;};this.getLeftXBleed = function () {if (c & d.Range.LessThanX) {return Math.abs(a.getP1().x - b.getP1().x);} else {return 0;}};this.getRightXBleed = function () {if (c & d.Range.GreaterThanX) {return b.getP2().x - a.getP2().x;} else {return 0;}};this.getTopYBleed = function () {if (c & d.Range.LessThanY) {return Math.abs(a.getP1().y - b.getP1().y);} else {return 0;}};this.getBottomYBleed = function () {if (c & d.Range.GreaterThanY) {return b.getP2().y - a.getP2().y;} else {return 0;}};}};
Msn.VE.Geometry.Rectangle = function (h, i) {var g = this, a = h, b = i, d, e;f();
function f() {c();}
this.move = function (c) {a.x = c.x;a.y = c.y;b.x = c.x + e;b.y = c.y + d;};this.getP1 = function () {return a;};this.getP2 = function () {return b;};this.setP1 = function (b) {a = b;c();};this.setP2 = function (a) {b = a;c();};this.getWidth = function () {return e;};this.getHeight = function () {return d;};this.containsPoint = function (c) {return c.x >= a.x && c.x <= b.x && c.y >= a.y && c.y <= b.y;};this.scale = function (d) {a.x -= d;a.y -= d;b.x += d;b.y += d;c();};this.getOverlap = function (a) {var b = Msn.VE.Geometry;return new b.Overlap.getInstance(g, a);};
function c() {d = b.y - a.y;e = b.x - a.x;}
};
Msn.VE.Geometry.Functions = {getSlope:function (a, b) {return (b.y - a.y) / (b.x - a.x);}, getYIntercept:function (b, a) {return a.y - b * a.x;}, getElementPosition:function (a) {var b = 0, c = 0;while (a && a.offsetParent) {b += a.offsetLeft - a.scrollLeft;c += a.offsetTop - a.scrollTop;a = a.offsetParent;}return {x:b, y:c};}, getMousePosition:function (a) {if (typeof a == "undefined") {a = window.event;}var b = {x:0, y:0};if (typeof a.pageX != "undefined" && typeof a.x != "undefined") {b.x = a.pageX;b.y = a.pageY;} else {var c = this.getScrollPosition();b.x = a.clientX + c.x;b.y = a.clientY + c.y;}return b;}, getScrollPosition:function () {var a = {x:0, y:0};if (typeof window.pageYOffset != "undefined") {a.x = window.pageXOffset;a.y = window.pageYOffset;} else if (typeof document.documentElement.scrollTop != "undefined" && document.documentElement > 0) {a.x = document.documentElement.scrollLeft;a.y = document.documentElement.scrollTop;} else if (typeof document.body.scrollTop != "undefined") {a.x = document.body.scrollLeft;a.y = document.body.scrollTop;}return a;}, getViewportSize:function () {var a = {x:0, y:0};if (typeof window.innerWidth != "undefined") {a.x = window.innerWidth;a.y = window.innerHeight;} else if (typeof document.documentElement != "undefined" && typeof document.documentElement.clientWidth != "undefined" && document.documentElement.clientWidth != 0) {a.x = document.documentElement.clientWidth;a.y = document.documentElement.clientHeight;} else {a.x = document.getElementsByTagName("body")[0].clientWidth;a.y = document.getElementsByTagName("body")[0].clientHeight;}return a;}, getBestBoundingPoint:function (f, b, c) {var a = Msn.VE.Geometry;if (!b) {b = a.Functions.getElementPosition(f);}var e = new a.Rectangle(b, new a.Point(b.x + f.offsetWidth, b.y + f.offsetHeight)), i = c.getOverlap(e), d = i.getRange();if ((d & a.Overlap.Range.InRange) == a.Overlap.Range.InRange) {return b;}var g = b.x, h = b.y;if (d & a.Overlap.Range.GreaterThanX) {g = c.getP2().x - e.getWidth();}if (d & a.Overlap.Range.LessThanX) {g = c.getP1().x;}if (d & a.Overlap.Range.GreaterThanY) {h = c.getP2().y - e.getHeight();}if (d & a.Overlap.Range.LessThanY) {h = c.getP1().y;}return new a.Point(g, h);}};
_VERegisterNamespaces("Msn.VE.OO.Eventable");
Msn.VE.OO.Eventable.EventArgs = function (b, a) {this.EventName = b;this.Recipient = a;};
Msn.VE.OO.Eventable.EventableObject = function () {if (typeof window.attachEvent != "undefined") {window.attachEvent("onunload", c);}var a = [];this.getEventHash = function () {return a;};this.hookEvent = function (d, e) {var c = a[d];if (typeof c == "undefined" || c == null) {c = new b(d);a[d] = c;}c.addEvent(e);};this.unhookEvent = function (d, e) {var c = a[d];if (c instanceof b) {c.removeEvent(e);}};this.executeEvent = function (g, h, f) {var d = a[g];if (!(d instanceof b)) {return;}var e = d.getEvents(), c;for (c = 0; c < e.length; c++) {e[c].call(h, f);}};
function b(b) {var c = b, a = [];this.addEvent = function (c) {if (typeof c == "function") {var b;for (b = 0; b < a.length; b++) {if (a[b] == c) {return;}}a.push(c);}};this.removeEvent = function (c) {if (typeof c != "function") {return;}var b;for (b = 0; b < a.length; b++) {if (a[b] == c) {a[b] = null;delete a[b];a.splice(b, 1);}}};this.destroy = function () {var b;for (b = 0; b < a.length; b++) {a[b] = null;delete a[b];}};this.getEvents = function () {return a;};}

function c() {var c;for (c in a) {if (a[c] instanceof b) {a[c].destroy();a[c] = null;}}a = null;}
};
var ERO = {Classes:{ContainerNoBeak:"ero ero-noBeak", ContainerRightBeak:"ero ero-rightBeak", ContainerLeftBeak:"ero ero-leftBeak", Beak:"ero-beak", Shadow:"ero-shadow", Body:"ero-body", Actions:"ero-actions", ActionsBackground:"ero-actionsBackground", PreviewArea:"ero-previewArea", PaddingHack:"ero-paddingHack", ProgressAnimation:"ero-progressAnimation"}, DefaultClasses:null, BeakDirection:{Right:0, Left:1}, DockPosition:{Top:0, Center:1}, m_theEro:null, BeakHeight:34, Glitz:function (d, e, b, c) {var a = this;this.useBeak = d;this.useFade = e;this.useProgressTimer = b;this.isTemporary = c;this.copy = function () {return new ERO.Glitz(a.useBeak, a.useFade, a.useProgressTimer, a.isTemporary);};}, EROEventArgs:function (c, a, b) {this.superclass = Msn.VE.OO.Eventable.EventArgs;this.superclass(c, a);this.Entity = b;}, getInstance:function () {var a = Msn.VE.Geometry;if (!ERO.m_theEro) {ERO.m_theEro = new b;ERO.m_theEro.setBoundingArea(null);}ERO.m_theEro.addToPage();return ERO.m_theEro;
function b() {this.superclass = Msn.VE.OO.Eventable.EventableObject;this.superclass();var c = this, v = null, k = null, h = null, g = false, e = new ERO.Glitz(true, true, true, false), y = e.copy(), s = 0, w = false, b = document.createElement("div");b.className = ERO.Classes.ContainerLeftBeak;if (typeof b.addEventListener != "undefined") {b.addEventListener("mouseover", t, false);b.addEventListener("mouseout", u, false);} else {b.attachEvent("onmouseover", t);b.attachEvent("onmouseout", u);}var o = document.createElement("div");o.className = ERO.Classes.Shadow;var i = document.createElement("div");i.className = ERO.Classes.Body;var n = document.createElement("div");n.className = ERO.Classes.Actions;var m = document.createElement("ul"), l = document.createElement("div");l.className = ERO.Classes.ActionsBackground;var j = document.createElement("div");j.className = ERO.Classes.PreviewArea;var p = document.createElement("div");p.className = ERO.Classes.Beak;var r = document.createElement("div");r.className = ERO.Classes.PaddingHack;b.appendChild(o);b.appendChild(p);o.appendChild(i);i.appendChild(l);l.appendChild(j);l.appendChild(n);n.appendChild(m);l.appendChild(r);var f = document.createElement("div");f.className = ERO.Classes.ProgressAnimation;var d = new Msn.VE.Animation.Movie(f, 75);d.addFrame("<div class = \"frame1\"></div>");d.addFrame("<div class = \"frame2\"></div>");d.addFrame("<div class = \"frame3\"></div>");d.addFrame("");d.addFrame("");d.addFrame("<div class = \"frame2\"></div><div class = \"frame3\"></div>", false);d.addFrame("<div class = \"frame3\"></div>", false);d.Repeat = false;this.destroy = function () {if (b) {if (typeof b.removeEventListener != "undefined") {b.removeEventListener("mouseover", t, false);b.removeEventListener("mouseout", u, false);} else {b.detachEvent("onmouseover", t);b.detachEvent("onmouseout", u);}if (i.shimElement) {i.shimElement.removeNode(true);i.shimElement = null;}b = null;o = null;i = null;n = null;m = null;l = null;j = null;p = null;r = null;}h = null;};this.getElement = function () {return b;};this.getBody = function () {return i;};this.getAnimation = function () {return d;};this.setClasses = function (b, d) {var a;if (ERO.DefaultClasses === null) {ERO.DefaultClasses = {};for (a in ERO.Classes) {ERO.DefaultClasses[a] = ERO.Classes[a];}}if (d !== false) {c.setClasses(ERO.DefaultClasses, false);}for (a in b) {if (typeof ERO.Classes[a] != "undefined") {ERO.Classes[a] = b[a];}}z();};this.setBeak = function (a) {if (a == ERO.BeakDirection.Left) {b.className = ERO.Classes.ContainerLeftBeak;} else {b.className = ERO.Classes.ContainerRightBeak;}};this.setContent = function (c) {var a = document.createElement("div");a.className = "firstChild";a.innerHTML = c;var b = j.firstChild;if (b) {j.replaceChild(a, b);} else {j.appendChild(a);}a = null;b = null;};this.addAction = function (b) {var a = document.createElement("li");if (!b) {return;}a.innerHTML = b;m.appendChild(a);a = null;};this.clearActions = function () {var a = m.getElementsByTagName("li"), c = a.length;for (var b = 0; b < c; b++) {m.removeChild(a[0]);}};this.dockToText = function (d, b) {b = typeof b != "undefined" ? b : typeof window.event != "undefined" ? window.event : null;var i = a.Functions.getElementPosition(d), g = a.Functions.getMousePosition(b).x, h = new a.Point(g, i.y), e = new a.Point(0, parseInt(f.offsetHeight / 2, 10));c.dockToPoint(h, e, d);};this.dockToElement = function (b) {var d = a.Functions.getElementPosition(b), e = new a.Rectangle(d, new a.Point(d.x + b.offsetWidth, d.y + b.offsetHeight));c.dockToRect(e, null, b);};this.dockToPoint = function (b, d, e) {c.dockToRect(new a.Rectangle(b, b), d, e);};this.dockToRect = function (n, s, F) {if (h === F) {clearTimeout(v);if (g) {return;}} else if (h !== null) {clearTimeout(v);x();}var m = "px";g = true;h = F;b.style.visibility = "hidden";c.setBeak(ERO.BeakDirection.Left);if (typeof s == "undefined" || s == null) {s = {x:0, y:0};}var i = j.offsetHeight - ERO.BeakHeight;f.style.top = n.getP1().y - f.offsetHeight + s.y + m;f.style.left = n.getP2().x - f.offsetWidth + s.x + m;var y = n.getP2().x, C = n.getP2().y - i - ERO.BeakHeight / 2 - n.getHeight() / 2, z = c.getSize(), G = z.getP2().y - z.getP1().y, D = z.getP2().x - z.getP1().x, H = new a.Rectangle(new a.Point(y, C), new a.Point(y + D, C + G)), A = k.getOverlap(H), o = A.getRange(), r, u, t, l;r = u = t = l = "auto";if (o & a.Overlap.Range.InXRange) {l = y;}if (o & a.Overlap.Range.InYRange) {r = C;}if (o & a.Overlap.Range.GreaterThanX) {c.setBeak(ERO.BeakDirection.Right);if (y > k.getP2().x) {u = document.body.clientWidth - k.getP2().x;} else {l = y - D - n.getWidth();}}if (o & a.Overlap.Range.LessThanX) {c.setBeak(ERO.BeakDirection.Left);l = k.getP1().x;}if (o & a.Overlap.Range.GreaterThanY) {t = document.body.clientHeight - k.getP2().y;var E = A.getBottomYBleed();i += E;if (i > b.offsetHeight - ERO.BeakHeight) {i = b.offsetHeight - ERO.BeakHeight - 4;}}if (o & a.Overlap.Range.LessThanY) {r = k.getP1().y;var E = A.getTopYBleed();i -= E;if (i < 0) {i = 0;}}b.style.top = r == "auto" ? r : r + m;b.style.bottom = t == "auto" ? t : t + m;b.style.left = l == "auto" ? l : l + m;b.style.right = u == "auto" ? u : u + m;p.style.top = i + "px";c.executeEvent("beforeshow", c, new ERO.EROEventArgs("beforeshow", b, h));if (!e.useBeak) {b.className = ERO.Classes.ContainerNoBeak;}w = false;if (e.useProgressTimer) {d.start();if (!e.useFade) {setTimeout(q, 500);return;}}if (e.useFade) {setTimeout(B, 500);} else {q();}};this.showImmediate = function () {w = g = true;d.end();q();};this.hide = function (a) {g = false;if (a === true) {x();} else {clearTimeout(v);v = setTimeout(x, 500);}};this.setGlitz = function (c, d, a, b) {if (c != null) {e.useBeak = c;}if (d != null) {e.useFade = d;}if (a != null) {e.useProgressTimer = a;}if (b === true) {e.isTemporary = b;} else {y = e.copy();}};this.setBoundingArea = function (e, f) {if (e === null) {var b = a.Functions.getScrollPosition(), c = a.Functions.getViewportSize(), d = new a.Rectangle(new a.Point(0, 0), new a.Point(c.x, c.y));d.move(new a.Point(b.x, b.y));k = d;} else {k = new a.Rectangle(e, f);}};this.isInUse = function () {return g;};this.addToPage = function () {b.style.visibility = "hidden";f.style.visibility = "hidden";document.body.appendChild(b);document.body.appendChild(f);};this.getSize = function () {var c = b.offsetLeft, d = b.offsetTop, f = c + b.offsetWidth, g = d + b.offsetHeight, e = new a.Rectangle(new a.Point(c, d), new a.Point(f, g));return e;};
function A(b, a) {if (b == a) {return false;}while (a && a != b) {a = a.parentNode;}return a == b;}

function t() {g = true;}

function u(a) {var d = a.relatedTarget || a.toElement;if (!A(b, d)) {c.hide();}}

function q() {if (b.style.visibility != "visible") {b.style.visibility = "visible";}if (typeof b.style.opacity != "undefined") {b.style.opacity = 1;}c.executeEvent("aftershow", c, new ERO.EROEventArgs("aftershow", b, h));}

function x() {if (!g) {c.executeEvent("beforehide", c, new ERO.EROEventArgs("beforehide", b, h));b.style.visibility = "hidden";d.hide();h = null;c.executeEvent("afterhide", c, new ERO.EROEventArgs("afterhide", b, h));}e = y.copy();}

function B() {if (w || !g) {return;}if (b.style && typeof b.style.filter != "undefined") {b.style.filter = "progid:DXImageTransform.Microsoft.Fade(duration=.5)";b.filters[0].Apply();b.style.visibility = "visible";b.style.display = "block";b.filters[0].Play();var c = setInterval(function () {if (b.filters[0].status == 0) {clearInterval(c);q();}}, 10);} else {b.style.visibility = "visible";if (s === 0) {a();}}
function a() {if (g && ++s <= 10) {var c = s * 0.09999999;b.style.opacity = c;setTimeout(a, 50);} else {q();s = 0;}}
}

function z() {b.className = ERO.Classes.Container;o.className = ERO.Classes.Shadow;i.className = ERO.Classes.Body;p.className = ERO.Classes.Beak;n.className = ERO.Classes.Actions;l.className = ERO.Classes.ActionsBackground;j.className = ERO.Classes.PreviewArea;r.className = ERO.Classes.PaddingHack;f.className = ERO.Classes.ProgressAnimation;}
}
}};
_VERegisterNamespaces("Msn.VE.UI");
Msn.VE.UI.IEGlyphStates = {Unselected:"-unselected", Hover:"-hover", Pressed:"-pressed"};
Msn.VE.UI.IEGlyph = function (j, l) {var k = Msn.VE.UI, a, d, c, b;m();
function m() {a = document.createElement("div");if (j) {a.id = j;}b = l || "ieglyph";d = b + k.IEGlyphStates.Hover;c = b + k.IEGlyphStates.Pressed;a.className = b;if (!document.all) {return;}a.attachEvent("onmouseover", e);a.attachEvent("onmousedown", i);a.attachEvent("onmouseup", e);a.attachEvent("onmouseout", f);window.attachEvent("onunload", n);}
this.getElement = function () {return a;};this.setContent = function (b) {a.innerHTML = b;};
function n() {a.detachEvent("onmouseover", e);a.detachEvent("onmousedown", i);a.detachEvent("onmouseup", e);a.detachEvent("onmouseout", f);a = null;d = null;c = null;b = null;}

function e() {f();h(d);}

function i() {h(c);}

function f() {g(d);g(c);}

function h(b) {a.className += " " + b;}

function g(b) {var c = new RegExp(" " + b, "g");a.className = a.className.replace(c, "");}
};

function VETime() {
}

VETime.FormatTime = function (a) {if (a == null || a == "" || a == "undefined") {return "";}var c = false, d = a.substr(0, 10), e = a.substr(11, 5), b = "";if (a.indexOf("AM") > -1) {b = "AM";c = true;} else {b = "PM";}return d + " " + VETime.ConvertTo12HourFormat(e, c) + " " + b;};
VETime.ConvertTo12HourFormat = function (d, c) {var a = d;try {var b = parseFloat(a.replace(":", "."));if (b > 12) {if (b < 13 && c != true) {} else {b = b - 12;}}a = b.toFixed(2);a = a.replace(".", ":");} catch (e) {a = "";}return a;};
VETime.FormatPanelTime = function (a, g) {if (a == null || a == "" || a == "undefined") {return "";}try {var b = 0, d = false, i = a.substr(4, 8), h = a.indexOf(":"), f = a.substr(h - 2, 5), c = "";if (a.indexOf("AM") > -1) {c = "AM";d = true;b = a.indexOf("AM");} else {c = "PM";b = a.indexOf("PM");}var e = "";if (b > 0) {e = a.substr(b + 3, 3);}if (g) {return i + " " + VETime.ConvertTo12HourFormat(f, d) + " " + c + " " + e;} else {return VETime.ConvertTo12HourFormat(f, d) + " " + c + " " + e;}} catch (j) {}};
VETime.getMonth = function (a) {switch (a) {case "01":return " Jan";break;case "02":return " Feb";break;case "03":return " Mar";break;case "04":return " Apr";break;case "05":return " May";break;case "06":return " Jun";break;case "07":return " Jul";break;case "08":return " Aug";break;case "09":return " Sep";break;case "10":return " Oct";break;case "11":return " Nov";break;case "12":return " Dec";break;default:;}};
var customCursors = Msn.VE.Css.Cursors.CustomCursors;
if (customCursors != null) {
    var i, len = customCursors.length;
    for (i = 0; i < len; i++) {
        customCursors[i].domain = Msn.VE.API.Globals.vecurrentdomain;
    }
    Msn.VE.Css.Cursors.defineCustomCursors(customCursors);
}
if (!(navigator.userAgent.indexOf("IE") >= 0) &&
    (typeof VEAPI_DisableAtlasCompat == "undefined" ||
    VEAPI_DisableAtlasCompat != true)) {
    VENetwork.DownloadScript(Msn.VE.API.Constants.atlascompatjs, DownloadMapStyles);
} else {
    DownloadMapStyles();
}
try {
    document.namespaces.add("v", "urn:schemas-microsoft-com:vml");
} catch (a) {
}

function DownloadMapStyles() {
    VENetwork.AttachStyleSheet(Msn.VE.API.Constants.erostylesheet);
    VENetwork.AttachStyleSheet(Msn.VE.API.Constants.stylesheet);
    VENetwork.AttachStyleSheet(Msn.VE.API.Constants.trafficstylesheet);
}

VEDashboardSize = new (function () {this.Normal = Msn.VE.DashboardSize.Normal;this.Small = Msn.VE.DashboardSize.Small;this.Tiny = Msn.VE.DashboardSize.Tiny;});

function RequestQueueItem(a, b, c, d) {
    this.Call = a;
    this.Param1 = b;
    this.Param2 = c;
    this.Param3 = d;
}


function VECustomEvent(b, a) {
    this.Name = b;
    this.Callback = a;
}


function VEMap(d) {
    var a = this;
    this.ID = d;
    this.GUID = VENetwork.GetExecutionID();
    this.ClientToken = null;
    if (Msn.VE.API.Globals.vemapinstances == null ||
        Msn.VE.API.Globals.vemapinstances == "undefined") {
        Msn.VE.API.Globals.vemapinstances = [];
    }
    Msn.VE.API.Globals.vemapinstances[this.GUID] = a;
    this.requestQueue = [];
    this.preInitCustomEvents = [];
    this.network = new VENetwork;
    this.mapelement = $ID(d);
    this.pushpins = [];
    this.DisambiguationCallback = null;
    this.ShowMessageBox = true;
    if (this.mapelement == null) {
        throw new VEException("VEMap:cstr", "err_invalidelement", L_invalidelement_text);
    }
    this.m_vedirectionsmanager = null;
    this._dm = this.m_vedirectionsmanager;
    this.m_vesearchmanager = null;
    this._sm = this.m_vesearchmanager;
    this.m_vemessage = new VEMessage(this);
    this.m_veambiguouslist = new VEAmbiguouslist(this);
    var c = new VELatLongFactory(new VELatLongFactorySpecFromMap(this)), b = new VELatLongDecoder;
    this.queueEventInitialized = false;
    this.RequestQueueEnabled = true;
    this.queueEventInitialized = false;
    windowWidth = GetWindowWidth();
    windowHeight = GetWindowHeight();
    scrollbarWidth = GetScrollbarWidth();
    this.dashboardSize = Msn.VE.DashboardSize.Normal;
    this.LoadMap = function (c, h, j, i, d, g, e) {if (!a) {throw new VEException("VEMap:LoadMap", "err_notinitializedmap", L_notinitialized_text);}if (typeof d != "undefined" && d != null) {VEValidator.ValidateMapMode(d, "mapMode");this.mapMode = d;}if (c != null && c != "undefined") {VEValidator.ValidateObject(c, "veLatLong", VELatLong, "VELatLong");var f = b.Decode(c);this.initialLatitude = f.Latitude;this.initialLongitude = f.Longitude;}this.fixedMap = i;this.initialZoomLevel = h;this.initialMapStyle = j;this.showMapModeSwitch = g;if (e != null && typeof e != "undefined") {this.tileBuffer = e;}this.veonmaploadevent = this.onLoadMap;this.mapelement.innerHTML = "";this.mapelement.innerHTML = "<table width=100% height=100%><tr valign=middle><td align=center valign=middle><h3>" + L_loading_text + "</h3></td></tr></table>";this.InitializeMap();this.vemapcontrol.AttachEvent("onstartpan", function () {if (window.ero) {window.ero.hide(true);}});$VE_A.LogAPI("VE | APIs", "VEMap - LoadMap");};
    this._ReArrangeControls = function () {if (a.controlzIndexes != null && a.controls != null && a.controlzIndexes.length == a.controls.length) {var d = a.controls.length;for (var b = 0; b < d; b++) {document.body.removeChild(a.controls[b]);var c = a.controls[b];c.style.top = a.controltops[b];c.style.left = a.controllefts[b];a._AddControlInner(c, a.controlzIndexes[b]);}}};
    this._ClearView = function () {VEMap.ValidateState();VEPushpin.Hide();a.m_vemessage.Hide();if (typeof VE_TrafficManager != "undefined" && VE_TrafficManager.turnedOn == true) {VE_TrafficManager._ViewChangeNotification();}};
    this._RefreshLayers = function () {if (a.vemapcontrol.GetMapMode() != 2) {a.vemapcontrol.PanView();}if (typeof VE_TrafficManager != "undefined" && VE_TrafficManager.turnedOn == true) {VE_TrafficManager._ViewChangeNotification();}};
    this.SetViewport = function (a, c, b, d) {VEMap.ValidateState();try {return this.vemapcontrol.SetViewport(a, c, b, d);} catch (e) {throw e;return;}};
    this.GetCenter = function () {VEMap.ValidateState();var b = this.vemapcontrol.GetCenterLatitude(), d = this.vemapcontrol.GetCenterLongitude(), a = c.CreateVELatLong(b, d);$VE_A.LogAPI("VE | APIs", "VEMap - GetCenter");return a;};
    this.GetMapView = function () {VEMap.ValidateState();try {var e;if (this.vemapcontrol.IsModeEnabled(Msn.VE.MapActionMode.Mode3D)) {var d = this.vemapcontrol.Get3DVisibleArea(true);if (d == null) {return null;}var b = d[0], g = d[1], a = d[2], f = d[3];e = new VELatLongRectangle(c.CreateVELatLong(b.latitude, b.longitude), c.CreateVELatLong(a.latitude, a.longitude), c.CreateVELatLong(g.latitude, g.longitude), c.CreateVELatLong(f.latitude, f.longitude));} else {var b = this.vemapcontrol.PixelToLatLong(new VEPixel(0, 0)), a = this.vemapcontrol.PixelToLatLong(new VEPixel(this.GetWidth(), this.GetHeight()));if (b == null || a == null) {return null;}e = new VELatLongRectangle(c.CreateVELatLong(b.latitude, b.longitude), c.CreateVELatLong(a.latitude, a.longitude));}$VE_A.LogAPI("VE | APIs", "VEMap - GetMapView");return e;} catch (h) {throw h;return;}};
    this.PixelToLatLong = function (a, d, b) {VEMap.ValidateState();$VE_A.LogAPI("VE | APIs", "VEMap - PixelToLatLong");try {if (b) {VEValidator.ValidateObjectArray(a, "pixelArray", VEPixel, "VEPixel array");VEValidator.ValidateFunction(b, "callback");if (typeof a.length != "undefined" && a.length > 0) {this.PixelToLatLongAsync(a, d, b);}} else {VEValidator.ValidateObject(a, "pixel", VEPixel, "VEPixel");var e = this.vemapcontrol.PixelToLatLong(a, d), f = c.CreateVELatLong(e.latitude, e.longitude);return f;}} catch (g) {throw g;return;}};
    this.PixelToLatLongAsync = function (a, b, c) {VEMap.ValidateState();try {this.vemapcontrol.PixelToLatLongAsync(a, b, c);$VE_A.LogAPI("VE | APIs", "VEMap - PixelToLatLongAsync");} catch (d) {throw d;return;}};
    this.SetCenter = function (c) {VEMap.ValidateState();try {VEValidator.ValidateObject(c, "veLatLong", VELatLong, "VELatLong");var a = b.Decode(c);$VE_A.LogAPI("VE | APIs", "VEMap - SetCenter");var d = "ElevatedLoc.ashx";if (d.length > 0) {this._QueueRequest(this.vemapcontrol.SetCenterAccurate, a.Latitude, a.Longitude);} else {this._QueueRequest(this.vemapcontrol.SetCenter, a.Latitude, a.Longitude);}} catch (e) {throw e;return;}};
    this.SetCenterClassic = function (c) {VEMap.ValidateState();try {VEValidator.ValidateObject(c, "veLatLong", VELatLong, "VELatLong");var a = b.Decode(c);$VE_A.LogAPI("VE | APIs", "VEMap - SetCenterClassic");this._QueueRequest(this.vemapcontrol.SetCenter, a.Latitude, a.Longitude);} catch (d) {throw d;return;}};
    this.SetCenterAndZoom = function (c, d) {VEMap.ValidateState();try {VEValidator.ValidateObject(c, "veLatLong", VELatLong, "VELatLong");VEValidator.ValidateInt(d, "zoomLevel");var a = b.Decode(c);$VE_A.LogAPI("VE | APIs", "VEMap - SetCenterAndZoom");this._QueueRequest(this.vemapcontrol.SetCenterAndZoom, a.Latitude, a.Longitude, d);return true;} catch (e) {throw e;return;}};
    this.IncludePointInView = function (c) {VEMap.ValidateState();try {VEValidator.ValidateObject(c, "veLatLong", VELatLong, "VELatLong");var a = b.Decode(c);$VE_A.LogAPI("VE | APIs", "VEMap - IncludePointInView");return this.vemapcontrol.IncludePointInViewport(a.Latitude, a.Longitude);} catch (d) {throw d;return;}};
    this.GetOffsetX = function () {return a.vemapcontrol.GetOffsetX();};
    this.GetOffsetY = function () {return a.vemapcontrol.GetOffsetY();};
    this.getSvgLayer = function () {return a.vemapcontrol.getSvgLayer();};
    this.resizeSVG = function () {return a.vemapcontrol.resizeSVG();};
    this.GetsvgDiv = function () {return a.vemapcontrol.GetsvgDiv();};
    this.LatLongToPixel = function (a, e, c) {VEMap.ValidateState();$VE_A.LogAPI("VE | APIs", "VEMap - LatLongToPixel");try {if (c) {VEValidator.ValidateObjectArray(a, "veLatLongArray", VELatLong, "VELatLong array");VEValidator.ValidateFunction(c, "callback");this.LatLongToPixelAsync(a, e, c);} else {VEValidator.ValidateObject(a, "veLatLong", VELatLong, "VELatLong");var d = b.Decode(a), f = new Msn.VE.LatLong(d.Latitude, d.Longitude);return this.vemapcontrol.LatLongToPixel(f, e);}} catch (g) {throw g;return;}};
    this.LatLongToPixelAsync = function (d, f, g) {VEMap.ValidateState();try {var e = [];for (var a = 0; a < d.length; ++a) {var c = b.Decode(d[a]);e[a] = new Msn.VE.LatLong(c.Latitude, c.Longitude);}$VE_A.LogAPI("VE | APIs", "VEMap - LatLongToPixelAsync");this.vemapcontrol.LatLongToPixelAsync(e, f, g);} catch (h) {throw h;}};
    this.PanToLatLong = function (c) {VEMap.ValidateState();try {VEValidator.ValidateObject(c, "veLatLong", VELatLong, "VELatLong");var a = b.Decode(c);$VE_A.LogAPI("VE | APIs", "VEMap - PanToLatLong");this._QueueRequest(this.vemapcontrol.PanToLatLong, a.Latitude, a.Longitude);return true;} catch (d) {throw d;return;}};
    this.SetMapView = function (a) {VEMap.ValidateState();try {VEValidator.ValidateNonNull(a, "arrObject");if (VEMapViewSpecification.prototype.isPrototypeOf(a)) {var h = b.Decode(a.LatLong);view = new Msn.VE.MapView(this.vemapcontrol);view.SetCenterLatLong(new Msn.VE.LatLong(h.Latitude, h.Longitude));view.SetMapStyle(this.vemapcontrol.GetMapStyle());if (a.ZoomLevel != null) {view.SetZoomLevel(a.ZoomLevel);} else {view.SetZoomLevel(this.vemapcontrol.GetZoomLevel());}if (a.Altitude != null) {view.SetAltitude(a.Altitude);}if (a.Heading != null) {view.SetDirection(a.Heading);}if (a.Pitch != null) {view.SetTilt(a.Pitch);}$VE_A.LogAPI("VE | APIs", "VEMap - SetMapView");this._QueueRequest(this.vemapcontrol.SetView, view);return true;}var g = [];if (VELatLongRectangle.prototype.isPrototypeOf(a)) {var c = new Object;c.latitude = a.TopLeftLatLong.Latitude;c.longitude = a.TopLeftLatLong.Longitude;g.push(c);var c = new Object;c.latitude = a.BottomRightLatLong.Latitude;c.longitude = a.BottomRightLatLong.Longitude;g.push(c);} else {VEValidator.ValidateNonNull(a[0], "arrObject[0]");if (VELatLong.prototype.isPrototypeOf(a[0])) {for (var d = 0; d < a.length; d++) {var h = b.Decode(a[d]), c = new Object;c.latitude = h.Latitude;c.longitude = h.Longitude;g.push(c);}} else if (VEPolyline.prototype.isPrototypeOf(a[0])) {for (var d = 0; d < a.length; d++) {var i = a[d], f = i.GetLatLongs();for (var e = 0; e < f.length; e++) {var c = new Object;c.latitude = f[e].Latitude;c.longitude = f[e].Longitude;g.push(c);}}} else if (VEPolygon.prototype.isPrototypeOf(a[0])) {for (var d = 0; d < a.length; d++) {var j = a[d], f = j.GetLatLongs();for (var e = 0; e < f.length; e++) {var c = new Object;c.latitude = f[e].Latitude;c.longitude = f[e].Longitude;g.push(c);}}}}$VE_A.LogAPI("VE | APIs", "VEMap - SetMapView");this._QueueRequest(this.vemapcontrol.SetBestMapView, g);return true;} catch (k) {throw k;return;}};
    this.AddPushpin = function (a) {VEMap.ValidateState();if (typeof a == "object" && !(a instanceof VEPushpin)) {var e = new VEShape(VEShapeType.Pushpin, a);this.AddShape(e);return e;}VEValidator.ValidateObject(a, "vePushpin", VEPushpin, "VEPushpin");var f = this.pushpins.length;for (var d = 0; d < f; d++) {var g = this.pushpins[d];if (g.ID == a.ID) {throw new VEException("VEMap:AddPushpin", "err_invalidpushpinid", L_invalidpushpinid_text);}}this.pushpins.push(a);a._SetMapInstance(this);var c = b.Decode(a.LatLong);if (this.GetMapMode() == Msn.VE.MapActionMode.Mode3D) {this.m_vegraphicsmanager.Add3DPushpin(a.ID, c.Latitude, c.Longitude, 25, 25, "VEAPI_Pushpin", a, Msn.VE.API.Globals.vepushpinpanelzIndex - 1);} else {this.vemapcontrol.AddPushpin(a.ID, c.Latitude, c.Longitude, 25, 25, "VEAPI_Pushpin", a.GetContent(), Msn.VE.API.Globals.vepushpinpanelzIndex - 1);}$VE_A.LogAPI("VE | APIs", "VEMap - AddPushpin");};
    this._DisambiguateCallback = "VEMap._GetMapFromGUID(" + this.GUID + ")._sm.FindAmbiguousListCallBack";
    this._Disambiguate = function (f, b, d, c, e) {VEMap.ValidateState();var a = $ID(this.ID + "_vewhereinput");if (a) {a.value = unescape(f);}this.vemapcontrol.SetViewport(b, d, c, e);if (this.m_vesearchmanager != null && this.lastwhatsearch != null && this.lastwhatsearch.length > 0) {this.Find(this.lastwhatsearch, null, 1, this.m_vesearchmanager.vesearchcallback);}};
    this._DoFind = function () {VEMap.ValidateState();try {this.lastwhatsearch = $ID(this.ID + "_vewhatinput").value;this.lastwheresearch = $ID(this.ID + "_vewhereinput").value;this.Find(this.lastwhatsearch, this.lastwheresearch);} catch (a) {this.ShowMessage(a.message);}};
    this.UpdateAmbiguousList = function (a) {if (this.m_vesearchmanager) {this.m_vesearchmanager.UpdateAmbiguousList(a);}};
    this.SetDashboardSize = function (a) {if (a != "undefined" && a != null) {VEValidator.ValidateDashboardSize(a, "VEDashboardSize");this.dashboardSize = a;} else {this.dashboardSize = VEDashboardSize.Normal;}};
    this.Dispose = function () {try {VEMap.ValidateState();if (a.vemapcontrol != null) {a.vemapcontrol.DetachEvent("onchangeview", a._ClearView);a.vemapcontrol.DetachEvent("onresize", a._ReArrangeControls);a.vemapcontrol.DetachEvent("onendpan", a._RefreshLayers);a.vemapcontrol.DetachEvent("oninitmode", a._EROHouseKeeping);}a.vemapcontrol.DetachEvent("onclick", VEPushpin.Hide);var c = a.controlzIndexes.length;for (var b = 0; b < c; b++) {a.controlzIndexes.pop();}var c = a.controls.length;for (var b = 0; b < c; b++) {try {document.body.removeChild(a.controls[b]);} catch (h) {}a.controls[b] = null;a.controltops[b] = null;a.controllefts[b] = null;}a.controls = null;a.controlzIndexes = null;if (a.m_velayermanager) {a.m_velayermanager.Dispose();}for (var b = 0; b < a.pushpins.length; ++b) {if (a.pushpins[b] != null && a.pushpins[b] != "undefined") {if (a.GetMapMode() == Msn.VE.MapActionMode.Mode3D) {a.m_vegraphicsmanager.Remove3DPushpin(a.pushpins[b].ID);}a.pushpins[b].Dispose();a.pushpins[b] = null;}}a.pushpins = null;if (a.m_vegraphicsmanager) {a.m_vegraphicsmanager.Dispose();}if (a.m_vetilesourcemanager) {a.m_vetilesourcemanager.Dispose();}a.m_vemessage.Dispose();a.m_veambiguouslist.Dispose();try {if (typeof VE_TrafficManager != "undefined") {VE_TrafficManager.Destroy();}} catch (h) {}Msn.VE.API.Globals.vemapinstances[a.GUID] = null;a.veonmaploadevent = null;a.veloadingdiv = null;a.vemapcontrol.Destroy();try {var g = $ID(a.ID);g.innerHTML = "";} catch (h) {}a.ClientToken = null;a.ID = null;a.vemapcontrol = null;var e = 0;for (var f in Msn.VE.API.Globals.vemapinstances) {if (Msn.VE.API.Globals.vemapinstances[f] != null) {++e;}}if (e == 0) {var d = $ID("help");if (d != null && d != "undefined") {document.body.removeChild(d);}Msn.VE.API.Globals.Dispose();}Msn.VE.API.Globals.vemapinstances[this.GUID] = null;var c = a.preInitCustomEvents.length;for (var b = 0; b < c; ++b) {a.preInitCustomEvents.pop();}a.preInitCustomEvents = null;a.requestQueue = null;a.network = null;a.mapelement = null;a.pushpins = null;a = null;ero.setClasses(ERO.DefaultClasses);} catch (h) {}};
}

VEMap._GetMapFromGUID = function (a) {if (Msn.VE.API.Globals.vemapinstances != null && Msn.VE.API.Globals.vemapinstances[a] == null || Msn.VE.API.Globals.vemapinstances[a] == "undefined") {throw new VEException("VEMap:_GetMapFromGUID", "err_notinitialized", L_notinitialized_text);return;}return Msn.VE.API.Globals.vemapinstances[a];};
VEMap.prototype.InitializeMap = function () {_VERegisterNamespaces("Msn.VE");this.mapelement.innerHTML = "";this.mapelement.style.overflow = "hidden";if (this.mapelement.className == null || this.mapelement.className == "undefined" || this.mapelement.className == "") {if (this.mapelement.style == null || this.mapelement.style.height == null || this.mapelement.style.height == "undefined" || this.mapelement.style.height == "") {this.mapelement.style.height = Msn.VE.API.Globals.vemapheight + "px";}if (this.mapelement.style == null || this.mapelement.style.width == null || this.mapelement.style.width == "undefined" || this.mapelement.style.width == "") {this.mapelement.style.width = Msn.VE.API.Globals.vemapwidth + "px";}}var a = new Object;if (this.mapMode != null && this.mapMode != "undefined") {a.mapMode = this.mapMode;} else {a.mapMode = Msn.VE.API.Globals.vemapmode;}a.mapGUID = this.GUID;a.clientToken = this.ClientToken;if (this.initialLatitude != null && this.initialLatitude != "undefined") {a.latitude = this.initialLatitude;} else {a.latitude = Msn.VE.API.Globals.vemaplatitude;}if (this.initialLongitude != null && this.initialLongitude != "undefined") {a.longitude = this.initialLongitude;} else {a.longitude = Msn.VE.API.Globals.vemaplongitude;}if (this.initialZoomLevel != null && this.initialZoomLevel != "undefined") {a.zoomlevel = this.initialZoomLevel;} else {a.zoomlevel = Msn.VE.API.Globals.vemapzoom;}if (this.initialMapStyle != null && this.initialMapStyle != "undefined") {a.mapstyle = this.initialMapStyle;} else {a.mapstyle = Msn.VE.API.Globals.vemapstyle;}this.m_dashboardId = this.ID + "_dashboard";if (this.fixedMap != true) {a.showDashboard = VE_CheckModuleStatus(VE_ModuleName.APICONTROLS) == "loaded" ? true : false;a.dashboardSize = this.dashboardSize;a.dashboardX = 5;a.dashboardY = 5;a.dashboardId = this.m_dashboardId;a.showScaleBar = true;}a.obliqueEnabled = true;a.obliqueUrl = Msn.VE.API.Constants.imageryurl;if (this.fixedMap == true) {a.fixedView = true;}a.disableLogo = false;if (this.showMapModeSwitch == false) {a.showMapModeSwitch = false;} else {a.showMapModeSwitch = true;}if (this.tileBuffer != null && typeof this.tileBuffer != "undefined") {a.buffer = this.tileBuffer * Msn.VE.API.Globals.vetilesize;}this.vemapcontrol = new Msn.VE.MapControl(this.mapelement, a, this);var d = this.preInitCustomEvents.length;for (var c = 0; c < d; ++c) {var b = this.preInitCustomEvents.pop();this.vemapcontrol.AttachEvent(b.Name, b.Callback);}this.vemapcontrol.Init();if (!this.fixedMap == true) {this.vemapcontrol.AttachEvent("onchangeview", this._ClearView);}this.vemapcontrol.AttachEvent("onendpan", this._RefreshLayers);this.vemapcontrol.AttachEvent("oninitmode", this._ResetQueueEvent);this.vemapcontrol.AttachEvent("oninitmode", this._EROHouseKeeping);_VERegisterNamespaces("Msn.Drawing");this.m_vegraphicsmanager = new VEGraphicsManager(this);this.m_vegraphicsmanager.Initialize();this.m_velayermanager = null;this._lm = this.m_velayermanager;this.m_vetilesourcemanager = null;this.m_vetrafficmanager = null;_VERegisterNamespaces("Msn.VE.UI");Msn.VE.UI.Color = {Red:"red", Orange:"orange", Yellow:"yellow"};if ($ID("help") == null || $ID("help") == "undefined") {VE_Help.CreateHelpPanel();}this._InitializeModules(VE_GetLoadedAPIModules());if (this.veonmaploadevent) {this.veonmaploadevent(this);}this.controlzIndexes = [];this.controls = [];this.controltops = [];this.controllefts = [];this.vemapcontrol.AttachEvent("onresize", this._ReArrangeControls);if (window.ero == null || typeof window.ero == "undefined") {window.ero = ERO.getInstance();window.ero.setBoundingArea(new Msn.VE.Geometry.Point(0, 0), new Msn.VE.Geometry.Point(document.body.clientWidth, document.body.clientHeight));}this._EROHouseKeeping(this.GetMapMode());window.attachEvent("onunload", DisposeAllMaps);};

function DisposeAllMaps() {
    for (var a in Msn.VE.API.Globals.vemapinstances) {
        if (Msn.VE.API.Globals.vemapinstances[a] instanceof VEMap) {
            Msn.VE.API.Globals.vemapinstances[a].Dispose();
        }
    }
    if (_VEDownloadQueue) {
        _VEDownloadQueue.Dispose();
        _VEDownloadQueue = null;
    }
}

VEMap.ValidateState = function () {return true;};
VEMap.prototype.DeleteAllPushpins = function () {VEMap.ValidateState();VEPushpin.Hide();if (this.pushpins != null && this.pushpins != "undefined") {if (this.GetMapMode() == Msn.VE.MapActionMode.Mode3D) {$VE_A.LogAPI("VE | APIs", "VEMap - DeleteAllPushpins");this.m_vegraphicsmanager.ClearAllPushpins(this.pushpins);return;} else {var c = this.pushpins.length;for (var a = 0; a < c; a++) {var b = this.pushpins.pop();if (!b.IsInLayer) {b.Dispose();}}}}$VE_A.LogAPI("VE | APIs", "VEMap - DeleteAllPushpins");return this.vemapcontrol.ClearPushpins();};
VEMap.prototype.GetMapStyle = function () {VEMap.ValidateState();$VE_A.LogAPI("VE | APIs", "VEMap - GetMapStyle");return this.vemapcontrol.GetMapStyle();};
VEMap.prototype.GetZoomLevel = function () {VEMap.ValidateState();$VE_A.LogAPI("VE | APIs", "VEMap - GetZoomLevel");return this.vemapcontrol.GetZoomLevel();};
VEMap.prototype.StartContinuousPan = function (a, b) {VEMap.ValidateState();try {VEValidator.ValidateInt(a, "deltaX");VEValidator.ValidateInt(b, "deltaY");$VE_A.LogAPI("VE | APIs", "VEMap - StartContinuousPan");return this.vemapcontrol.ContinuousPan(parseInt(a), parseInt(b));} catch (c) {throw c;return;}};
VEMap.prototype.EndContinuousPan = function () {VEMap.ValidateState();try {$VE_A.LogAPI("VE | APIs", "VEMap - EndContinuousPan");return this.vemapcontrol.StopContinuousPan();} catch (a) {throw a;return;}};
VEMap.prototype.Pan = function (a, b) {VEMap.ValidateState();try {VEValidator.ValidateInt(a, "deltaX");VEValidator.ValidateInt(b, "deltaY");$VE_A.LogAPI("VE | APIs", "VEMap - Pan");var c = this.vemapcontrol.PanMap(parseInt(a), parseInt(b));if (c) {this.vemapcontrol.Fire("onstartpan");this.vemapcontrol.Fire("onendpan");this.vemapcontrol.Fire("onchangeview");}return c;} catch (d) {throw d;return;}};
VEMap.prototype.DeletePushpin = function (c) {VEMap.ValidateState();try {var d = 0;if (typeof this.pushpins == "object" && this.pushpins && this.pushpins.constructor == Array) {d = this.pushpins.length;}for (var a = 0; a < d; a++) {var b = this.pushpins[a];if (b != null && b.ID == c) {if (!b.IsInLayer) {b.Dispose();}this.pushpins.splice(a, 1);$VE_A.LogAPI("VE | APIs", "VEMap - DeletePushpin");if (this.GetMapMode() == Msn.VE.MapActionMode.Mode3D) {return this.m_vegraphicsmanager.Remove3DPushpin(c);} else {return this.vemapcontrol.RemovePushpin(c);}}}throw new VEException("VEMap:DeletePushpin", "err_invalidpushpinid", L_invalidpushpinid_text);} catch (e) {throw e;return;}};
VEMap.prototype.Resize = function (b, a) {VEMap.ValidateState();try {VEValidator.ValidateInt(b, "width");VEValidator.ValidateInt(a, "height");return this.vemapcontrol.Resize(b, a);} catch (c) {throw c;return;}};
VEMap.prototype.SetMapMode = function (a) {VEMap.ValidateState();try {VEValidator.ValidateMapMode(a, "mapMode");this.vemapcontrol.EnableMode(a, this.GUID);} catch (b) {throw b;return;}};
VEMap.prototype.GetMapMode = function () {VEMap.ValidateState();if (this.vemapcontrol.IsModeEnabled(Msn.VE.MapActionMode.Mode3D)) {return VEMapMode.Mode3D;}return VEMapMode.Mode2D;};
VEMap.prototype.SetMapStyle = function (a) {VEMap.ValidateState();try {VEValidator.ValidateMapStyle(a, "mapStyle");this.vemapcontrol.SetMapStyle(a);$VE_A.LogAPI("VE | APIs", "VEMap - SetMapStyle");} catch (b) {throw b;return;}};
VEMap.prototype.SetScaleBarDistanceUnit = function (a) {VEMap.ValidateState();try {VEValidator.ValidateDistanceUnit(a, "distanceUnit");this.vemapcontrol.SetScaleBarDistanceUnit(a == VEDistanceUnit.Miles ? Msn.VE.DistanceUnit.Miles : Msn.VE.DistanceUnit.Kilometers);$VE_A.LogAPI("VE | APIs", "VEMap - SetScaleBarDistanceUnit");} catch (b) {throw b;return;}};
VEMap.prototype.SetZoomLevel = function (a) {VEMap.ValidateState();try {VEValidator.ValidateInt(a, "zoomLevel");$VE_A.LogAPI("VE | APIs", "VEMap - SetZoomLevel");this._QueueRequest(this.vemapcontrol.SetZoom, parseInt(a));return true;} catch (b) {throw b;return;}};
VEMap.prototype.ZoomIn = function () {VEMap.ValidateState();$VE_A.LogAPI("VE | APIs", "VEMap - ZoomIn");this.vemapcontrol.ZoomIn();};
VEMap.prototype.ZoomOut = function () {VEMap.ValidateState();$VE_A.LogAPI("VE | APIs", "VEMap - ZoomOut");this._QueueRequest(this.vemapcontrol.ZoomOut);};
VEMap.prototype.AttachEvent = function (b, a) {VEMap.ValidateState();try {VEValidator.ValidateNonNull(b, "eventname");VEValidator.ValidateNonNull(a, "eventhandler");if (this.vemapcontrol) {this.vemapcontrol.AttachCustomEvent(b, a);} else {this.preInitCustomEvents.push(new VECustomEvent(b, a));}$VE_A.LogAPI("VE | APIs", "VEMap - AttachEvent");} catch (c) {throw c;return;}};
VEMap.prototype.DetachEvent = function (b, a) {VEMap.ValidateState();try {VEValidator.ValidateNonNull(b, "eventname");VEValidator.ValidateNonNull(a, "eventhandler");this.vemapcontrol.DetachCustomEvent(b, a);$VE_A.LogAPI("VE | APIs", "VEMap - DetachEvent");} catch (c) {throw c;return;}};
VEMap.prototype.FireEvent = function (a) {try {var b = window.event;return this.vemapcontrol.FireCustomEvent(a, b);} catch (c) {return false;}};
VEMap.prototype.ShowMessage = function (a) {if (this.ShowMessageBox) {VEMap.ValidateState();this.m_vemessage.Show(a);$VE_A.LogAPI("VE | APIs", "VEMap - ShowMessage");}};
VEMap.prototype.GetHeight = function () {VEMap.ValidateState();var a = 0;if (this.mapelement.style.height.search(/px/) > 0) {a = parseInt(this.mapelement.style.height.replace("px", ""));}if (isNaN(a) || a == 0) {a = this.mapelement.offsetHeight;}return a;};
VEMap.prototype.GetWidth = function () {VEMap.ValidateState();var a = 0;if (this.mapelement.style.height.search(/px/) > 0) {a = parseInt(this.mapelement.style.width.replace("px", ""));}if (isNaN(a) || a == 0) {a = this.mapelement.offsetWidth;}return a;};
VEMap.prototype.GetLeft = function () {$VE_A.LogAPI("VE | APIs", "VEMap - GetLeft");return this.vemapcontrol.GetLeftPx();};
VEMap.prototype.GetTop = function () {$VE_A.LogAPI("VE | APIs", "VEMap - GetTop");return this.vemapcontrol.GetTopPx();};
VEMap.prototype.SetFindResultsPanel = function (a) {VEMap.ValidateState();if (a == null || a == "undefined") {throw new VEException("VEMap:SetFindResultsPanel", "err_invalidelement", L_invalidelement_text);}var b = $ID(a);if (b == null || b == "undefined") {throw new VEException("VEMap:SetFindResultsPanel", "err_invalidelement", L_invalidelement_text);}this.searchelement = a;};
VEMap.prototype._AddControlInner = function (a) {a.style.position = "absolute";a.style.zIndex = 201;var e = this.GetTop(), d = this.GetLeft();if (!a.style.top) {a.style.top = "0px";}if (!a.style.left) {a.style.left = "0px";}var c = a.style.top, b = a.style.left;if (isNaN(c)) {c = c.toString().toLowerCase();}if (isNaN(b)) {b = b.toString().toLowerCase();}e += parseInt(c.replace("px"));d += parseInt(b.replace("px"));a.style.top = e + "px";a.style.left = d + "px";document.body.appendChild(a);};
VEMap.prototype.AddControl = function (a, b) {VEMap.ValidateState();if (a == null || a == "undefined") {throw new VEException("VEMap:AddControl", "err_invalidelement", L_invalidelement_text);}if (this.controls == null || this.controls == "undefined") {throw new VEException("VEMap:AddControl", "err_notinitialized", L_notinitialized_text);}this.controlzIndexes.push(b);this.controls.push(a);this.controltops.push(a.style.top);this.controllefts.push(a.style.left);this._AddControlInner(a, b);$VE_A.LogAPI("VE | APIs", "VEMap - AddControl");};
VEMap.prototype.DeleteControl = function (b) {VEMap.ValidateState();if (b == null || b == "undefined") {throw new VEException("VEMap:DeleteControl", "err_invalidelement", L_invalidelement_text);}if (this.controls == null || this.controls == "undefined") {throw new VEException("VEMap:DeleteControl", "err_notinitialized", L_notinitialized_text);}if (b.shimElement) {b.shimElement.removeNode(true);b.shimElement = null;}document.body.removeChild(b);var c = -1;for (var a = 0; a < this.controls.length; a++) {if (this.controls[a] == b) {c = a;break;}}if (c >= 0) {for (var a = c; a < this.controls.length - 1; a++) {this.controls[a] = this.controls[a + 1];this.controlzIndexes[a] = this.controlzIndexes[a + 1];this.controltops[a] = this.controltops[a + 1];this.controllefts[a] = this.controllefts[a + 1];}this.controls.pop();this.controlzIndexes.pop();this.controltops.pop();this.controllefts.pop();$VE_A.LogAPI("VE | APIs", "VEMap - DeleteControl");}};
VEMap.prototype.ShowControl = function (a) {VEMap.ValidateState();if (a != null && a != "undefined") {if (a.shimElement) {a.shimElement.style.display = "block";}a.style.visibility = "visible";mvcViewFacade.ShowShimIfSupported(a);$VE_A.LogAPI("VE | APIs", "VEMap - ShowControl");}};
VEMap.prototype.HideControl = function (a) {VEMap.ValidateState();if (a != null && a != "undefined") {HideShim(a);a.style.visibility = "hidden";$VE_A.LogAPI("VE | APIs", "VEMap - HideControl");}};
VEMap.prototype.Clear = function () {VEMap.ValidateState();this._ClearView();if (typeof VE_TrafficManager != "undefined") {VE_TrafficManager.Destroy();}this.DeleteAllPushpins();if (this.m_vedirectionsmanager) {this.m_vedirectionsmanager.RemoveRouteHighLight();}this.m_vegraphicsmanager.Clear();this.m_veambiguouslist.Hide();this.m_vemessage.Hide();$VE_A.LogAPI("VE | APIs", "VEMap - Clear");};
VEMap.prototype._ShowLoading = function () {VEMap.ValidateState();if (!this.veloadingdiv) {this.veloadingdiv = document.createElement("div");this.veloadingdiv.className = "VE_Network_Loading";this.veloadingdiv.style.top = "75px";this.veloadingdiv.style.left = "80px";this.veloadingdiv.innerHTML = L_loading_text;this.AddControl(this.veloadingdiv, 202);}if (this.veloadingdiv.style.display != "block") {this.veloadingdiv.style.display = "block";} else {this.veloadingdiv.style.display = "none";}};
VEMap.prototype.AddPolyline = function (a) {if (typeof a == "object" && !(a instanceof VEPolyline)) {var b = new VEShape(VEShapeType.Polyline, a);this.AddShape(b);return b;}VEMap.ValidateState();this.m_vegraphicsmanager.DrawLine(a);$VE_A.LogAPI("VE | APIs", "VEMap - AddPolyline");};
VEMap.prototype.DeletePolyline = function (a) {VEMap.ValidateState();this.m_vegraphicsmanager.RemoveLinebyId(a);$VE_A.LogAPI("VE | APIs", "VEMap - DeletePolyline");};
VEMap.prototype.DeleteAllPolylines = function () {VEMap.ValidateState();this.m_vegraphicsmanager.RemoveAllLines();$VE_A.LogAPI("VE | APIs", "VEMap - DeleteAllPolylines");};
VEMap.prototype.AddPolygon = function (a) {if (typeof a == "object" && !(a instanceof VEPolygon)) {var b = new VEShape(VEShapeType.Polygon, a);this.AddShape(b);return b;}VEMap.ValidateState();this.m_vegraphicsmanager.DrawPolygon(a);$VE_A.LogAPI("VE | APIs", "VEMap - AddPolygon");};
VEMap.prototype.DeletePolygon = function (a) {VEMap.ValidateState();this.m_vegraphicsmanager.RemovePolygonbyId(a);$VE_A.LogAPI("VE | APIs", "VEMap - DeletePolygon");};
VEMap.prototype.DeleteAllPolygons = function () {VEMap.ValidateState();this.m_vegraphicsmanager.RemoveAllPolygons();$VE_A.LogAPI("VE | APIs", "VEMap - DeleteAllPolygons");};
VEMap.prototype.LoadModules = function (c, a, d) {try {var b = null;b = VEOndemandJsDownloads(true, c, this, [this.LoadModules, c, a, d]);if (b) {if (typeof a == "function" && a != null) {a(d);}}} catch (e) {throw e;return;}};
VEMap.prototype._InitializeModules = function (b) {var c = b.length;for (var a = 0; a < c; a++) {switch (b[a]) {case VE_ModuleName.APILAYERS:this.InitMapDrawing();break;case VE_ModuleName.APIFIND:this.InitSearch();break;case VE_ModuleName.APIROUTING:this.InitRouting();break;case VE_ModuleName.APITRAFFIC:this.InitTraffic();break;case VE_ModuleName.API3D:this.Init3D();break;case VE_ModuleName.APICONTROLS:this.InitNavControl();break;case VE_ModuleName.APIBIRDSEYE:this.InitBirdseye();break;case VE_ModuleName.APITILES:this.InitTiles();break;case VE_ModuleName.APICORE:break;default:;}}};
VEMap.prototype._ResetQueueEvent = function (a) {if (a == Msn.VE.MapActionMode.Mode2D) {this.queueEventInitialized = false;}};
VEMap.prototype._QueueRequest = function (a, b, c, d) {if (this.vemapcontrol.IsModeEnabled(Msn.VE.MapActionMode.Mode3D) && this.RequestQueueEnabled) {if (!this.queueEventInitialized) {this.vemapcontrol.Get3DControl().AttachEvent("OnCameraChanged", "ProcessQueuedRequest");this.queueEventInitialized = true;}if (this.vemapcontrol.IsCameraFlying() || this.requestQueue.length > 0) {this.requestQueue.push(new RequestQueueItem(a, b, c, d));return;}}a(b, c, d);};
VEMap.prototype._ProcessQueuedRequest = function () {if (this.requestQueue.length > 0) {var a = this.requestQueue.shift();a.Call(a.Param1, a.Param2, a.Param3);}};
VEMap.prototype.ShowMapModeSwitch = function (a) {if (this.fixedMap != true) {this.vemapcontrol.SetShowMapModeSwitch(a);this.showMapModeSwitch = a;}};
VEMap.prototype.SetTileBuffer = function (a) {this.tileBuffer = a;if (this.vemapcontrol != null && this.vemapcontrol != "undefined") {this.vemapcontrol.SetTilePixelBuffer(a * Msn.VE.API.Globals.vetilesize);}};
VEMap.prototype._EROHouseKeeping = function (d) {if (d == Msn.VE.MapActionMode.Mode2D) {ero.setGlitz(true, false, true, false);ero.unhookEvent("aftershow", c);ero.unhookEvent("afterhide", b);ero.unhookEvent("beforeshow", a);} else {ero.setGlitz(true, false, true, false);ero.hookEvent("aftershow", c);ero.hookEvent("afterhide", b);ero.hookEvent("beforeshow", a);}
function c() {ShowShim(ero.getBody(), ero.getElement());}

function b() {HideShim(ero.getBody());}

function a(a) {if (a.Entity == -1) {ero.setGlitz(false, null, false, true);}}
};
VEMap.prototype.AllTilesLoaded = function () {if (this.vemapcontrol.IsModeEnabled(Msn.VE.MapActionMode.Mode3D)) {var a = this.vemapcontrol.Get3DControl();return a ? a.AllTilesLoaded : false;}return true;};
VEMap.prototype.SetClientToken = function (a) {this.ClientToken = a;if (this.vemapcontrol) {this.vemapcontrol.SetClientToken(a);}};
VEMap.prototype.HasClientToken = function () {return this.ClientToken != null && typeof this.ClientToken != "undefined" && this.ClientToken.length > 0;};
VEMap.GetVersion = function () {$VE_A.LogAPI("VE | APIs", "VEMap - GetVersion");return Msn.VE.API.Globals.vecurrentversion;};
VEMap.prototype.ShowDisambiguationDialog = function (a) {VEMap.ValidateState();VEValidator.ValidateBoolean(a, "value");this.m_vedirectionsmanager.m_showDisambigousDialog = a;$VE_A.LogAPI("VE | APIs", "VEMap - ShowDisambiguationDialog");};
VEMap.prototype.InitNavControl = function () {};
VEMap.prototype.ShowDashboard = function () {this._ToggleDashboard(true);$VE_A.LogAPI("VE | APIs", "VEMap - ShowDashboard");};
VEMap.prototype.HideDashboard = function () {this._ToggleDashboard(false);$VE_A.LogAPI("VE | APIs", "VEMap - HideDashboard");};
VEMap.prototype._ToggleDashboard = function (d) {VEMap.ValidateState();var a = $ID(this.m_dashboardId);if (a == null) {var c = true;if (this.showMapModeSwitch == false) {c = false;}this.vemapcontrol.CreateDashboard(5, 5, this.dashboardSize, this.m_dashboardId, c);a = $ID(this.m_dashboardId);}if (a != null) {if (d) {if (a.shimElement) {a.shimElement.style.display = "block";}a.style.visibility = "visible";mvcViewFacade.ShowShimIfSupported(a);} else {HideShim(a);a.style.visibility = "hidden";HideShim(a);}return;}if (this.mapelement.childNodes != null && this.mapelement.childNodes != "undefined") {var e = this.mapelement.childNodes.length, a = null;for (var b = 0; b < e; b++) {a = this.mapelement.childNodes[b];if (a == null) {continue;}if (a.className != null && a.className == "Dashboard Dashboard_normal") {if (d) {a.style.display = "block";} else {a.style.display = "none";}break;}}}};
VEMap.prototype.ShowMiniMap = function (a, b, d) {if (a != null && typeof a != "undefined" && b != null && typeof b != "undefined") {VEValidator.ValidateInt(a, "x");VEValidator.ValidateInt(b, "y");}if (d) {VEValidator.ValidateMiniMapSize(d, "size");}var c = this.vemapcontrol.GetMinimap();if (c) {if (a != null && typeof a != "undefined" && b != null && typeof b != "undefined") {c.SetPosition(parseInt(a), parseInt(b));}c.Show();} else {c = this.vemapcontrol.CreateMinimap(a, b, "", true, false);}if (d) {c.SetSize(d);}$VE_A.LogAPI("VE | APIs", "VEMap - ShowMiniMap");};
VEMap.prototype.HideMiniMap = function () {var a = this.vemapcontrol.GetMinimap();if (a) {a.Hide();}$VE_A.LogAPI("VE | APIs", "VEMap - HideMiniMap");};
VE_SetModuleStatus(VE_ModuleName.APICONTROLS, "loaded");
VEMap.prototype.InitBirdseye = function () {};
VEMap.prototype.GetBirdseyeScene = function () {VEMap.ValidateState();var a = null, b = this.vemapcontrol.GetObliqueScene();if (b != null && b != "undefined") {a = new VEBirdseyeScene(b);a.SetClientToken(this.ClientToken);a.SetGUID(this.GUID);}$VE_A.LogAPI("VE | APIs", "VEMap - GetBirdseyeScene");return a;};
VEMap.prototype.IsBirdseyeAvailable = function () {VEMap.ValidateState();if (this.GetMapMode() == Msn.VE.MapActionMode.Mode3D) {return false;}$VE_A.LogAPI("VE | APIs", "VEMap - IsBirdseyeAvailable");return this.vemapcontrol.IsObliqueAvailable();};
VEMap.prototype.SetBirdseyeOrientation = function (a) {VEMap.ValidateState();$VE_A.LogAPI("VE | APIs", "VEMap - SetBirdseyeOrientation");return this.vemapcontrol.SetObliqueOrientation(a);};
VEMap.prototype.SetBirdseyeScene = function (a) {VEMap.ValidateState();$VE_A.LogAPI("VE | APIs", "VEMap - SetBirdseyeScene");return this.vemapcontrol.SetObliqueScene(a);};
VE_SetModuleStatus(VE_ModuleName.APIBIRDSEYE, "loaded");
VEMap.prototype.SetDisplayThreshold = function (a) {var a = parseInt(a);if (isNaN(a)) {this.m_vegraphicsmanager.SetDisplayThreshold(a);}};
VEMap.prototype.ImportShapeLayerData = function (a, c, b) {VEValidator.ValidateObject(a, "_spec", VEShapeSourceSpecification, "VEShapeSourceSpecification");if (typeof a.LayerSource != "string" || typeof a.Type != "string") {throw new VEException("VEMap:AddLayer", "err_invalidlayertype", L_invalidlayertype_text);}this.m_velayermanager.ImportLayer(a, c, b);};
VEMap.prototype.SetInfoBoxStyles = function (a) {window.ero.setClasses(a);};
VEMap.prototype.ClearInfoBoxStyles = function () {window.ero.setClasses(_VECustomInfoBox);};
VEMap.prototype.SetDefaultInfoBoxStyles = function () {window.ero.setClasses(ERO.DefaultClasses);};
VEMap.prototype.ShowInfoBox = function (c, b, d) {var k = typeof c == "object" && c instanceof VEShape;if (!k) {return;}var j = c._shplayer == null || c._shplayer._mapGuid == null;if (j) {return;}var h = null, e = null, g = null;if (typeof b == "object") {if (b instanceof VELatLong) {e = b.Latitude;g = b.Longitude;} else if (b instanceof VEPixel) {if (!isNaN(b.x) && !isNaN(b.y)) {h = b;}}}if (e == null && h == null) {var f = c.Primitives[0];if (f.type == VEShapeType.Pushpin) {e = f.points[1];g = f.points[0];} else {e = f.labelPosY;g = f.labelPosX;}}var l = Msn.Drawing.GetLabelUID(c.Primitives[0].iid), a = null;if (e != null) {a = this.vemapcontrol.LatLongToPixel(new Msn.VE.LatLong(e, g), this.vemapcontrol.GetZoomLevel());if (a == null) {a = new VEPixel(0, 0);}} else {a = h;}var i = typeof d == "object" && d instanceof VEPixel;if (i) {if (!isNaN(d.x) && !isNaN(d.y)) {a.x += d.x;a.y += d.y;}}if (a.x < 0) {a.x = 0;} else if (a.x > this.GetWidth()) {a.x = this.GetWidth();}if (a.y < 0) {a.y = 0;} else if (a.y > this.GetHeight()) {a.y = this.GetHeight();}a.x += this.GetLeft();a.y += this.GetTop();VEShowVEShapeERO(l, this.GUID, null, c, a.x, a.y);};
VEMap.prototype.HideInfoBox = function () {VEHideVEShapeERO(true);};
VEMap.prototype.CloneShape = function (a) {VEMap.ValidateState();VEValidator.ValidateObject(a, "_veshape", VEShape, "VEShape");var c = this.m_velayermanager.VE_LayerManager, b = c.CloneAnnotation(a);return b;};
VEMap.prototype.AddShape = function (a) {VEMap.ValidateState();VEValidator.ValidateObject(a, "_veshape", VEShape, "VEShape");var b = this.m_velayermanager.VE_LayerManager.GetCollectionByIndex(0);b._mapGuid = this.GUID;b.AddShape(a);$VE_A.LogAPI("VE | APIs", "VEMap - AddVEShape");};
VEMap.prototype.DeleteShape = function (a) {VEMap.ValidateState();VEValidator.ValidateObject(a, "_veshape", VEShape, "VEShape");a.Hide();this.m_velayermanager.VE_LayerManager.DeleteAnnotation(a);$VE_A.LogAPI("VE | APIs", "VEMap - DeleteVEShape");};
VEMap.prototype.GetShapeByID = function (a) {VEMap.ValidateState();if (typeof a == "undefined" || a == null || a == "") {return null;}var b = this.m_velayermanager.VE_LayerManager, c = b.GetAnnotationById(a);$VE_A.LogAPI("VE | APIs", "VEMap - GetVEShape");return c;};
VEMap.prototype.AddShapeLayer = function (a, c) {VEMap.ValidateState();VEValidator.ValidateObject(a, "shpLyr", VEShapeLayer, "VEShapeLayer");if (a._mapGuid != null) {throw new VEException("VEMap:AddLayer", "err_invalidlayertype", L_invalidlayertype_text);}a._mapGuid = this.GUID;var d = this.m_velayermanager.VE_LayerManager;d.AddCollection(null, a);if (!a.GetVisibility()) {return;}if (typeof c != "undefined" && c == true) {var b = a.GetBoundingBox(), e = [new Msn.VE.LatLong(b.y1, b.x1), new Msn.VE.LatLong(b.y2, b.x2)];this.vemapcontrol.SetBestMapView(e);}this.m_vegraphicsmanager.DrawLayer(a);$VE_A.LogAPI("VE | APIs", "VEMap - AddShapeLayer");};
VEMap.prototype.DeleteShapeLayer = function (a) {VEMap.ValidateState();VEValidator.ValidateObject(a, "shpLyr", VEShapeLayer, "VEShapeLayer");try {this.m_vegraphicsmanager.ClearLayerDom(a);this.m_velayermanager.VE_LayerManager.RemoveCollection(a);} catch (b) {}$VE_A.LogAPI("VE | APIs", "VEMap - DeleteShapeLayer");};
VEMap.prototype.DeleteAllShapeLayers = function () {VEMap.ValidateState();try {this.m_vegraphicsmanager.ClearAll();this.m_velayermanager.VE_LayerManager.DeleteAll();} catch (a) {}$VE_A.LogAPI("VE | APIs", "VEMap - DeleteAllShapeLayers");};
VEMap.prototype.DeleteAllShapes = function () {VEMap.ValidateState();try {this.m_vegraphicsmanager.ClearAll();var a = this.m_velayermanager.VE_LayerManager, d = a.GetCollectionCount();for (var b = 0; b < d; b++) {var c = a.GetCollectionByIndex(b);a.EmptyCollection(c);}} catch (e) {}$VE_A.LogAPI("VE | APIs", "VEMap - DeleteLayer");};
VEMap.prototype.ShowAllShapeLayers = function () {VEMap.ValidateState();this.m_velayermanager.ShowAllLayers();$VE_A.LogAPI("VE | APIs", "VEMap - ShowAllLayers");};
VEMap.prototype.HideAllShapeLayers = function () {VEMap.ValidateState();this.m_vegraphicsmanager.ClearAll();this.m_velayermanager.VE_LayerManager.SetVisibility(false);$VE_A.LogAPI("VE | APIs", "VEMap - HideAllShapeLayers");};
VEMap.prototype.GetShapeLayerByIndex = function (b) {VEMap.ValidateState();if (typeof b == "undefined" || this.m_velayermanager == null) {return null;}var a = null;a = this.m_velayermanager.VE_LayerManager.GetCollectionByIndex(b);if (a) {a._mapGuid = this.GUID;}$VE_A.LogAPI("VE | APIs", "VEMap - GetShapeLayerByIndex");return a;};
VEMap.prototype.GetShapeLayerCount = function () {VEMap.ValidateState();if (this.m_velayermanager == null) {return 0;}return this.m_velayermanager.VE_LayerManager.GetCollectionCount();};
VEDataType = new (function () {this.VECollection = "c";this.GeoRSS = "g";this.VETileSource = "t";});

function VEShapeSourceSpecification(a, c, b) {
    this.Type = null;
    this.Layer = null;
    this.LayerSource = null;
    this.Method = "Get";
    this.FnCallback = null;
    this.SetsBestMapView = true;
    this.Success = false;
    if (typeof a == "string" && (a == "c" || a == "g")) {
        this.Type = a;
    } else {
        throw new VEException("VEShapeSourceSpecification", "err_invalidargument", L_invalidargument_text.replace("%1", "type").replace("%2", "VEDataType"));
    }
    if (typeof b == "object" && b instanceof VEShapeLayer) {
        this.Layer = b;
    }
    if (typeof c == "string") {
        this.LayerSource = c;
    } else {
        throw new VEException("VEShapeSourceSpecification", "err_invalidargument", L_invalidargument_text.replace("%1", "layerSource").replace("%2", "String"));
    }
}


function VELayerManager(c) {
    var a = this;
    VEValidator.ValidateNonNull(c, "vemap");
    this.m_vemap = c;
    this.m_vemapcontrol = this.m_vemap.vemapcontrol;
    this.m_veLatLongDecoder = new VELatLongDecoder;
    this.m_spec = new VELatLongFactorySpecFromMap(this.m_vemap);
    var e = new VELatLongFactory(this.m_spec);
    this.VE_LayerManager = new Msn.VE.Core.LayerManager;
    var b = null;
    if (a.m_vemap.m_vegraphicsmanager) {
        a.m_vemap.m_vegraphicsmanager.InitLayerManager(this);
    }
    this.ImportLayer = function (a, d, c) {a.Method = "Get";if (typeof d == "function") {a.FnCallback = d;}if (typeof c != "undefined" && c != null) {a.SetsBestMapView = c;}if (typeof a.Layer != "object" || !(a.Layer instanceof VEShapeLayer)) {a.Layer = this.VE_LayerManager.GetCollectionByIndex(0);} else if (a.Layer._mapGuid == null) {a.Layer._mapGuid = this.m_vemap.GUID;this.VE_LayerManager.AddCollection(null, a.Layer);} else if (a.Layer._mapGuid != this.m_vemap.GUID) {throw new VEException("VEMap:AddLayer", "err_invalidlayertype", L_invalidlayertype_text);}a.Layer.Spec = a;if (a.Type == VEDataType.GeoRSS) {if (b == null) {b = new Msn.Drawing.MapGeoRssReader;}this.AddGeoRSSLayer(a.Layer);} else if (a.Type == VEDataType.VECollection) {this.AddVECollectionLayer(a.Layer);} else {throw new VEException("VEMap:ImportShapeLayerData", "err_invalidlayertype", L_invalidlayertype_text);}};
    this.AddGeoRSSLayer = function (b) {VEMap.ValidateState();try {VENetwork.DownloadXml(b.Spec.LayerSource, b.Spec.Method, a.RetrieveGeoRSSCallback, b.GetId());} catch (c) {throw c;}};
    this.AddVECollectionLayer = function (d) {VEMap.ValidateState();try {var b = d;b.SetMsnId(d.Spec.LayerSource);var a = [];if (this.m_vemap.HasClientToken()) {a.push(new VEParameter(Msn.VE.API.Constants.clienttoken, this.m_vemap.ClientToken));}a.push(new VEParameter("mapguid", this.m_vemap.GUID));a.push(new VEParameter("action", "retrieveCollection"));a.push(new VEParameter(VE_CollectionsManagerConstants.C_Id, b.Spec.LayerSource));a.push(new VEParameter(VE_CollectionsManagerConstants.Market, Msn.VE.API.Globals.language));var e = "VEMap._GetMapFromGUID('" + this.m_vemap.GUID + "')._lm.RetrieveCollectionCallback";a.push(new VEParameter(Msn.VE.API.Constants.rim, e));a.push(new VEParameter(Msn.VE.API.Constants.rimargs, "'" + b.GetId() + "'"));a.push(new VEParameter(Msn.VE.API.Constants.market, Msn.VE.API.Globals.locale));var c = new VENetwork;c.ServiceUrl = Msn.VE.API.Constants.collectionservice;c.BeginInvoke(null, a, _VEAPIOnImportLayerDataCallback, this.m_vemap.GUID + "_" + b.GetId());} catch (f) {throw f;}};

    function d(a) {
        if (!document.all) {
            var c = new DOMParser;
            return c.parseFromString(a, "text/xml");
        } else {
            var b = new ActiveXObject("Msxml2.DOMDocument");
            b.loadXML(a);
            return b;
        }
    }

    this.RetrieveGeoRSSCallback = function (f, g) {var c = a.VE_LayerManager.RetrieveCollectionById(g), e = false;try {e = b.ReadGeoRSS(f, c);} catch (i) {a.m_vemap.ShowMessage(i.message || L_loadxml_text);return;}if (!e) {a.m_vemap.ShowMessage(L_loadxml_text);return;}if (c.GetVisibility()) {if (c.Spec.SetsBestMapView && c.GetShapeCount() > 0) {var d = c.GetBoundingBox(), h = [new Msn.VE.LatLong(d.y1, d.x1), new Msn.VE.LatLong(d.y2, d.x2)];a.m_vemapcontrol.SetBestMapView(h);}a.m_vemap.m_vegraphicsmanager.DrawLayer(c);}if (typeof c.Spec.FnCallback == "function") {c.Spec.FnCallback(c);}};
    this.RetrieveCollectionCallback = function (f, g) {var h = d(f), b = a.VE_LayerManager.RetrieveCollectionById(g);if (!b) {return;}b.Spec.Success = true;var e = new VE_MapRequestBean(MC_ACTION_RETRIEVE_COLLECTION);VE_MapCmlReader.ExtractCollections(e, h, this.VE_LayerManager);if (b.GetVisibility()) {if (b.Spec.SetsBestMapView && b.GetShapeCount() > 0) {var c = b.GetBoundingBox(), i = [new Msn.VE.LatLong(c.y1, c.x1), new Msn.VE.LatLong(c.y2, c.x2)];a.m_vemapcontrol.SetBestMapView(i);}a.m_vemap.m_vegraphicsmanager.DrawLayer(b);}if (b.Spec.FnCallback != null && b.Spec.FnCallback != "undefined") {b.Spec.FnCallback(b);}};
    this.RetrieveAllAnnotationsCallback = function () {};
}

VELayerManager.prototype.Dispose = function () {this.m_vemap.m_vegraphicsmanager.ClearAll();this.VE_LayerManager.DeleteAll();this.m_vemapcontrol = null;this.m_vemap = null;this.m_veLatLongDecoder = null;this.m_spec = null;this.VE_LayerManager.Dispose();this.VE_LayerManager = null;};
VELayerManager.prototype.ShowAllLayers = function () {this.VE_LayerManager.SetVisibility(true);var b = [], e = this.VE_LayerManager.GetCollectionCount();for (var c = 0; c < e; ++c) {var d = this.VE_LayerManager.GetCollectionByIndex(c);if (d.GetShapeCount() > 0) {var a = d.GetBoundingBox();if (a != null) {b.push(new Msn.VE.LatLong(a.y1, a.x1));b.push(new Msn.VE.LatLong(a.y2, a.x2));}}}if (b.length >= 2) {this.m_vemapcontrol.SetBestMapView(b);}this.m_vemap.m_vegraphicsmanager.DrawAll();};

function _VEAPIOnImportLayerDataCallback(h, a) {
    try {
        if (typeof a == "string" && a.length > 2) {
            var g = a.length, c = a.indexOf("_");
            if (c < 0 || c > g - 2) {
                return;
            }
            var f = a.substring(0, c), e = a.substring(c + 1), d = VEMap._GetMapFromGUID(f)._lm, b = d.VE_LayerManager.RetrieveCollectionById(e);
            if (!b.Spec.Success) {
                if (typeof b.Spec.FnCallback == "function") {
                    b.Spec.FnCallback(b, L_loadxml_text);
                } else {
                    d.m_vemap.ShowMessage(L_loadxml_text);
                }
            }
        }
    } catch (i) {
        throw i;
        return;
    }
}


function VECreateVEShapeERO(b, h) {
    if (b._IconContent != null) {
        return b._IconContent;
    }
    var a = null;
    a = b._customIcon;
    if ((typeof a == "object" || typeof a == "string") && a != null) {
        var d = b.Primitives[0].iid, g = Msn.Drawing.GetLabelUID(d), f = h;
        if (b._shplayer != null && b._shplayer._mapGuid != null) {
            f = b._shplayer._mapGuid;
        }
        if (a.indexOf(g) < 1) {
            if (a.indexOf("<") < 0) {
                a = "<img src=\"" + a + "\" />";
            }
            var c = "if (VEMap._GetMapFromGUID(" + f + ").FireEvent(", e = "))return;", k = "";
            a = k.concat("<div id=\"", g, "\" onmouseout='", c, "\"onmouseout\"", e, "VEHideVEShapeERO(false);' onmouseover='", c, "\"onmouseover\"", e, "VEShowVEShapeERO(\"", g, "\",", f, ");'> ", a, "</div>");
        }
    } else {
        var i = b.GetPrimitive(0), j = "", d = i.iid;
        if (i.type != VEShapeType.Pushpin) {
            d = Msn.Drawing.GetLabelUID(d);
        }
        a = "";
        a = a.concat("<img class='", j, "' src='", b.IconUrl, "' id='", d, "' ");
        if (b.Title.length > 0 || b.Notes.length > 0) {
            var c = "";
            c = c.concat("if (VEMap._GetMapFromGUID(", h, ").FireEvent(");
            var e = "))return;";
            a = a.concat(" onmouseout='", c, "\"onmouseout\"", e, "VEHideVEShapeERO(false);' onmouseover='", c, "\"onmouseover\"", e, "VEShowVEShapeERO(\"", d, "\",", h, ");'/> ");
        }
    }
    b._IconContent = a;
    return a;
}


function VEShowVEShapeERO(l, p, h, o, f, g) {
    var j = GetVEMapInstance(p);
    if (j == null) {
        return;
    }
    var a = null, r = null, q = null;
    if (typeof o == "object") {
        a = o;
    } else {
        if (j.m_velayermanager == null) {
            return;
        }
        var k = null;
        k = j.m_velayermanager.VE_LayerManager;
        if (!k) {
            return;
        }
        a = k.GetAnnotationById(l);
        if (!a) {
            return;
        }
    }
    if (!a._eroContent) {
        var e = a.Title, d = a.Notes, m = IOSec.GetValidatedUrl(a.Url), i = IOSec.GetValidatedUrl(a.PhotoUrl);
        q = a.Latitude;
        r = a.Longitude;
        var c = "";
        if (typeof i == "string" && i.length > 1) {
            c = c.concat("<a href=\"\" onclick=\"window.open('", i, "', '_blank' , 'menubar=0,resizable=1,scrollbars=0,status=0,titlebar=0,toolbar=0,width=800,height=600,screenX=200,left=200,screenY=200,top=200');return false;\">");
            c = c.concat("<img class=\"ero-previewArea-image\" id=eroImg_", l, " src=\"", IOSec.EncodeHtml(i), "\"/></a>");
        }
        e = c.concat(e);
        if (typeof m == "string" && m.length > 0) {
            d = d.concat("<p><a href='", m, "' class=\"VE_Pushpin_Popup_Link\" target=_blank>. . .</a></p>");
        }
        var b = "<p>";
        if (e.length > 0) {
            b = b.concat("<div class=\"VE_Pushpin_Popup_Title\">", unescape(e), "</div>");
        }
        if (d.length > 0) {
            b = b.concat("<div class=\"VE_Pushpin_Popup_Body\">", unescape(d), "</div>");
        }
        if (!document.all && (e.length == 0 || d.length == 0)) {
            b = b.concat("<br/><br/>");
        }
        b = b.concat("</p>");
    } else {
        b = a._eroContent;
    }
    window.ero.setContent(b);
    if (j.GetMapMode() == Msn.VE.MapActionMode.Mode2D) {
        if (typeof f == "number" && typeof g == "number") {
            var h = new Msn.VE.Geometry.Rectangle(new Msn.VE.Geometry.Point(f, g), new Msn.VE.Geometry.Point(f, g));
            window.ero.dockToRect(h, null, -1);
        } else {
            var n = $ID(l);
            if (n != null && n != "undefined") {
                window.ero.dockToElement(n);
            }
        }
    } else {
        if (typeof h == "undefined" || h == null) {
            h = new Msn.VE.Geometry.Rectangle(new Msn.VE.Geometry.Point(f, g), new Msn.VE.Geometry.Point(f, g));
        }
        ero.setGlitz(false, false, false, true);
        window.ero.dockToRect(h, null, -1);
    }
}


function VEHideVEShapeERO(a) {
    if (window.ero != null) {
        if (a == "undefined" || a == null) {
            a = false;
        }
        window.ero.hide(a);
    }
}

var _VECustomInfoBox = {ContainerNoBeak:"customInfoBox-noBeak", ContainerRightBeak:"customInfoBox-with-rightBeak", ContainerLeftBeak:"customInfoBox-with-leftBeak", Beak:"customInfoBox-beak", Shadow:"customInfoBox-shadow", Body:"customInfoBox-body", Actions:"customInfoBox-actions", ActionsBackground:"customInfoBox-actionsBackground", PreviewArea:"customInfoBox-previewArea", PaddingHack:"customInfoBox-paddingHack", ProgressAnimation:"customInfoBox-progressAnimation"}, MC_VESHAPE_EMPTY = -1777, MC_VIEW_BUFFER = 1, MC_STYLE_PINZIndex = 300, MC_IID_NAMESPACE = "msftve", MC_IID_CON_TOKEN = "_", MC_GEO_TYPE_MULTIGEOMETRY = "Multigeometry", MC_GEO_TYPE_FREEHAND = "Freehand", MC_STYLE_FILL_COLOR = "fillcolor", MC_STYLE_STROKE_COLOR = "strokecolor", MC_STYLE_STROKE_WEIGHT = "strokeweight", MC_STYLE_STROKE_STYLE = "stroke-style", MC_STYLE_STROKE_DASH = "stroke-dashstyle", MC_STYLE_FONT_COLOR = "font_color", MC_STYLE_STROKE_ARROW = "stroke_arrow", MC_STYLE_FONT_ITALIC = "font_italic", MC_STYLE_FONT_UNDERSCORE = "font_underscore", MC_STYLE_FONT_BOLD = "font_bold", STATE_DEFAULT = 0, STATE_DRAWING = 1, STATE_EDITING = 2, MC_DRAW_DEFAULT = 100, MC_DRAW_POINT = 101, MC_DRAW_POLYLINE = 102, MC_DRAW_POLYGON = 103, MC_DRAW_RECT = 104, MC_DRAW_CIRCLE = 105, MC_DRAW_TEXT = 1065, MC_EDIT_ADDNODE = 107, MC_EDIT_DELNODE = 108, MC_EDIT_MOVENODE = 108, MC_EDIT_SELNODE = 109, MC_EDIT_SELEDGE = 110, MC_EDIT_CONTINUELINE = 111, MC_LABEL_VIEWER = "viewer", MC_PROPERTY_DEFAULT = 0, MC_PROPERTY_HIGHWAY = 1, MC_PROPERTY_ROAD = 2, MC_PROPERTY_LAKE = 3, MC_PROPERTY_PARK = 4, MC_PROPERTY_PARKINGLOT = 5, MC_PROPERTY_PUSHPIN = 6, MC_PROPERTY_TEMPDRAW = 7, MC_PROPERTY_TEMPEDIT = 8, MC_PROPERTY_EDITNODE = 10, MC_PROPERTY_EDITSELNODE = 11, MC_NUMBERFORMAT_NUMBEROFDIGITSAFTERDOT = 2, MC_NUMBERFORMAT_ZEROSTRING = "0", MC_DECIMALROUNDOFF_THRESHOLD = 100, MC_CML_ENTITY_NAME = "Entity", MC_CML_ENTITY_PRIMITIVES = "Primitives", MC_CML_ENTITY_PRIMITIVE = "Primitive", MC_CML_ENTITY_COORDINATES = "coordinates", MC_CML_DESCRIPTION = "Description", MC_CML_TAGS = "Tags", MC_CML_ENTITY_TYPE_PUSHPIN = "pushpin", MC_CML_PROPERTYS = "Properties", MC_CML_PROPERTY = "Property", MC_CML_PROPERTY_KEYWORDS = "keywords", MC_CML_PROPERTY_URL = "url", MC_CML_PROPERTY_PHOTOURL = "photourl", MC_CML_PROPERTY_USERDATE = "userdate", MC_CML_PROPERTY_DISPLAYORDER = "displayorder", MC_CML_PROPERTY_BUSINESSLISTINGID = "businesslistingid", MC_CML_PROPERTY_TYPE = "type", MC_CML_LASTMODIFIED = "DateModified", MC_CML_DATECREATED = "DateCreated", MC_CML_ROOT = "CML", MC_CML_SEPERT = "/", MC_CML_TOKEN = ",", MC_CML_VERSION = "0.1", MC_CML_ID = "id", MC_CML_IID = "clientid", MC_CML_NAME = "name", MC_CML_SHARELEVEL = "Sharelevel", MC_CML_STATE = "State", MC_CML_STATE_PUBLIC_CAN_VIEW = 1, MC_CML_STATE_OWNER_CAN_VIEW = 2, MC_CML_STATE_OWNER_CAN_UPDATE = 4, MC_CML_STATE_OWNER_IS_VIEWING = 8, MC_CML_TYPE = "Type", MC_CML_Add = "Add", MC_CML_EXTRUSION = "Extrusion", MC_CML_VISIBILITY = "visibility", MC_CML_DISPLAYORDER = "displayorder", MC_CML_DEFAULTSTYLE = "DefaultStyle", MC_CML_LABELSTYLE = "LabelStyle", MC_CML_POSITION = "Position", MC_CML_STYLE = "Style", MC_CML_FILLSYMBOL = "Fill", MC_CML_SHAPESYMBOL = "Shape", MC_CML_STYLESYMBOL = "Style", MC_CML_STROKESYMBOL = "Stroke", MC_CML_SHADOWSYMBOL = "Shadow", MC_CML_IMAGEDATASYMBOL = "Imagedata", MC_CML_ZOOMLEVEL = "zoomlevel", MC_CML_ONSCRATCHPAD = "onScratchpad", MC_CML_TOKEN1 = ",", MC_CML_TOKEN2 = ":", MC_CML_TOKEN3 = ";", MC_CML_CONTENTS = "Contents", MC_CML_CONTENT = "Content", MC_CML_SIMPLEHTML = "SimpleHTML", MC_CML_GLINK = "glink", MC_CML_COLLECTIONS = "Collections", MC_CML_COLLECTION = "Collection", MC_CML_ENTITY = "Entity", MC_CML_MULTIGEOMETRY = "MultiGeometry", MC_CML_POLYGON = "Polygon", MC_CML_OUTLS = "outerBoundaryIs", MC_CML_ITLS = "interBoundaryIs", MC_CML_LINEARSTRING = "LinearRing", MC_CML_POLYLINE = "LineString", MC_CML_LENGTH = "length", MC_CML_AREA = "area", MC_CML_HREF = "href", MC_CML_POINT = "Point", MC_CML_COORDS = "coordinates", MC_CML_KEY = "key", MC_CML_VALUE = "value", MC_CML_USRDATA = "UserContent", MC_ACTION_CREATE_COLLECTION = "CreateCollection", MC_ACTION_UPDATE_COLLECTION = "UpdateCollection", MC_ACTION_DELETE_COLLECTION = "DeleteCollection", MC_ACTION_CLEAR_COLLECTION = "ClearCollection", MC_ACTION_RETRIEVE_ALLCOLLECTIONS = "RetrieveAllCollections", MC_ACTION_RETRIEVE_ALLCOLLECTIONS_METADATA = "RetrieveAllCollectionsMetadata", MC_ACTION_RETRIEVE_COLLECTION = "RetrieveCollection", MC_ACTION_RETRIEVE_SHAREDCOLLECTION = "RetrieveSharedCollection", MC_ACTION_DELETE_ENTITY = "DeleteEntity", MC_ACTION_ADD_ENTITY = "AddEntity", MC_FCCALLBACK = "fncallback", MC_ACTION_REPAINT = "Repaint", MC_CHANGE_STATE_UPDATE = 1, MC_CHANGE_STATE_DELETE = 2, MC_CHANGE_STATE_CREATE = 3, MC_CHANGE_STATE_DEFAULT = 0, MC_CHANGE_TYPE_METADATA = 1, MC_CHANGE_TYPE_CHILDREN = 2, MC_CHANGE_TYPE_ALL = 3, MC_COLLECTION_SIGNIN_SIZE = 2048, MC_ANNOTATION_SIGNIN_SIZE = 10, MC_TIMER_KEEPTRYING = "keeptrying", MC_TIMER_MINDELAY = 0, MC_TIMER_DELAY = 3000, MC_TIMER_REPEAT_DELAY = 3000, MC_TIMER_NOW = 10, MC_TIMER_EXTENDDELAY = 5000, MC_REQUEST_QUEUE_MAXSIZE = 20, MC_TIMER_VALUE = "DELAYVALUE", MC_KVP_COLLIST = "COLLIST", MC_KVP_COL_MSNID = "COL_MSNID", MC_KVP_COL = "COL", MC_KVP_COL_USRDATA = "COL_USRDATA", MC_KVP_ENTITY_MSNID = "ENTITY_MSNID", MC_KVP_ENTITYLIST = "ENTITYLIST", MC_KVP_ENTITY = "ENTITY", MC_KVP_SERVER_STATUS = "req_status", MC_COLLECTIONLIST_UL_ID = "sp_collection_list", MC_SCRATCHPADITEM_LI_SUFFIX = "_li", MC_SCRATCHPADITEM_MEASURE_SUFFIX = "_m", MC_SCRATCHPAD_DRAGCURSOR = "move", MC_SCRATCHPAD_DRAGGEDSTYLE = "DraggedLI", MC_SCRATCHPAD_COLLECTIONLISTDIV_ID = "scratchPadCollectionListWrapper", MC_SCRATCHPAD_WRAPLEN_TITLE = 22, MC_SCRATCHPAD_WRAPLEN_DESC = 26, MC_CV_WRAPLEN_COLLECTIONDESC = 28, MC_CV_WRAPLEN_TITLE = 22, MC_CV_WRAPLEN_DESC = 22, MC_ERO_WRAPLEN_TITLE = 22, MC_ERO_WRAPLEN_DESC = 28, MC_SERVER_STATUS_NO_ACCESS = "not authorized", MC_SERVER_STATUS_BUSY = "server busy", MC_SERVER_STATUS_OK = "200", MC_SERVER_STATUS_STORE_ERROR = "570", MC_SERVER_STATUS_NAMEEXIST_ERROR = "571", MC_SERVER_STATUS_QUOTA_ERROR = "572", MC_SERVER_STATUS_UNEXPECTED_ERROR = "500", MC_SERVER_STATUS_ACCESSDENIED_ERROR = "403", MC_COL_TYPE_FAVORITE = 1, MC_COL_TYPE_COLLECTION = 0, MC_COL_TYPE_RESULT = 2, MC_COL_TYPE_TRAFFIC = 3, MC_COL_TYPE_DRIVING = 4, MC_COL_TYPE_RSSFEED = 5, MC_COL_TYPE_TILEIMAGE = 6, MC_DS_MSN_CML = 0, MC_DS_FILE_CML = 1, MC_DS_MSN_VEML = 2, MC_MAX_LOADED_COLS = 2, MC_MAX_COL_SIZE = 200, cssCursors;

function VE_MapStruct() {
}

VE_MapStruct.PushpinType = {ViewerClass:"VE_Community_searchResult", PushpinClass:"VE_Pushpin", Token:" ", PushpinYp:"VE_Pushpin VE_Pushpin_yp", PushpinAn:"VE_Pushpin VE_Pushpin_aN", Polyline:"VE_Pushpin VE_Pushpin_Polyline", Polygon:"VE_Pushpin VE_Pushpin_Polygon", PushpinViewer:"VE_Pushpin_viewer", PolylineViewer:"VE_Pushpin_Polyline_viewer", PolygonViewer:"VE_Pushpin_Polygon_viewer", PushpinViewerHover:" VE_Pushpin_viewer_mouseover", PolylineViewerHover:"VE_Pushpin_Polyline_viewer_mouseover", PolygonViewerHover:"VE_Pushpin_Polyline_viewer_mouseover", PushpinViewerTopMost:"VE_Pushpin_viewer topMost", PolylineViewerTopMost:"VE_Pushpin_Polyline_viewer polytopMost", PolygonViewerTopMost:"VE_Pushpin_Polyline_viewer polytopMost"};
VE_MapStruct.PushpinSize = {WidthaN:22, HeightaN:17, WidthShp:22, HeightShp:-17, WidthLbl:-29, HeightLbl:-17, WidthView:25, HeightView:29, WidthShpView:25, HeightShpView:-29};
_VERegisterNamespaces("Msn.VE.Core");
Msn.VE.Core.Layer = function () {this.iid = null;this.MsnId = null;this.Name = "unsaved collection";this.Type = 0;this.Visibility = true;this.Boundingbox = null;this.MaxScale = 21;this.MinScale = 1;this.Spec = null;};
Msn.VE.Core.Layer.prototype.SetMsnId = function (a) {this.MsnId = a;};
Msn.VE.Core.Layer.prototype.GetMsnId = function () {return this.MsnId;};
Msn.VE.Core.Layer.prototype.SetId = function (a) {this.iid = a;};
Msn.VE.Core.Layer.prototype.GetId = function () {return this.iid;};
Msn.VE.Core.Layer.prototype.SetName = function (a) {this.Name = a;};
Msn.VE.Core.Layer.prototype.GetName = function () {return this.Name;};
Msn.VE.Core.Layer.prototype.SetType = function (a) {this.Type = a;};
Msn.VE.Core.Layer.prototype.GetType = function () {return this.Type;};
Msn.VE.Core.Layer.prototype.SetVisibility = function (a) {this.Visibility = a;};
Msn.VE.Core.Layer.prototype.GetVisibility = function () {return this.Visibility;};
Msn.VE.Core.Layer.prototype.SetMaxZoomLevel = function (a) {this.MaxScale = a;};
Msn.VE.Core.Layer.prototype.GetMaxZoomLevel = function () {return this.MaxScale;};
Msn.VE.Core.Layer.prototype.SetMinZoomLevel = function (a) {this.MinScale = a;};
Msn.VE.Core.Layer.prototype.GetMinZoomLevel = function () {return this.MinScale;};
Msn.VE.Core.Layer.prototype.SetBoundingBox = function (f, e, c, d, a, b) {if (!this.Boundingbox) {if (c == null || d == null || a == null || b == null) {return null;}this.Boundingbox = new Msn.VE.Bounds(f, e, c, d, a, b);} else {this.Boundingbox.x1 = c;this.Boundingbox.y1 = d;this.Boundingbox.z1 = f;this.Boundingbox.x2 = a;this.Boundingbox.y2 = b;this.Boundingbox.z2 = e;}return this.Boundingbox;};
Msn.VE.Core.Layer.prototype.GetBoundingBox = function () {if (typeof this.Boundingbox == "undefined" || !this.Boundingbox) {this.Boundingbox = new Msn.VE.Bounds(0, 0, Infinity, Infinity, - Infinity, - Infinity);}return this.Boundingbox;};
Msn.VE.Core.VectorLayer = function () {};
Msn.VE.Core.VectorLayer.prototype = new Msn.VE.Core.Layer;
Msn.VE.Core.RasterLayer = function () {};
Msn.VE.Core.RasterLayer.prototype = new Msn.VE.Core.Layer;
_VERegisterNamespaces("Msn.VE.Core");
Msn.VE.Core.EventRegistry = function () {var a = new VE_MapHashtable;this.AddListener = function (c, b) {a.put(c, b);};this.RemoveListener = function (e, d) {var b = a.get(e);if (b == "undefined" || b == null || b.length < 1) {return null;}for (var c = 0; c < b.length; c++) {if (b[c] == d) {b.splice(c, 1);}}};this.Fire = function (e, d) {if (e == "undefined" || e == null) {return;}var b = a.get(e);if (b == "undefined" || b == null || b.length < 1) {return null;}for (var c = 0; c < b.length; c++) {if (b[c] == "undefined" || b[c] == null) {continue;}if (d == "undefined" || d == null) {b[c]();} else {b[c](d);}}d = null;};};

function VE_MapHashtable() {
    this.hash = [];
    this.keys = [];
}

VE_MapHashtable.prototype.hash = null;
VE_MapHashtable.prototype.keys = null;
VE_MapHashtable.prototype.get = function (a) {return this.hash[a];};
VE_MapHashtable.prototype.put = function (b, c) {if (c == null) {return null;}var a = null;a = this.hash[b];if (a == null || a == "undefined") {this.keys[this.keys.length] = b;a = [];}a.push(c);this.hash[b] = a;};
_VERegisterNamespaces("Msn.Drawing");
Msn.Drawing.MapGeoRssReader = function () {};
Msn.Drawing.MapGeoRssReader.prototype.ReadGeoRSS = function (x, q) {var y = false, r = null, p = null, v = null, n = null, f = null, e = null, b = null, l = x.getElementsByTagName("item");if (l.length < 1) {l = x.getElementsByTagName("entry");}var m = VEShapeType.Pushpin;if (l.length > 0) {for (i = 0; i < l.length; i++) {f = null;e = null;b = null;m = VEShapeType.Pushpin;for (j = 0; j < l[i].childNodes.length; j++) {if (l[i].childNodes[j].nodeType != 1) {continue;}var a = l[i].childNodes[j].nodeName, c = l[i].childNodes[j];if (a == "title") {if (c.firstChild) {r = c.firstChild.nodeValue;} else {r = "";}} else if (a == "description" || a == "summary" || a == "content") {if (c.firstChild) {p = c.firstChild.nodeValue;} else {p = "";}} else if (a == "link") {if (c.firstChild) {v = c.firstChild.nodeValue;} else {v = c.getAttribute("href");}} else if (a == "icon") {n = c.firstChild.nodeValue;} else if (a == "virtualearth:icon") {n = c.firstChild.nodeValue;} else if (a == "geo:lat") {f = c.firstChild.nodeValue;} else if (a == "geo:lon") {e = c.firstChild.nodeValue;} else if (a == "geo:long") {e = c.firstChild.nodeValue;} else if (a == "geo:Point" || a == "geo:point") {for (k = 0; k < c.childNodes.length; k++) {var d = c.childNodes[k];if (d.nodeName == "geo:lat") {f = d.firstChild.nodeValue;} else if (d.nodeName == "geo:lon" || d.nodeName == "geo:long") {e = d.firstChild.nodeValue;}}} else if (a == "georss:point" || a == "georss:line" || a == "georss:polygon") {if (c.firstChild) {var o = c.firstChild.nodeValue;b = this.ExtractLatLonPairFromXMLList(o);if (b && b.length > 1) {f = b[1];e = b[0];if (a == "georss:line") {m = VEShapeType.Polyline;} else if (a == "georss:polygon") {m = VEShapeType.Polygon;}}}} else if (a == "gml:name") {if (c.firstChild) {r = c.firstChild.nodeValue;} else {r = "";}} else if (a == "gml:description") {if (c.firstChild) {p = c.firstChild.nodeValue;} else {p = "";}} else if (a == "gml:Point" || a == "gml:point" || a == "georss:where" && c.firstChild.nodeName == "gml:Point") {var g = null;if (a == "gml:Point" || a == "gml:point") {g = c.childNodes;} else {g = c.firstChild.childNodes;}for (k = 0; k < g.length; k++) {var d = g[k];if (d.nodeName == "gml:pos") {if (d.firstChild) {var o = d.firstChild.nodeValue;b = this.ExtractLatLonPairFromXMLList(o);if (b && b.length > 1) {f = b[1];e = b[0];}}}}} else if (a == "gml:pos" || a == "gml:posList") {if (l[i].childNodes[j].firstChild) {var o = l[i].childNodes[j].firstChild.nodeValue;b = this.ExtractLatLonPairFromXMLList(o);if (b && b.length > 1) {f = b[1];e = b[0];if (a == "gml:posList") {m = VEShapeType.Polyline;}}}} else if (a == "gml:LineString" || a == "georss:where" && c.firstChild.nodeName == "gml:LineString") {var g = null;if (a == "gml:LineString") {g = c.childNodes;} else {g = c.firstChild.childNodes;}m = VEShapeType.Polyline;var z = g.length;for (k = 0; k < z; k++) {var d = g[k];if (d.nodeName == "gml:posList") {if (d.firstChild) {var o = d.firstChild.nodeValue;b = this.ExtractLatLonPairFromXMLList(o);if (b && b.length > 1) {f = b[1];e = b[0];}}}}} else if (a == "gml:Polygon" || a == "georss:where" && c.firstChild.nodeName == "gml:Polygon") {var g = null;if (a == "gml:Polygon") {g = c.childNodes;} else {g = c.firstChild.childNodes;}m = VEShapeType.Polygon;var z = g.length;for (k = 0; k < z; k++) {var u = g[k];if (u.nodeName == "gml:exterior" || u.nodeName == "gml:interior") {var d = null;d = u.childNodes;var B = d.length;for (var s = 0; s < B; s++) {if (d[s].nodeName == "gml:LinearRing" && d[s].firstChild) {var o = null, w = d[s].firstChild;if (w.nodeName == "gml:posList" && w.firstChild) {o = w.firstChild.nodeValue;b = this.ExtractLatLonPairFromXMLList(o);if (b && b.length > 1) {f = b[1];e = b[0];}}}}}}}}if (f == null || f == "undefined" || f.length <= 0 || e == null || e == "undefined" || e.length <= 0) {continue;}if (q.Spec.IconUrl != null && q.Spec.IconUrl != "undefined") {n = q.Spec.IconUrl;}if (n == null || n == "undefined" || n.length <= 0) {n = Msn.VE.API.Constants.iconurl;}var A = p;try {var t = null;if (m == VEShapeType.Pushpin) {if (f != null && e != null) {t = new Msn.Drawing.Point(e, f);} else {continue;}} else if (m == VEShapeType.Polyline) {if (b.length < 4) {continue;}t = new Msn.Drawing.PolyLine(b);} else if (m == VEShapeType.Polygon) {if (b.length < 8) {continue;}t = new Msn.Drawing.Polygon(b);}var h = new VEShape(MC_VESHAPE_EMPTY);h.AddPrimitive(t);h.Latitude = f;h.Longitude = e;h.Url = v;h.IconId = n;h.Notes = A;h.SetDisplayOrder(i);h.SetIndex(i);h.Title = r;q.AddEntityAnnotation(h);} catch (D) {throw new VEException("VEMap:AddGeoRSSLayerPushpins", "err_invalidLatLong", D.message);}}}if (q.GetShapeCount() > 0) {y = true;}return y;};
Msn.Drawing.MapGeoRssReader.prototype.ExtractLatLonPairFromXMLList = function (a) {a = a.replace(/^\s+/g, "");a = a.replace(/\s+$/g, "");var b = [];if (a.indexOf(",") > 0) {b = a.split(",");} else {a = a.replace(/\s+/g, " ");b = a.split(" ");}var d = b.length;if (d / 2 != Math.round(d / 2)) {return null;}for (var c = 0; c < d - 1; c = c + 2) {var e = parseFloat(b[c]), f = parseFloat(b[c + 1]);if (isNaN(e) || isNaN(f)) {throw new VEException("VEMap:ExtractLatLonPairFromXMLList", "err_invalidLatLong", L_GeoRssInvalidFormatError_Text);}b[c] = f;b[c + 1] = e;}return b;};
_VERegisterNamespaces("VE_MapCmlReader");
VE_MapCmlReader = function () {};
VE_MapCmlReader.ReadCMLDom = function (c, b, a) {return VE_MapCmlReader.ExtractCollections(c, b, a);};
VE_MapCmlReader.ExtractCollections = function (h, o, k) {var r = null, c = o.getElementsByTagName(MC_CML_COLLECTION);if (!c) {return null;}var j = c.length;if (j < 1) {return null;}var l = [], s = h.action;for (var d = 0; d < j; d++) {var q = c[d].getAttribute(MC_CML_ID), p = c[d].getAttribute(MC_CML_IID), g = unescape(c[d].getAttribute(MC_CML_NAME)), m = c[d].getAttribute(MC_CML_VISIBILITY), f = c[d].getAttribute(MC_CML_TYPE), a = k.GetCollectionByMsnId(h, q, p);if (!a) {continue;}if (m != null && m == "false") {a.SetVisibility(false);}if (f && f != "" && f != "undefined") {a.SetType(f);}if (g && g != "" && g != "undefined") {a.SetName(g);}var n = c[d].childNodes.length;for (var i = 0; i < n; i++) {var b = c[d].childNodes.item(i);switch (b.nodeName) {case MC_CML_SHARELEVEL:if (b.text == "public") {a.IsPublic = true;a.IsIndexed = false;} else if (b.text == "indexed") {a.IsPublic = true;a.IsIndexed = true;} else {a.IsPublic = false;a.IsIndexed = false;}break;case MC_CML_DESCRIPTION:a.Notes = unescape(b.text);break;case MC_CML_TAGS:a.Tags = unescape(b.text);break;case MC_CML_LASTMODIFIED:var e = new Date(b.text);if (e == "NaN") {a.DateModified = Date();} else {a.DateModified = b.text;}break;case MC_CML_DATECREATED:var e = new Date(b.text);if (e == "NaN") {a.DateCreated = Date();} else {a.DateCreated = b.text;}break;case MC_CML_ENTITY:VE_MapCmlReader.ExtractEntity(h, b, a, k);break;case MC_CML_STATE:var e = parseInt(b.text);if ((e & MC_CML_STATE_OWNER_CAN_VIEW) == MC_CML_STATE_OWNER_CAN_VIEW && (e & MC_CML_STATE_PUBLIC_CAN_VIEW) != MC_CML_STATE_PUBLIC_CAN_VIEW) {a.ViewableByOwnerOnly = true;} else {a.ViewableByOwnerOnly = false;}if ((e & MC_CML_STATE_OWNER_CAN_UPDATE) == MC_CML_STATE_OWNER_CAN_UPDATE) {a.EditableByOwner = true;} else {a.EditableByOwner = false;}if ((e & MC_CML_STATE_OWNER_IS_VIEWING) == MC_CML_STATE_OWNER_IS_VIEWING) {a.OwnerIsViewing = true;} else {a.OwnerIsViewing = false;}break;default:;}}l.push(a);}return l;};
VE_MapCmlReader.ExtractEntity = function (n, s, f, m) {var b = s, k = b.getAttribute(MC_CML_ID), q = b.getAttribute(MC_CML_IID), j = b.getAttribute(MC_CML_TYPE), i = unescape(b.getAttribute(MC_CML_NAME)), r = b.getAttribute(MC_CML_VISIBILITY), o = n.action;if (o == MC_ACTION_ADD_ENTITY) {var d = n.GetParameters(MC_KVP_ENTITYLIST);if (typeof d == "undefined" || d == null) {return;}for (var h = 0; h < d.length; h++) {var g = d[h];if (typeof g == "undefined" || g == null) {continue;}if (g.GetId() == q) {g.SetMsnId(k);d.splice(h, 1);return;}}return;}var e;if (o == MC_ACTION_CREATE_COLLECTION) {e = m.GetAnnotationByMsnId(f, k, q);} else {e = m.GetAnnotationByMsnId(f, k);}var a = e[1];if (e[0]) {return;}if (j && j != "") {a.SetType(j);}if (i && i != "") {a.Title = i;}if (r && r != "") {a.SetVisibility(false);}var c = null, v = null, u = b.childNodes.length;for (var l = 0; l < u; l++) {c = b.childNodes[l];if (c.nodeType == 1) {var t = c.nodeName;switch (t) {case MC_CML_PROPERTYS:VE_MapCmlReader.ExtractEntityProperties(c, a);break;case MC_CML_DESCRIPTION:a.Notes = unescape(c.text);break;case MC_CML_SHARELEVEL:break;case MC_CML_ENTITY_PRIMITIVES:var p = VE_MapCmlReader.ExtractPrimitives(c);if (p) {a.ClearAllPrimitives();a.SetPrimitives(p);}break;default:;}}}if (!e[0]) {f.AddEntityAnnotation(a);} else {f.UpdateEntityAnnotation(a);}return f;};
VE_MapCmlReader.ExtractEntityProperties = function (f, b) {var g = f.childNodes.length;for (var e = 0; e < g; e++) {var a = f.childNodes.item(e);if (a.nodeName == MC_CML_PROPERTY) {switch (a.getAttribute(MC_CML_KEY)) {case MC_CML_PROPERTY_URL:var c = null;c = unescape(a.getAttribute(MC_CML_VALUE));if (c != "undefined" && c) {b.Url = c;}break;case MC_CML_PROPERTY_KEYWORDS:b.Keywords = unescape(a.getAttribute(MC_CML_VALUE));break;case MC_CML_PROPERTY_PHOTOURL:var d = null;d = unescape(a.getAttribute(MC_CML_VALUE));if (d) {b.PhotoUrl = d;}break;case MC_CML_PROPERTY_USERDATE:b.UserDate = a.getAttribute(MC_CML_VALUE);break;case MC_CML_PROPERTY_DISPLAYORDER:b.DisplayOrder = a.getAttribute(MC_CML_VALUE);break;case MC_CML_PROPERTY_BUSINESSLISTINGID:b.SetBusinessListingId(a.getAttribute(MC_CML_VALUE));break;case MC_CML_LASTMODIFIED:b.LastModified = a.getAttribute(MC_CML_VALUE);break;case MC_CML_DISPLAYORDER:b.SetDisplayOrder(a.getAttribute(MC_CML_VALUE));break;case MC_CML_ZOOMLEVEL:b.SetZoomLevel(a.getAttribute(MC_CML_VALUE));break;case MC_CML_ONSCRATCHPAD:b.SetOnScratchpad(a.getAttribute(MC_CML_VALUE));break;default:;}}}return b;};
VE_MapCmlReader.ExtractPrimitives = function (k) {var f = [], n = k.childNodes.length;for (var j = 0; j < n; j++) {var e = k.childNodes.item(j);if (e.nodeName == MC_CML_ENTITY_PRIMITIVE) {var c = true, a = null, m = null, o = e.childNodes.length;for (var i = 0; i < o; i++) {var b = e.childNodes[i];if (c) {var d = b.getAttribute(MC_CML_LENGTH), l = b.getAttribute(MC_CML_AREA);switch (b.nodeName) {case MC_CML_POLYGON:c = false;a = VE_MapCmlReader.ExtractPolygon(b);if (d) {a.SetLength(d * 1);}if (l) {a.SetArea(l * 1);}break;case MC_CML_POLYLINE:c = false;a = VE_MapCmlReader.ExtractPolyLine(b);if (d) {a.SetLength(d * 1);}break;case MC_CML_POINT:c = false;a = VE_MapCmlReader.ExtractPoint(b);break;default:;}} else if (b.nodeName == MC_CML_DEFAULTSTYLE) {var h = VE_MapCmlReader.ExtractStyle(b);m = h[0];if (h.length > 1) {var g = h[1];if (g) {a.labelPosX = g.longitude;a.labelPosY = g.latitude;}}}}if (a != null) {if (a.type != VEShapeType.Pushpin) {a.symbol = m;}f.push(a);}}}if (f.length < 1) {return null;}return f;};
VE_MapCmlReader.ExtractPolygon = function (d) {var e = d.selectSingleNode(MC_CML_OUTLS).selectSingleNode(MC_CML_LINEARSTRING), c = e.selectSingleNode(MC_CML_COORDS), a = VE_GetLatLongPairsFromString(c.text);if (a[4] == null) {return null;}var b = new Msn.Drawing.Polygon(a[4]);b.minX = a[0];b.minY = a[1];b.maxX = a[2];b.maxY = a[3];return b;};
VE_MapCmlReader.ExtractPolyLine = function (d) {var c = d.selectSingleNode(MC_CML_COORDS), a = VE_GetLatLongPairsFromString(c.text);if (a[4] == null) {return null;}var b = new Msn.Drawing.PolyLine(a[4]);b.iid = Msn.Drawing.GetGeoUID(VEShapeType.Polyline);b.minX = a[0];b.minY = a[1];b.maxX = a[2];b.maxY = a[3];return b;};
VE_MapCmlReader.ExtractPoint = function (c) {var b = c.selectSingleNode(MC_CML_COORDS), a = VE_GetLatLongPairsFromString(b.text)[4];if (a == null) {return null;}var d = new Msn.Drawing.Point(a[0], a[1]);return d;};
VE_MapCmlReader.ExtractStyle = function (h) {var e = [], b = VE_MapDispatch_SymbolLib.GetCurrentDefaultSymbol();b = b.Clone();var k = h.childNodes.length, d = null;for (var f = 0; f < k; f++) {var c = h.childNodes.item(f);if (c.nodeName == MC_CML_STYLE) {var l = c.text, i = l.split(MC_CML_TOKEN3), a = null, m = i.length;for (var g = 0; g < m; g++) {a = i[g].split(MC_CML_TOKEN2);if (a != null || a.length == 2) {switch (a[0]) {case MC_STYLE_STROKE_COLOR:b.stroke_color = a[1];break;case MC_STYLE_FILL_COLOR:b.fill_color = a[1];break;case MC_STYLE_STROKE_WEIGHT:b.stroke_weight = a[1];break;case MC_STYLE_STROKE_STYLE:b.stroke_style = a[1];break;case MC_STYLE_STROKE_DASH:b.stroke_dashstyle = a[1];break;default:;}}a = null;}} else if (c.nodeName == MC_CML_LABELSTYLE) {var j = c.selectSingleNode(MC_CML_POSITION);d = VE_GetLatLongFromString(j.text);}}e.push(b);if (d) {e.push(d);}return e;};

function VE_GetLatLongFromString(c) {
    var a = c.split(MC_CML_TOKEN1);
    if (typeof a == "undefined" || a == null || a.length != 2) {
        return null;
    }
    var b = new Msn.VE.LatLong;
    b.longitude = parseFloat(a[0]);
    b.latitude = parseFloat(a[1]);
    return b;
}


function VE_GetLatLongPairsFromString(j) {
    var g = null, h = null, e = null, f = null, c = new Array(5), b = [], d = j.split(MC_CML_TOKEN1);
    for (var a = 0; a < 2; a++) {
        b[a] = parseFloat(d[a]);
        if (b[a] == NaN) {
            return null;
        }
    }
    if (d.length > 3) {
        g = b[0];
        h = b[1];
        e = b[0];
        f = b[1];
    }
    var i = true;
    for (var a = 2; a < d.length; a++) {
        b[a] = parseFloat(d[a]);
        if (b[a] == NaN) {
            return null;
        }
        if (i) {
            if (b[a] < g) {
                g = b[a];
            } else if (b[a] > e) {
                e = b[a];
            }
            i = false;
        } else {
            if (b[a] < h) {
                h = b[a];
            } else if (b[a] > f) {
                f = b[a];
            }
            i = true;
        }
    }
    c[0] = g;
    c[1] = h;
    c[2] = e;
    c[3] = f;
    c[4] = b;
    return c;
}

VEShapeStyleLibrary = function () {var a = [];this.AddMapSymbol = function (b) {if (b.stroke_color2 == null || b.stroke_color2 == "") {if (b.stroke_color == "red") {b.stroke_color2 = "blue";} else {b.stroke_color2 = "red";}}if (b.fill_color2 == null || b.fill_color2 == "") {if (b.fill_color == "blue") {b.fill_color2 = "red";} else {b.fill_color2 = "blue";}}a.push(b);};var b = null;this.GetCurrentDefaultSymbol = function () {if (b == null) {b = this.GetMapSymbolByID(MC_PROPERTY_PARK);}return b;};this.GetMapSymbolByID = function (c) {if (a.length > 0) {for (var d = 0; d < a.length; d++) {if (a[d].id == c) {return a[d];}}} else {var e = new VEShapeStyle;e.id = MC_PROPERTY_DEFAULT;this.AddMapSymbol(e);}var b = null;if (typeof c == "undefined" || c == 0) {return a[0];}b = new VEShapeStyle;switch (c) {case MC_PROPERTY_HIGHWAY:b.id = c;break;case MC_PROPERTY_ROAD:b.id = c;b.stroke_color = "yellow";b.stroke_style = "thickbetweenthin";b.stroke_weight = 6;break;case MC_PROPERTY_LAKE:b.id = c;break;case MC_PROPERTY_PARK:b.id = c;b.stroke_opacity = "50%";b.stroke_endcap = "square";b.stroke_joinstyle = "bevel";break;case MC_PROPERTY_PARKINGLOT:b.id = c;break;case MC_PROPERTY_PUSHPIN:b.id = c;break;case MC_PROPERTY_TEMPDRAW:b.id = c;b.stroke_weight = 1;b.stroke_dashstyle = "dashdot";break;case MC_PROPERTY_TEMPEDIT:b.id = c;b.stroke_weight = 1;b.stroke_color = "#0F0F0F";b.stroke_dashstyle = "longdashdot";break;case MC_PROPERTY_EDITNODE:b.id = c;b.shape_drawtype = "v:rect";b.style_filter = "100%";b.stroke_color = "#000000";b.fill_color = "yellow";break;case MC_PROPERTY_EDITSELNODE:b.id = c;b.shape_drawtype = "v:rect";b.style_filter = "100%";b.stroke_color = "red";b.fill_color = "yellow";break;default:return a[0];}this.AddMapSymbol(b);return b;};this.GetLocalMapSymbol = function (b) {var a = VE_MapManager.GetEntityPrimitiveByElmt(b);if (a == null) {return null;}geometry = a[2];if (typeof geometry == "undefined" || geometry == null) {return null;}return geometry.symbol;};};

function VE_MapRequestBean(c) {
    this.action = c == "undefined" ? null : c;
    var a = null, b = "action=" + this.action;
    this.SetParameters = function (d, c) {if (a == null) {a = [];}a[d] = c;b = b.concat("&", d, "=", c);};
    this.GetParameters = function () {return a;};
    this.ToString = function () {return b;};
}

_VERegisterNamespaces("Msn.Drawing");
Msn.Drawing.GetTextUID = function (a) {return a + MC_IID_CON_TOKEN + "t";};
Msn.Drawing.GetLabelUID = function (a) {return a + MC_IID_CON_TOKEN + "l";};
Msn.Drawing.GetShpElementUIDByLabelUID = function (c) {var b = "", a = c.split(MC_IID_CON_TOKEN);if (!a || a[0] != MC_IID_NAMESPACE) {return null;}b = b.concat(a[0], MC_IID_CON_TOKEN, a[1], MC_IID_CON_TOKEN, a[2], MC_IID_CON_TOKEN, a[3]);return b;};
Msn.Drawing.CreatePointPushpin = function (k, a, m, q, i, f, e, j) {var g = null, c = m;Msn.Drawing.CalculateLabelPosition(a, false);var p = a.labelPosX ? a.labelPosX : a.points[0], o = a.labelPosY ? a.labelPosY : a.points[1], n = f ? f : 22, l = e ? e : 17, h = a.iid, b = i;if (a.type == VEShapeType.Pushpin) {if (typeof b == "undefined" || !b) {b = VE_MapStruct.PushpinType.PushpinAn;}} else {h = Msn.Drawing.GetLabelUID(a.iid);if (typeof b == "undefined" || !b) {b = VE_MapStruct.PushpinType.Polyline;}}var d = c + "";if (j) {if (b == "VE_Pushpin VE_Pushpin_aN") {d = "<div style=\"position:absolute;width:25px;height:25px;\"><img src=\"i/bin/" + window.buildVersion + "/pins/poi_usergenerated.gif\" /></div><div style=\"position:absolute;top:5px;width:25px;height:25px;\"><font color=\"white\">" + c + "</font></div>";} else if (b == "VE_Pushpin VE_Pushpin_yp") {d = "<div style=\"position:absolute;width:25px;height:25px;\"><img src=\"i/bin/" + window.buildVersion + "/pins/poi_businesslisting.gif\" /></div><div style=\"position:absolute;top:5px;width:25px;height:25px;\"><font color=\"white\">" + c + "</font></div>";} else if (b == "VE_Pushpin VE_Pushpin_Polyline") {d = "<div style=\"position:absolute;width:25px;height:25px;\"><img src=\"i/bin/" + window.buildVersion + "/pins/poi_title_search3.gif\" /></div><div style=\"position:absolute;top:5px;width:25px;height:25px;\"><font color=\"white\">" + c + "</font></div>";}}g = k.AddPushpin(h, o, p, n, l, b, d, MC_STYLE_PINZIndex, Msn.VE.PushPinTypes.Annotation, true);return g;};

function IsPointInPolygon(a, b, e, f, c, d) {
    if (a > c || a < e || b > d || b < f) {
        return false;
    }
    return true;
}


function GetAgentName() {
    var c = ["msie", "firefox"], d = "";
    for (var a = 0; a < c.length; a++) {
        var e = navigator.userAgent.toLowerCase(), b = c[a];
        if (e.indexOf(b) != -1) {
            d = b;
        }
    }
    return d;
}

_VERegisterNamespaces("Msn.Drawing");
Msn.Drawing.CalculateLabelPosition = function (a, f) {if (a.type == VEShapeType.Pushpin) {return null;}if (typeof f != "undefined" && f == true) {a.labelPosX = null;a.labelPosY = null;}if (a.labelPosX == null && a.labelPosY == null) {if (a.type == VEShapeType.Polyline) {var b = Math.round((a.points.length / 2 - 1) / 2 - 1);b = b > -1 ? b : 0;a.labelPosX = (a.points[2 * b] + a.points[2 * b + 2]) / 2;a.labelPosY = (a.points[2 * b + 1] + a.points[2 * b + 3]) / 2;} else if (a.type == VEShapeType.Polygon) {var e = a.points.length, c = 0, d = 0;for (var b = 0; b < e; b = b + 2) {c = c + a.points[b];d = d + a.points[b + 1];}c = c * 2 / e;d = d * 2 / e;a.labelPosX = c;a.labelPosY = d;}}};
_VERegisterNamespaces("Msn.VE.Core");
Msn.VE.Core.LayerManager = function () {var m = new Msn.VE.Core.EventRegistry, h = this, a = [], e = [], g = null, V = null, X = 0, W = null;
function E() {if (g == null) {g = document.createElement("div");g.id = "VELayerListDiv";u();}return g;}

function u() {c(0, 0, "Unsaved Collection");}
var b = null;this.SetBoundingBox = function (f, g, a, d, c, e) {if (b) {b = new Msn.VE.Bounds(0, 0, a, d, c, e);} else {b.z1 = f;b.z2 = g;b.x1 = a;b.x2 = c;b.y1 = d;b.y2 = e;}};this.GetBoundingBox = function () {if (b == null) {var a = i();if (a) {return a.GetBoundingBox();}}return b;};var d = 0;this.GetSelectedCollectionMsnId = function () {return d;};var j = null;this.SetSelectedAnnotation = function (a) {j = a;};this.ClearSelectedAnnotation = function () {j = null;};this.GetSelectedAnnotation = function () {return j;};this.IsSelectedCollectionUnsaved = function () {if (d == 0) {return true;} else {return false;}};this.SetSelectedCollectionMsnId = function (a) {d = a;if (a != 0) {for (var g = 0; g < e.length; g++) {if (e[g] == a) {return a;}}e.push(a);if (e.length > MC_MAX_LOADED_COLS) {var c = e.shift();c = o(c);if (c > 0) {var b = p(c);if (b && b.GetType() == MC_COL_TYPE_COLLECTION) {mvcViewFacade.OnCollectionLayerClear(b);f(b);}}}}};this.AddListener = function (b, a) {m.AddListener(b, a);};this.RemoveListener = function (b, a) {m.RemoveListener(b, a);};this.Fire = function (b, a) {m.Fire(b, a);};
function k(c, b) {if (c == 0) {a.unshift(b);} else {a.push(b);}return b;}

function K(d) {if (a.length > 0) {for (var b = 0; b < a.length; b++) {var c = a[b];if (c.GetMsnId() && c.GetMsnId() == d) {return true;}}}return false;}

function Q(d) {var b = a[0];if (b.GetMsnId() == 0) {b = a.shift();a.push(b);c(0, 0, "Unsaved Collection");b.SetMsnId(d);return b;}}

function o(d) {if (a.length > 0) {for (var b = 0; b < a.length; b++) {var e = a[b], c = e.GetMsnId();if (c && c == d) {return b;}}}return 0;}

function D(b, a) {if (!b) {return null;}switch (b.action) {case MC_ACTION_RETRIEVE_ALLCOLLECTIONS_METADATA:return this.RetrieveCollection(a);break;case MC_ACTION_CREATE_COLLECTION:return this.SaveCollection(a);break;case MC_ACTION_UPDATE_COLLECTION:return this.RetrieveCollection(a);break;case MC_ACTION_ADD_ENTITY:return this.RetrieveCollection(a);break;case MC_ACTION_RETRIEVE_SHAREDCOLLECTION:case MC_ACTION_RETRIEVE_COLLECTION:return this.RetrieveCollection(a);break;case MC_ACTION_RETRIEVE_ALLCOLLECTIONS:case MC_ACTION_DELETE_COLLECTION:break;default:;}}

function I(e) {var f = false;if (a.length > 0) {for (var d = 0; d < a.length; d++) {var b = a[d];if (b.GetMsnId() && b.GetMsnId() == e) {f = true;return b;}}}if (!f) {return c(-1, e, "Unsaved Collection");}}

function S(c) {if (a.length > 0) {for (var b = 0; b < a.length; b++) {a[b].SetVisibility(c);}}}

function A(d) {if (a.length > 0) {for (var b = 0; b < a.length; b++) {var c = a[b];if (c.GetId() == d) {return c;}}}return null;}

function c(b, c, d) {var a = new VEShapeLayer;a.SetMsnId(c);a.SetName(d);a = k(b, a);return a;}

function F(c) {var b = null;if (c == MC_COL_TYPE_TILEIMAGE) {b = new Msn.VE.Core.RasterLayer;} else {b = new VEShapeLayer;}b.SetType(c);b.SetMsnId(0);b = k(a.length, b);return b;}

function i() {if (a.length > 0) {for (var b = 0; b < a.length; b++) {var d = a[b];if (h.GetSelectedCollectionMsnId() == a[b].GetMsnId()) {return a[b];}}}return c(0, 0, "Unsaved Collection");}

function R(e) {var b = [];b[0] = false;b[1] = false;if (a.length > 0) {for (var d = 0; d < a.length; d++) {if (a[d].GetMsnId() == e) {b[0] = true;var g = a[d].Annotations.length;if (!a[d].Annotations || g < 1) {b[1] = false;} else {b[1] = true;}b[2] = a[d];return b;}}}var f = c(0, e, "Unsaved Collection");b[2] = f;return b;}

function H() {if (!a) {return 0;}return a.length;}

function p(b) {if (a == null || a.length < b || b < 0) {return null;}return a[b];}

function T() {t();a = [];e = [];}

function t() {var b = null;while (a.length > 1) {b = a.pop();f(b);}if (a.length == 1) {f(a[0]);}}

function M(a) {f(a);L(a);}

function f(a) {var c = null;if (a.Annotations.length > 0) {for (var b = 0; b < a.Annotations.length; b++) {c = a.Annotations[b];l(c);}}a.Annotations = [];a.SetBoundingBox(0, 0, Infinity, Infinity, - Infinity, - Infinity);}

function L(f) {var e = 0;if (a.length == 1) {a.pop();e = 0;c(0, 0, "Unsaved Collection");} else {for (var b = 0; b < a.length; b++) {if (a[b].iid == f.iid) {e = b;a.splice(b, 1);break;}}}f = null;d = 0;}

function v() {var a = h.GetSelectedCollection();return a.GetShapeCount();}

function C(a, d, f) {var b = [];if (a && a.Annotations && a.GetShapeCount() > 0) {for (var c = 0; c < a.Annotations.length; c++) {if (d && a.Annotations[c].GetMsnId() == d || f && a.Annotations[c].GetId() == f) {b[0] = true;a.Annotations[c].SetMsnId(d);b[1] = a.Annotations[c];return b;}}}var e = new VEShape(MC_VESHAPE_EMPTY);e.SetMsnId(d);b[0] = false;b[1] = e;return b;}

function J(f) {if (a.length < 1) {return null;}var e = f, b = e.split(MC_IID_CON_TOKEN);if (b[0] != MC_IID_NAMESPACE) {return null;}b[1] = b[0] + MC_IID_CON_TOKEN + b[1];b[2] = b[1] + MC_IID_CON_TOKEN + b[2];for (var c = 0; c < a.length; c++) {if (a[c].iid == b[1]) {var g = a[c].Annotations.length;for (var d = 0; d < g; d++) {if (a[c].Annotations[d].GetId() == b[2]) {return a[c].Annotations[d];break;}}break;}}return null;}

function G(e) {if (a.length < 1) {return null;}var d = e, b = d.split(MC_IID_CON_TOKEN);if (b[0] != MC_IID_NAMESPACE) {return null;}b[1] = b[0] + MC_IID_CON_TOKEN + b[1];b[2] = b[1] + MC_IID_CON_TOKEN + b[2];for (var c = 0; c < a.length; c++) {if (a[c].iid == b[1]) {a[c]._index = c;return a[c];}}return null;}

function B(e) {if (a.length < 1) {return null;}for (var b = 0; b < a.length; b++) {if (a[b].GetMsnId() == d) {var f = a[b].Annotations.length;for (var c = 0; c < f; c++) {if (a[b].Annotations[c].GetId() == e) {l(a[b].Annotations[c]);a[b].Annotations.splice(c, 1);a[b].UpdateBoundingBox();break;}}break;}}}

function P(l, m) {var b = null, c = null, e = null;if (a.length < 1) {return null;}for (var f = 0; f < a.length; f++) {if (a[f].GetMsnId() == d) {b = f;var o = a[f].Annotations.length;for (var g = 0; g < o; g++) {if (c == null && a[f].Annotations[g].GetId() == l) {c = g;} else if (e == null && a[f].Annotations[g].GetId() == m) {e = g;}if (c != null && e != null) {break;}}break;}}if (b == null || c == null || e == null) {return null;}var n = a[b].Annotations[c];a[b].Annotations[c] = a[b].Annotations[e];a[b].Annotations[e] = n;var h = a[b].Annotations[c].GetDisplayOrder(), i = a[b].Annotations[e].GetDisplayOrder();a[b].Annotations[c].SetDisplayOrder(i);a[b].Annotations[e].SetDisplayOrder(h);var j = a[b].Annotations[c].GetIndex(), k = a[b].Annotations[e].GetIndex();a[b].Annotations[c].SetIndex(k);a[b].Annotations[e].SetIndex(j);a[b].Annotations[c].SetChangeState(MC_CHANGE_STATE_UPDATE);a[b].Annotations[e].SetChangeState(MC_CHANGE_STATE_UPDATE);mvcViewFacade.OnEntityRepaint(a[b].Annotations[c]);mvcViewFacade.OnEntityRepaint(a[b].Annotations[e]);return null;}

function r(d) {if (!d) {return null;}if (a.length < 1) {return null;}var f = d.GetId(), b = f.split(MC_IID_CON_TOKEN);if (b[0] != MC_IID_NAMESPACE) {return null;}b[1] = b[0] + MC_IID_CON_TOKEN + b[1];var e = null;for (var c = 0; c < a.length; c++) {if (a[c].iid == b[1]) {e = a[c];break;}}if (e == null) {return null;}n(e, d);}

function n(a, c) {l(c);if (a.Annotations.length == 1) {a.Annotations.pop();} else {for (var b = 0; b < a.Annotations.length; b++) {if (a.Annotations[b].GetId() == c.GetId()) {a.Annotations.splice(b, 1);break;}}}c = null;a.UpdateBoundingBox();if (a == i()) {if (typeof mvcViewFacade != "undefined" && typeof mvcViewFacade.OnCollectionLayerRepaint == "function") {mvcViewFacade.OnCollectionLayerRepaint(a);}}}

function N(a) {if (typeof a == "undefined" || a == null) {return null;}var g = a.Annotations.length, b = new VEShapeLayer;b.SetName(name);b.SetName(a.GetName());b.SetType(a.GetType());b.SetVisibility(a.GetVisibility());b.SetMaxZoomLevel(a.GetMaxZoomLevel());b.SetMinZoomLevel(a.GetMinZoomLevel());var c = a.GetBoundingBox();if (c) {b.SetBoundingBox(c.z1, c.z2, c.x1, c.y1, c.x2, c.y2);}b.Tags = a.Tags;b.SetChangeType(a.GetChangeType());b.SetChangeState(a.GetChangeState());b.Notes = a.Notes;b.IsPublic = a.IsPublic;b.IsIndexed = a.IsIndexed;b.DateCreated = a.DateCreated;b.DateModified = a.DateModified;if (g > 0) {var e = null, f = null;for (var d = 0; d < g; d++) {e = a.Annotations[d];f = q(e.GetId());b.AddEntityAnnotation(f);}}return b;}

function q(b) {var a = h.GetAnnotationById(b);return s(a);}

function s(h) {var a = h;if (typeof a == "undefined" || a == null) {return;}var b = a.GetPrimitive(0);if (b.points == null || b.points.length < 1) {return null;}var g = new Array(b.points.length), c = null;for (var e = 0; e < b.points.length; e = e + 2) {g[e] = b.points[e];g[e + 1] = b.points[e + 1];}switch (b.type) {case VEShapeType.Polygon:c = new Msn.Drawing.Polygon(g);c.minX = b.minX;c.minY = b.minY;c.maxX = b.maxX;c.maxY = b.maxY;break;case VEShapeType.Polyline:c = new Msn.Drawing.PolyLine(g);c.iid = Msn.Drawing.GetGeoUID(VEShapeType.Polyline);break;case VEShapeType.Pushpin:c = new Msn.Drawing.Point(g[0], g[1]);break;default:;}c.symbol = b.symbol;var f = new VEShape(MC_VESHAPE_EMPTY);f.AddPrimitive(c);f.SetProperties(null, a.Title, a.Url, a.PhotoUrl, a.UserDate, a.Notes, a.Latitude, a.Longitude, a.BusinessListingId, a.IconId, a.LastModified, a.Keywords);f.SetDisplayOrder(a.GetDisplayOrder());f.SetZoomLevel(a.GetZoomLevel());var d = a.GetBoundingBox();if (d) {f.SetBoundingBox(d.z1, d.z2, d.x1, d.y1, d.x2, d.y2);}return f;}

function y(a, b) {if (typeof b == "undefined" || b == null) {var c = h.GetSelectedCollection();c.AddEntityAnnotation(a);} else {b.AddEntityAnnotation(a);}if (typeof mvcViewFacade != "undefined" && typeof mvcViewFacade.OnEntityRepaint == "function") {mvcViewFacade.OnEntityRepaint(a);}}

function w(a) {if (typeof a != "undefined" && a.GetPrimitiveCount() > 0) {var c = a.GetPrimitiveCount();if (c < 1) {return null;}for (var b = 0; b < c; b++) {x(a.GetPrimitive(b), a);}}return a;}

function x(b, a) {a.DeletePrimitive(b.iid);if (a.GetPrimitiveCount() == 0) {r(a);a = null;}return a;}

function l(a) {if (typeof a == "undefined" && a == null) {return null;}a.ClearAllPrimitives();}

function O(b) {var a = b.split(MC_IID_CON_TOKEN);if (!a || a[0] != MC_IID_NAMESPACE) {return null;}a[1] = a[0] + MC_IID_CON_TOKEN + a[1];a[2] = a[1] + MC_IID_CON_TOKEN + a[2];a[3] = a[2] + MC_IID_CON_TOKEN + a[3];return a;}

function z(j) {if (a.length < 1) {return null;}var b = j.split(MC_IID_CON_TOKEN);if (b[0] != MC_IID_NAMESPACE) {return null;}b[1] = b[0] + MC_IID_CON_TOKEN + b[1];b[2] = b[1] + MC_IID_CON_TOKEN + b[2];b[3] = b[2] + MC_IID_CON_TOKEN + b[3];var c = null, f = null, e = null;for (var h = 0; h < a.length; h++) {c = a[h];if (c.iid == b[1]) {var k = null;for (var d = 0; d < c.Annotations.length; d++) {if (c.Annotations[d].GetId() == b[2]) {f = c.Annotations[d];for (var i = 0; i < c.Annotations[d].GetPrimitiveCount(); i++) {e = c.Annotations[d].GetPrimitive(i);if (e.iid == b[3]) {var g = [];g[0] = c;g[1] = f;g[2] = e;return g;}e = null;}f = null;}}}}if (c == null || f == null || e == null) {return null;}}
this.GetCollectionListDiv = E;this.Init = u;this.IsCollectionExist = K;this.GetCollectionIndexByMsnId = o;this.GetAnnotationByMsnId = C;this.GetSelectedCollection = i;this.GetCollection = R;this.RetrieveCollection = I;this.RetrieveCollectionById = A;this.CreateNewCollection = F;this.SaveCollection = Q;this.GetCollectionCount = H;this.GetSelectedCollectionAnnotationCount = v;this.GetCollectionByIndex = p;this.GetCollectionByMsnId = D;this.RemoveCollection = M;this.EmptyCollection = f;this.GetAnnotationById = J;this.GetCollectionByAnId = G;this.DeleteAnnotationById = B;this.SwapAnnotations = P;this.DeleteAnnotation = r;this.DeleteAnnotationFromCollection = n;this.CloneAnnotationById = q;this.CloneAnnotation = s;this.AddAnnotationToCollection = y;this.DeleteAllPrimitivesFromAnnotation = w;this.ParseInternalID = O;this.GetEntityPrimitiveById = z;this.CloneCollection = N;this.AddCollection = k;this.DeleteAll = t;this.SetVisibility = S;this.Dispose = T;};
VE_CollectionActions = function () {};
VE_CollectionActions.Create = "CreateCollection";
VE_CollectionActions.Update = "UpdateCollection";
VE_CollectionActions.RetrieveAll = "RetrieveAllCollections";
VE_CollectionActions.RetrieveDetails = "RetrieveCollectionDetails";
VE_CollectionActions.Delete = "DeleteCollection";
VE_CollectionActions.DeleteAll = "DeleteAllCollections";
VE_CollectionActions.DeleteAllAnnotations = "DeleteAllAnnotations";
VE_AnnotationActions = function () {};
VE_AnnotationActions.Create = "CreateAnnotation";
VE_AnnotationActions.Delete = "DeleteAnnotation";
VE_AnnotationActions.Update = "UpdateAnnotation";
VE_AnnotationActions.RetrieveAll = "RetrieveAllAnnotations";
VE_AnnotationState = function () {};
VE_AnnotationState.None = "None";
VE_AnnotationState.Added = "Added";
VE_AnnotationState.Updated = "Updated";
VE_AnnotationState.Deleted = "Deleted";
VE_CollectionsManagerConstants = function () {};
VE_CollectionsManagerConstants.Handler = "UserCollections.aspx?action=";
VE_CollectionsManagerConstants.Market = "mkt=";
VE_CollectionsManagerConstants.Random = "rand=";
VE_CollectionsManagerConstants.A_Id = "aid";
VE_CollectionsManagerConstants.A_Title = "atitle";
VE_CollectionsManagerConstants.A_Latitude = "alatitude";
VE_CollectionsManagerConstants.A_Longitude = "alongitude";
VE_CollectionsManagerConstants.A_Notes = "anotes";
VE_CollectionsManagerConstants.A_Keywords = "akeywords";
VE_CollectionsManagerConstants.A_IconId = "aiconid";
VE_CollectionsManagerConstants.A_InfoUrl = "aurl";
VE_CollectionsManagerConstants.A_PhotoUrl = "aphotourl";
VE_CollectionsManagerConstants.A_UserDate = "auserdate";
VE_CollectionsManagerConstants.A_DisplayOrder = "adisplayorder";
VE_CollectionsManagerConstants.A_BusinessId = "abusinesslistingid";
VE_CollectionsManagerConstants.A_CreationId = "acreationid";
VE_CollectionsManagerConstants.A_State = "astate";
VE_CollectionsManagerConstants.C_Id = "cid";
VE_CollectionsManagerConstants.C_Name = "cname";
VE_CollectionsManagerConstants.C_IsPublic = "cispublic";
VE_CollectionsManagerConstants.C_Length = "cannotationcount";
VE_CollectionsManagerConstants.C_Keywords = "ckeywords";
VE_CollectionsManagerConstants.ViewerDefaultTitle = L_CollectionManagerViewerDefaultTitle_Text;
VE_CollectionsManagerConstants.MinimizedTimerDelay = 1;
VE_CollectionsManagerConstants.TimerDelay = 2000;
VE_CollectionsManagerConstants.ExtendedTimerDelay = 5000;
VE_CollectionsManagerConstants.MAX_COLLECTION_SIZE = 200;
VE_CollectionsManagerConstants.HELP_FILE_PATH = "/cPublicPrivate.htm";
VEShapeLayer = function () {this._mapGuid = null;this.Name = "";this.MsnId = "";this.IsPublic = false;this.IsIndexed = false;this.DateCreated = Date();this.DateModified = Date();this.Tags = "";this.Notes = "";this.Annotations = [];this.Dirty = false;this.ViewableByOwnerOnly = false;this.EditableByOwner = true;this.OwnerIsViewing = false;this.iid = MC_IID_NAMESPACE + MC_IID_CON_TOKEN + Msn.Drawing.GetGeoUID(MC_GEO_TYPE_COL);this._index = 0;this.GetShapeCount = function () {if (this.Annotations) {return this.Annotations.length;} else {return 0;}};this.ClearAnnotations = function () {while (this.Annotations.length) {var a = this.Annotations.pop();a = null;}};this.AddAnnotation = function (a, b) {if (a && this.Annotations) {if (typeof b == "number" && b >= 0 && b < this.Annotations.length) {this.Annotations.splice(b, 0, a);return this.Annotations.length;} else {a.SetIndex(this.Annotations.length);a.SetDisplayOrder(this.Annotations.length);return this.Annotations.push(a);}}};this.RetrieveAnnotationById = function (b) {if (this.Annotations.length > 0 && b) {var a = 0;while (a < this.Annotations.length) {if (b == this.Annotations[a].Id) {return a;}a++;}}return null;};this.ResetOrder = function () {if (this.Annotations && this.Annotations != "" && this.Annotations != "undefined" && this.Annotations.length > 0) {for (var a = 0; a < this.Annotations.length; a++) {if (this.Annotations[a] instanceof VEShape) {this.Annotations[a].DisplayOrder = a;this.Annotations[a].Delta = 0;}}this.Dirty = false;}};this.ReOrder = function () {this.Annotations.sort(this.sortByIndex);this.Dirty = false;};this.sortByIndex = function (a, b) {if (a instanceof VEShape && b instanceof VEShape) {a.DisplayOrder = a.DisplayOrder + a.Delta;b.DisplayOrder = b.DisplayOrder + b.Delta;a.Delta = 0;b.Delta = 0;return a.DisplayOrder - b.DisplayOrder;}};};
VEShapeLayer.prototype = new Msn.VE.Core.VectorLayer;
VEShapeLayer.prototype.isEmptyOnServerSide = false;
VEShapeLayer.prototype.IsUpdateCollection = true;
VEShapeLayer.prototype.AddEntityAnnotation = function (a) {this.UpdateEntityAnnotation(a);this.AddAnnotation(a);};
VEShapeLayer.prototype.SetChangeState = function (a) {this.ChangeState = a;};
VEShapeLayer.prototype.GetChangeState = function () {if (typeof this.ChangeState == "undefined") {this.ChangeState = MC_CHANGE_STATE_DEFAULT;}return this.ChangeState;};
VEShapeLayer.prototype.SetChangeType = function (a) {this.ChangeType = a;};
VEShapeLayer.prototype.GetChangeType = function () {if (typeof this.ChangeType == "undefined") {this.ChangeType = MC_CHANGE_TYPE_ALL;}return this.ChangeType;};
VEShapeLayer.prototype.UpdateEntityAnnotation = function (c) {if (this.Annotations.length < 1) {this.SetBoundingBox(0, 0, Infinity, Infinity, - Infinity, - Infinity);}var d = true, a = this.GetBoundingBox(), b = null;b = c.GetBoundingBox();var e = a.x1 <= a.x2 && a.y1 <= a.y2, f = b.x1 <= b.x2 && b.y1 <= b.y2;if (e && f) {d = a.x1 < b.x1 && a.y1 < b.y1 && a.x2 > b.x2 && a.y2 > b.y2;}c.Update(true, this.iid);if (a) {if (d) {a.x1 = Math.min(b.x1, a.x1);a.y1 = Math.min(b.y1, a.y1);a.x2 = Math.max(b.x2, a.x2);a.y2 = Math.max(b.y2, a.y2);} else {a = this.UpdateBoundingBox();}} else {a = new Msn.VE.Bounds(0, 0, b.x1, b.y1, b.x2, b.y2);}this.SetBoundingBox(0, 0, a.x1, a.y1, a.x2, a.y2);a = null;return c;};
VEShapeLayer.prototype.UpdateBoundingBox = function () {var h = this.Annotations.length, g = null, a = null, b = Infinity, d = Infinity, c = - Infinity, e = - Infinity;for (var f = 0; f < h; f++) {g = this.Annotations[f];a = g.GetBoundingBox();b = Math.min(a.x1, b);d = Math.min(a.y1, d);c = Math.max(a.x2, c);e = Math.max(a.y2, e);}this.SetBoundingBox(0, 0, b, d, c, e);return this.GetBoundingBox();};
VEShapeLayer.prototype.IsDuplicate = function (b) {var i = this.Annotations.length, e = b.GetPrimitive(0);if (i < 1 || e == null) {return false;}var n = e.type, a = null, d = 0, c = 0, l = b.ToString(), m = b.GetId(), h = b.GetMsnId(), g = b.GetBusinessListingId();for (var f = 0; f < i; f++) {a = this.Annotations[f];primitive2 = a.GetPrimitive(0);if (primitive2 == null || e.type != primitive2.type) {continue;}d = a.GetMsnId();c = a.GetBusinessListingId();if (m != a.GetId()) {var k = h != 0 && d != 0 && h == d;if (k) {return true;}var j = g != 0 && c != 0 && g == c;if (j) {return true;}if (l == a.ToString()) {return true;}}d = 0;c = 0;}return false;};
VEShapeLayer.prototype.GetBoundingRectangle = function () {var a = this.GetBoundingBox();return new VELatLongRectangle(new VELatLong(a.y2, a.x1), new VELatLong(a.y1, a.x2));};
VEShapeLayer.prototype.GetShapeByIndex = function (a) {$VE_A.LogAPI("VE | APIs", "VEShapeLayer - GetShapeByIndex");var b = this.Annotations.length;if (typeof a != "number" && a > 0 && a < b - 1) {return null;}return this.Annotations[a];};
VEShapeLayer.prototype.GetShapeByID = function (b) {$VE_A.LogAPI("VE | APIs", "VEShapeLayer - GetShapeByID");var c = this.Annotations.length;for (var a = 0; a < c; a++) {if (this.Annotations[a].GetId() == b) {return this.Annotations[a];}}return null;};
VEShapeLayer.prototype.DeleteAllShapes = function () {if (this._mapGuid != null) {var b = GetVEMapInstance(this._mapGuid);if (b != null) {b.m_vegraphicsmanager.ClearLayerDom(this);}}var c = this.Annotations.length;for (var a = 0; a < c; a++) {this.Annotations[a]._shplayer = null;this.Annotations[a].Dispose();}this.Annotations = [];this.Boundingbox = new Msn.VE.Bounds(0, 0, Infinity, Infinity, - Infinity, - Infinity);$VE_A.LogAPI("VE | APIs", "VEShapeLayer - DeleteAllShapes");};
VEShapeLayer.prototype.SwapShapes = function (a, b) {var a = parseInt(a), b = parseInt(b);VEValidator.ValidateInt(a, "idx1");VEValidator.ValidateInt(b, "idx2");if (a == b) {return false;}var c = this.Annotations.length;VEValidator.ValidateBetween(a, "idx1", 0, c - 1);VEValidator.ValidateBetween(b, "idx2", 0, c - 1);var h = this.Annotations[a];this.Annotations[a] = this.Annotations[b];this.Annotations[b] = h;var d = this.Annotations[a].GetDisplayOrder(), e = this.Annotations[b].GetDisplayOrder();this.Annotations[a].SetDisplayOrder(e);this.Annotations[b].SetDisplayOrder(d);var f = this.Annotations[a].GetIndex(), g = this.Annotations[b].GetIndex();this.Annotations[a].SetIndex(g);this.Annotations[b].SetIndex(f);if (this.Annotations[a].GetVisibility()) {this.Annotations[a].Show();}if (this.Annotations[b].GetVisibility()) {this.Annotations[b].Show();}return true;};
VEShapeLayer.prototype.AddShape = function (a, b) {VEValidator.ValidateObject(a, "_veshape", VEShape, "VEShape");if (a._shplayer != null) {throw new VEException("AddShape", "err_invalidargument", L_ShpExist_text);}a._shplayer = this;this.UpdateEntityAnnotation(a);this.AddAnnotation(a, b);if (a.GetVisibility()) {a.Show();}$VE_A.LogAPI("VE | APIs", "VEShapeLayer - AddShape");};
VEShapeLayer.prototype.DeleteShape = function (b) {VEValidator.ValidateObject(b, "_veshape", VEShape, "VEShape");var d = this.Annotations.length;for (var a = 0; a < d; a++) {if (this.Annotations[a].GetId() == b.GetId()) {if (this._mapGuid != null) {var c = GetVEMapInstance(this._mapGuid);if (c != null) {c.m_vegraphicsmanager.ClearEntityDom(this.Annotations[a]);}}this.Annotations[a].Dispose();this.Annotations[a]._shplayer = null;this.Annotations.splice(a, 1);this.UpdateBoundingBox();break;}}$VE_A.LogAPI("VE | APIs", "VEShapeLayer - AddShape");};
VEShapeLayer.prototype.Show = function () {this.SetVisibility(true);if (this._mapGuid == null) {return null;}vmap = GetVEMapInstance(this._mapGuid);if (vmap == null) {return null;}vmap.m_vegraphicsmanager.DrawLayer(this);};
VEShapeLayer.prototype.Hide = function () {this.SetVisibility(false);if (this._mapGuid == null) {return null;}vmap = GetVEMapInstance(this._mapGuid);if (vmap == null) {return null;}vmap.m_vegraphicsmanager.ClearLayerDom(this);};
VEShapeLayer.prototype.SetTitle = function (a) {if (typeof a != "undefined" && a != null) {this.Name = a.replace(/%0D%0A/g, "\r\n").replace(/%0A/g, "\n");}};
VEShapeLayer.prototype.GetTitle = function () {if (typeof this.Name == "undefined") {this.Name = "my collection";}return this.Name;};
VEShapeLayer.prototype.SetDescription = function (a) {if (typeof a != "undefined" && a != null) {this.Notes = a.replace(/%0D%0A/g, "\r\n").replace(/%0A/g, "\n");}};
VEShapeLayer.prototype.GetDescription = function () {if (typeof this.Notes == "undefined") {this.Notes = "";}return this.Notes;};
VEShapeLayer.prototype.SetMaxZoomLevel = function (a) {a = parseInt(a);if (isNaN(a) || a > 21 || a < 1) {throw new VEException("VEShapeLayer.SetMaxZoomLevel", "err_incorrectzoomlevel", L_Shp_IncorrectZoomLevel);} else if (a < this.MinScale) {throw new VEException("VEShapeLayer.SetMaxZoomLevel", "err_incorrectzoomlevel", L_Shp_IncorrectZoomLevel2);}this.MaxScale = a;if (this.GetVisibility()) {this.Show();}};
VEShapeLayer.prototype.GetMaxZoomLevel = function () {return this.MaxScale;};
VEShapeLayer.prototype.SetMinZoomLevel = function (a) {a = parseInt(a);if (isNaN(a) || a < 1 || a > 21) {throw new VEException("VEShapeLayer.SetMinZoomLevel", "err_incorrectzoomlevel", L_Shp_IncorrectZoomLevel);} else if (a > this.MaxScale) {throw new VEException("VEShapeLayer.SetMinZoomLevel", "err_incorrectzoomlevel", L_Shp_IncorrectZoomLevel2);}this.MinScale = a;if (this.GetVisibility()) {this.Show();}};
VEShapeLayer.prototype.GetMinZoomLevel = function () {return this.MinScale;};

function VEShape(b, a) {
    this.Id = 0;
    this.Title = L_AnnotationConfDefaultTitle_Text;
    this.Latitude = 0;
    this.Longitude = 0;
    this.Notes = "";
    this.Keywords = "";
    this.Url = "";
    this.PhotoUrl = "";
    this.UserDate = new Date;
    this.DisplayOrder = 0;
    this.BusinessListingId = 0;
    this.IconId = 0;
    this.LastModified = new Date;
    this._cacheOfSerializationLength = 0;
    this.ShowDetailOnMouseOver = true;
    this.OnMouseOverCallback = null;
    this._customIcon = null;
    this._IconContent = null;
    this._eroContent = null;
    this._shplayer = null;
    this.IconUrl = null;
    if (typeof this._Construct == "function") {
        this._Construct(true, b, a);
    }
}

VEShape.prototype.GetCacheOfSerializationLength = function () {if (this._cacheOfSerializationLength <= 0) {var a = VE_CookieSerializer.SerializeAnnotation(this);if (a != null) {this._cacheOfSerializationLength = a.length;}}return this._cacheOfSerializationLength;};
VEShape.prototype.InvalidateCacheOfSerializationLength = function () {this._cacheOfSerializationLength = 0;};
VEShape.prototype.index = 0;
VEShape.prototype.SetIndex = function (a) {this.index = a;};
VEShape.prototype.GetIndex = function () {return this.index;};
VEShape.prototype.SetDisplayOrder = function (a) {this.DisplayOrder = a;};
VEShape.prototype.GetDisplayOrder = function () {return this.DisplayOrder;};
VEShape.prototype.SetProperties = function (b, i, j, e, f, h, l, k, c, g, d, a) {if (b) {this.Id = b;}this.Title = i.replace(/%0D%0A/g, "\r\n").replace(/%0A/g, "\n");this.Notes = h.replace(/%0D%0A/g, "\r\n").replace(/%0A/g, "\n");if (a != null && a.length > 0 && a[0] != null) {this.Keywords = a;this.Keywords[0] = this.Keywords[0].replace(/%0D%0A/g, "\r\n").replace(/%0A/g, "\n");} else {this.Keywords = a;}this.Url = j;this.PhotoUrl = e;this.UserDate = f;this.BusinessListingId = c;this.IconId = g;this.LastModified = d;};
VEShape.prototype.symbolUrl = "samplesymbol";
VEShape.prototype.GetMsnId = function () {return this.Id;};
VEShape.prototype.SetMsnId = function (a) {this.Id = a;};
VEShape.prototype.SetBoundingBox = function (f, e, c, d, a, b) {if (typeof this.Boundingbox == "undefined" || this.Boundingbox == null) {if (c == null || d == null || a == null || b == null) {return null;}this.Boundingbox = new Msn.VE.Bounds(f, e, c, d, a, b);} else {this.Boundingbox.x1 = c;this.Boundingbox.y1 = d;this.Boundingbox.z1 = f;this.Boundingbox.x2 = a;this.Boundingbox.y2 = b;this.Boundingbox.z2 = e;}return this.Boundingbox;};
VEShape.prototype.GetBoundingBox = function () {if (typeof this.Boundingbox == "undefined" || !this.Boundingbox) {this.Boundingbox = new Msn.VE.Bounds(0, 0, Infinity, Infinity, - Infinity, - Infinity);}return this.Boundingbox;};
VEShape.prototype.GetCenterPoint = function () {if (!this.GetBoundingBox()) {return;}var a = new Array(2);a[0] = (this.GetBoundingBox().x1 + this.GetBoundingBox().x2) / 2;a[1] = (this.GetBoundingBox().y1 + this.GetBoundingBox().y2) / 2;return a;};
VEShape.prototype.SetId = function (a) {this.iid = a;};
VEShape.prototype.GetId = function () {if (typeof this.iid == "undefined" || this.iid == 0 || this.iid == null) {this.iid = Msn.Drawing.GetGeoUID(MC_GEO_TYPE_ENTITY);}return this.iid;};
VEShape.prototype.SetVisibility = function (a) {this.Visibility = a;};
VEShape.prototype.GetVisibility = function () {if (typeof this.Visibility == "undefined" || typeof this.Visibility == "null") {this.Visibility = true;}return this.Visibility;};
VEShape.prototype.SetBusinessListingId = function (a) {if (typeof a == "undefined" || a == "null") {this.BusinessListingId = 0;} else {this.BusinessListingId = a;}};
VEShape.prototype.GetBusinessListingId = function () {if (typeof this.BusinessListingId == "undefined" || this.BusinessListingId == null || this.BusinessListingId == "null") {this.BusinessListingId = 0;}return this.BusinessListingId;};
VEShape.prototype.SetType = function (a) {this.Type = a;};
VEShape.prototype.GetType = function () {if (typeof this.Type == "undefined") {this.Type = "aN";}return this.Type;};
VEShape.prototype.SetSaveStatus = function (a) {this.SaveStatus = a;};
VEShape.prototype.IsSaved = function () {if (typeof this.SaveStatus == "undefined") {this.SaveStatus = true;}return this.SaveStatus;};
VEShape.prototype.SetOnScratchpad = function (a) {this.OnScratchpad = a;};
VEShape.prototype.IsOnScratchpad = function () {if (typeof this.OnScratchpad == "undefined") {this.OnScratchpad = true;}return this.OnScratchpad;};
VEShape.prototype.SetZoomLevel = function (a) {this.ZoomLevel = a;};
VEShape.prototype.GetZoomLevel = function () {if (typeof this.ZoomLevel == "undefined") {this.ZoomLevel = 12;}return this.ZoomLevel;};
VEShape.prototype.SetChangeState = function (a) {this.ChangeState = a;};
VEShape.prototype.GetChangeState = function () {if (typeof this.ChangeState == "undefined") {this.ChangeState = MC_CHANGE_STATE_DEFAULT;}return this.ChangeState;};
VEShape.prototype.SetChangeType = function (a) {this.ChangeType = a;};
VEShape.prototype.GetChangeType = function () {if (typeof this.ChangeType == "undefined") {this.ChangeType = MC_CHANGE_TYPE_ALL;}return this.ChangeType;};
VEShape.prototype.GetPrimitiveCount = function () {if (typeof this.Primitives == "undefined" || this.Primitives == null) {this.Primitives = [];return 0;}return this.Primitives.length;};
VEShape.prototype.SetPrimitives = function (a) {this.Primitives = a;this.SetType(a[0].type);};
VEShape.prototype.GetPrimitives = function () {if (typeof this.Primitives == "undefined" || this.Primitives == null) {this.Primitives = [];}return this.Primitives;};
VEShape.prototype.GetPrimitive = function (a) {if (typeof this.Primitives == "undefined" || this.Primitives == null || this.Primitives.length == 0) {this.Primitives = [];return null;}if (a < this.Primitives.length) {return this.Primitives[a];} else {return this.Primitives[0];}};
VEShape.prototype.AddPrimitive = function (a) {if (typeof this.Primitives == "undefined" || this.Primitives == null) {this.Primitives = [];}this.Primitives.push(a);this.SetType(a.type);};
VEShape.prototype.UpdateUI = function () {};
VEShape.prototype.DeletePrimitive = function (c) {if (typeof this.Primitives == "undefined" || this.Primitives == null) {this.Primitives = [];return null;}if (this.Primitives.length == 1) {this.Primitives[0].Destroy();this.Primitives.pop();this.Primitives = [];return null;}var b = null;for (var a = 0; a < this.Primitives.length; a++) {b = this.Primitives[a];if (b.iid == c) {this.Primitives[a].splice(a, 1);break;}}if (b) {b.Destroy();}};
VEShape.prototype.ClearAllPrimitives = function () {if (typeof this.Primitives == "undefined" || this.Primitives == null) {this.Primitives = [];return;}for (var a = 0; a < this.Primitives.length; a++) {this.Primitives[a].Destroy();}this.Primitives = [];};
VEShape.prototype.Update = function (j, h) {var b = false, l = this.GetId().split(MC_IID_CON_TOKEN);if (l[0] == MC_IID_NAMESPACE) {b = true;} else {b = false;if (!h) {return false;}var k = h.split(MC_IID_CON_TOKEN);if (k[0] != MC_IID_NAMESPACE) {return false;}}var m = this.Primitives.length, a = null, d = Infinity, f = Infinity, e = - Infinity, g = - Infinity;for (var i = 0; i < m; i++) {a = this.Primitives[i];if (a.type != VEShapeType.Pushpin) {if (!b || j || a.minX == null || a.minY == null || a.maxX == null || a.maxY == null) {var c = Msn.Drawing.ComputeBoundingBox(a.points);if (c) {a.minX = c[0];a.minY = c[1];a.maxX = c[2];a.maxY = c[3];}}d = Math.min(a.minX, d);f = Math.min(a.minY, f);e = Math.max(a.maxX, e);g = Math.max(a.maxY, g);Msn.Drawing.CalculateLabelPosition(a);this.Longitude = a.labelPosX;this.Latitude = a.labelPosY;} else {d = Math.min(a.points[0], d);f = Math.min(a.points[1], f);e = Math.max(a.points[0], e);g = Math.max(a.points[1], g);this.Longitude = a.points[0];this.Latitude = a.points[1];}if (!b) {a.iid = h + MC_IID_CON_TOKEN + this.GetId() + MC_IID_CON_TOKEN + a.iid;}a.title = this.Title;if (a.shape != null) {a.shape.id = a.iid;}}this.SetBoundingBox(0, 0, d, f, e, g);if (!b) {this.SetId(h + MC_IID_CON_TOKEN + this.GetId());}this.guid = this.GetId();return this.GetBoundingBox();};
VEShape.prototype.Dispose = function () {this.ClearAllPrimitives();this.Boundingbox = null;this._customIcon = null;this._IconContent = null;this._eroContent = null;this._shplayer = null;this.IconUrl = null;this.Id = null;this.Title = null;this.Latitude = null;this.Longitude = null;this.Notes = null;this.Keywords = null;this.Url = null;this.PhotoUrl = null;this.UserDate = null;this.DisplayOrder = null;this.BusinessListingId = null;this.IconId = null;this.LastModified = null;};
VEShape.prototype.ToString = function () {var a = "<e>", f = this.Primitives.length, d = null;for (var e = 0; e < f; e++) {d = this.Primitives[e];if (d.type == VEShapeType.Pushpin) {a = a.concat("<coords>", d.points.join(","), "</coords>");}}var b = "<a>", c = "</a>";a = a.concat("<as>");a = a.concat(b, this.GetBusinessListingId(), c, b, this.Url, c, b, this.PhotoUrl, c, b, this.Title, c, b, this.Type, c);a = a.concat("</as>");a = a.concat("</e>");return a;};
VEShape.prototype._Construct = function (f, e, c) {var b = true, a = [];try {if (typeof e != "undefined") {if (e == MC_VESHAPE_EMPTY && f) {this.maxZoomLevel = 21;this.minZoomLevel = 1;this._eroContent = null;this._shplayer = null;return;}} else {b = false;}if (b && typeof c == "object") {if (typeof c.length == "number") {var i = c.length;for (var g = 0; g < i; g++) {a.push(c[g].Longitude);a.push(c[g].Latitude);}} else if (typeof c.Longitude == "number") {a.push(c.Longitude);a.push(c.Latitude);} else {b = false;}} else {b = false;}if (b) {var d = null, h = a.length;if (e == VEShapeType.Pushpin) {if (f) {d = new Msn.Drawing.Point(a[0], a[1]);}} else if (e == VEShapeType.Polyline) {if (h < 3) {throw new VEException("VEShape", "err_incorrectpoints", L_Shp_IncorrectPoints);}if (f) {d = new Msn.Drawing.PolyLine(a);}} else if (e == VEShapeType.Polygon) {if (h < 5) {throw new VEException("VEShape", "err_incorrectpoints", L_Shp_IncorrectPoints);}if (a[0] != a[h - 2] || a[1] != a[h - 1]) {a.push(a[0]);a.push(a[1]);}if (f) {d = new Msn.Drawing.Polygon(a);}} else {b = false;}if (b) {if (f) {this.maxZoomLevel = 21;this.minZoomLevel = 1;this._eroContent = null;this._shplayer = null;if (typeof VE_MapDispatch_SymbolLib != "undefined") {if (e == VEShapeType.Pushpin) {d.symbol = VE_MapDispatch_SymbolLib.GetMapSymbolByID(MC_PROPERTY_PUSHPIN);} else {d.symbol = VE_MapDispatch_SymbolLib.GetCurrentDefaultSymbol();}d.symbol.imagedata_src = Msn.VE.API.Constants.iconurl;this.AddPrimitive(d);} else {b = false;}} else {this.Primitives[0].points = a;}}}if (!b) {throw new VEException("VEShape:new VEShape", "err_notinitialized", L_shp_Notinitialized_text);}} catch (j) {throw j;}};
VEShape.prototype.GetShapeType = function () {return this.Primitives[0].type;};
VEShape.prototype.GetShapeLayer = function () {return this._shplayer;};
VEShape.prototype.GetID = function () {if (this._shplayer == null) {return null;}return this.GetId();};
VEShape.prototype.Show = function () {this.SetVisibility(true);if (this._shplayer == null || this._shplayer._mapGuid == null) {return;}vmap = GetVEMapInstance(this._shplayer._mapGuid);if (vmap == null) {return;}var a = vmap.vemapcontrol.GetZoomLevel();if (a > this.maxZoomLevel || a < this.minZoomLevel) {vmap.m_vegraphicsmanager.ClearEntityDom(this);return;}if (this._shplayer.GetVisibility()) {vmap.m_vegraphicsmanager.ClearEntityDom(this);vmap.m_vegraphicsmanager.DrawEntity(this);}};
VEShape.prototype.Hide = function () {this.SetVisibility(false);if (this._shplayer == null || this._shplayer._mapGuid == null) {return;}vmap = GetVEMapInstance(this._shplayer._mapGuid);if (vmap == null) {return;}vmap.m_vegraphicsmanager.ClearEntityDom(this);};
VEShape.prototype.SetIconVisibility = function (a) {if (this.Primitives[0].type != VEShapeType.Pushpin) {this.Primitives[0].isLabel = a;}};
VEShape.prototype.HideIcon = function () {if (this.Primitives[0].type != VEShapeType.Pushpin) {this.Primitives[0].isLabel = false;}if (this._shplayer == null || this._shplayer._mapGuid == null) {return;}if (this.GetVisibility()) {this.Show();}};
VEShape.prototype.ShowIcon = function () {if (this.Primitives[0].type != VEShapeType.Pushpin) {this.Primitives[0].isLabel = true;}if (this._shplayer == null || this._shplayer._mapGuid == null) {return;}if (this.GetVisibility()) {this.Show();}};
VEShape.prototype.GetIconVisibility = function () {if (this.Primitives[0].type != VEShapeType.Pushpin) {return this.Primitives[0].isLabel;} else {return true;}};
VEShape.prototype.GetPoints = function () {var c = [], a = this.Primitives[0].points, d = a.length;if (this.Primitives[0].type == VEShapeType.Pushpin) {return [new VELatLong(a[1], a[0])];} else {for (var b = 0; b < d - 1; b = b + 2) {c.push(new VELatLong(a[b + 1], a[b]));}}return c;};
VEShape.prototype.SetPoints = function (b) {this._Construct(false, this.Primitives[0].type, b);if (this._shplayer != null) {this._shplayer.UpdateEntityAnnotation(this);}var a = this.Primitives[0];Msn.Drawing.CalculateLabelPosition(a, true);if (this.Primitives[0].type != VEShapeType.Pushpin) {this.Latitude = a.labelPosY;this.Longitude = a.labelPosX;}if (this.GetVisibility()) {this.Show();}};
VEShape.prototype.SetTitle = function (a) {if (typeof a != "undefined" && a != null) {this.Title = a.replace(/%0D%0A/g, "\r\n").replace(/%0A/g, "\n");}};
VEShape.prototype.GetTitle = function () {if (typeof this.Title == "undefined") {this.Title = L_AnnotationConfDefaultTitle_Text;}return this.Title;};
VEShape.prototype.SetDescription = function (a) {if (typeof a != "undefined" && a != null) {this.Notes = a.replace(/%0D%0A/g, "\r\n").replace(/%0A/g, "\n");}};
VEShape.prototype.GetDescription = function () {if (typeof this.Notes == "undefined") {this.Notes = "";}return this.Notes;};
VEShape.prototype.SetMaxZoomLevel = function (a) {a = parseInt(a);if (isNaN(a) || a > 21) {throw new VEException("VEShape.SetMaxZoomLevel", "err_incorrectzoomlevel", L_Shp_IncorrectZoomLevel);} else if (a < this.minZoomLevel) {throw new VEException("VEShape.SetMaxZoomLevel", "err_incorrectzoomlevel", L_Shp_IncorrectZoomLevel2);}this.maxZoomLevel = a;if (this.GetVisibility()) {this.Show();}};
VEShape.prototype.GetMaxZoomLevel = function () {return this.maxZoomLevel;};
VEShape.prototype.SetMinZoomLevel = function (a) {a = parseInt(a);if (isNaN(a) || a < 1) {throw new VEException("VEShape.SetMinZoomLevel", "err_incorrectzoomlevel", L_Shp_IncorrectZoomLevel);} else if (a > this.maxZoomLevel) {throw new VEException("VEShape.SetMinZoomLevel", "err_incorrectzoomlevel", L_invalidminmaxzoom_text);}this.minZoomLevel = a;if (this.GetVisibility()) {this.Show();}};
VEShape.prototype.GetMinZoomLevel = function () {return this.minZoomLevel;};
VEShape.prototype.GetCustomIcon = function () {var a = null, b = this.Primitives[0].symbol;if (typeof b == "object" && b.isOn == true) {a = new VECustomIconSpecification;a.Image = b.imagedata_src;a.TextBold = b.textbox_bold;a.TextItalics = b.textbox_italic;a.TextUnderline = b.textbox_underscore;a.TextFont = b.textbox_font;a.TextSize = b.textbox_size;a.TextOffset = new VEPixel(b.textbox_OffsetX, b.textbox_OffsetY);a.ImageOffset = new VEPixel(b.img_offsetX, b.img_offsetY);a.CustomHTML = this._customIcon;a.TextContent = this.Primitives[0].name;a.ImageWidth = b.img_width;a.ImageHeight = b.img_height;var e = new VEHexStringToColor, d = b.textbox_color;if (d.indexOf("#") == 0) {d = d.substring(1);}a.ForeColor = e.Convert(d);a.ForeColor.A = b.textbox_color_opacity;var c = b.textbox_backcolor;if (c.indexOf("#") == 0) {c = c.substring(1);}a.BackColor = e.Convert(c);a.BackColor.A = b.textbox_backcolor_opacity;} else {a = this._customIcon;}return a;};
VEShape.prototype.SetCustomIcon = function (b) {if (typeof b == "undefined" || b == null) {return null;}if (typeof b == "object") {VEValidator.ValidateObject(b, "_content_", VECustomIconSpecification, "VECustomIconSpecification");if (typeof b.TextContent == "string" && b.TextContent != null) {this.Primitives[0].name = b.TextContent;}var a = this.Primitives[0].symbol;if (a.id == MC_PROPERTY_PARK || a.id == MC_PROPERTY_PUSHPIN) {a = a.Clone();}if (typeof b.Image == "string" && b.Image != null) {a.imagedata_src = GetImageFullUrl(b.Image);} else {a.imagedata_src = Msn.VE.API.Constants.iconurl;}var e = b.ForeColor;if (typeof e == "object" && e != null) {VEValidator.ValidateObject(e, "fC", VEColor, "VEColor");a.textbox_color = VEColorToHexString(e.R, e.G, e.B, e.A);a.textbox_color_opacity = e.A;}var d = b.BackColor;if (typeof d == "object" && d != null) {VEValidator.ValidateObject(d, "bC", VEColor, "VEColor");a.textbox_backcolor = VEColorToHexString(d.R, d.G, d.B, d.A);a.textbox_backcolor_opacity = d.A;}var g = b.TextOffset;if (typeof g == "object" && g != null) {VEValidator.ValidateObject(g, "tO", VEPixel, "VEPixel");a.textbox_OffsetX = b.TextOffset.x;a.textbox_OffsetY = b.TextOffset.y;}var f = b.ImageOffset;if (typeof f == "object" && f != null) {VEValidator.ValidateObject(f, "iO", VEPixel, "VEPixel");a.img_offsetX = f.x;a.img_offsetY = f.y;}if (b.TextBold) {a.textbox_bold = true;}if (b.TextItalics) {a.textbox_italic = true;}if (b.TextUnderline) {a.textbox_underscore = true;}var k = parseInt(b.ImageWidth);if (!isNaN(k)) {a.img_width = k;}var j = parseInt(b.ImageHeight);if (!isNaN(j)) {a.img_height = j;}a.textbox_font = b.TextFont;a.imagedata_on = true;var h = parseInt(b.TextSize);if (!isNaN(h)) {a.textbox_size = h;}a.isOn = true;this.Primitives[0].symbol = a;if (b.CustomHTML != null) {this._customIcon = b.CustomHTML;} else if (this.Primitives[0].name) {var c = [];c.push("<div style='position:relative'>");c.push(" <div style='position:absolute;left:" + a.textbox_OffsetX + "px;top:" + a.textbox_OffsetY + "px;");c.push("font-size:" + a.textbox_size + "pt;font-family:" + a.textbox_font + ";");c.push("color:" + a.textbox_color + ";");if (a.textbox_italic) {c.push("font-style:italic;");}if (a.textbox_bold) {c.push("font-weight:bold;");}if (a.textbox_underscore) {c.push("text-decoration:underline;");}c.push("'>");if (this.Primitives[0].name) {c.push(this.Primitives[0].name);}c.push("</div>");c.push(" <img style='position:relative;top:" + a.img_offsetY + ";left:" + a.img_offsetX + "' src='" + a.imagedata_src + "'' ");var i = Msn.VE.Environment.BrowserInfo;if (i.Type == Msn.VE.BrowserType.MSIE && parseFloat(i.MajorVersion) < 7 && a.imagedata_src != null && a.imagedata_src.search(/.gif$/) < 0) {c.push(" onload='this.onload=\"\";if(this.fileSize!=-1){this.style.width=this.width;this.style.height=this.height;this.src=\"" + Msn.VE.API.Constants.spacerurl + "\";this.style.filter=\"progid:DXImageTransform.Microsoft.AlphaImageLoader(src=\\\"" + a.imagedata_src + "\\\", sizingMethod=\\\"scale\\\")\";}' />");} else {c.push("/>");}c.push("</div>");this._customIcon = c.join("");} else {this._customIcon = a.imagedata_src;}} else if (typeof b == "string") {this._customIcon = b;if (b.indexOf("<") < 0) {var a = this.Primitives[0].symbol;if (a.id == MC_PROPERTY_PARK || a.id == MC_PROPERTY_PUSHPIN) {a = a.Clone();}a.imagedata_src = GetImageFullUrl(b);a.isOn = true;this.Primitives[0].symbol = a;}}this._IconContent = null;if (this.GetVisibility()) {this.Show();}};
VEShape.prototype.GetIconAnchor = function () {return new VELatLong(this.Latitude, this.Longitude);};
VEShape.prototype.SetIconAnchor = function (a) {if (a != null && a != "undefined") {VEValidator.ValidateObject(a, "veLatlong", VELatLong, "VELatLong");var b = this.Primitives[0];if (b.type != VEShapeType.Pushpin) {this.Latitude = a.Latitude;this.Longitude = a.Longitude;b.labelPosX = this.Longitude;b.labelPosY = this.Latitude;}}if (this.GetVisibility()) {this.Show();}};
VEShape.prototype.GetCustomInfoBox = function () {return this._eroContent;};
VEShape.prototype.SetCustomInfoBox = function (a) {if (typeof a != "undefined" && a != null) {this._eroContent = a.replace(/%0D%0A/g, "\r\n").replace(/%0A/g, "\n");}};
VEShape.prototype.SetZIndex = function (c) {VEValidator.ValidateInt(c, "z");VEValidator.ValidateBetween(c, "z", 0, 65526);var a = this.Primitives[0].symbol;if (a.id == MC_PROPERTY_PARK || a.id == MC_PROPERTY_PUSHPIN) {a = a.Clone();}var b = 0;b = parseInt(c);if (b > 0) {a.style_zIndex = b;this.Primitives[0].symbol = a;}if (this.GetVisibility()) {this.Show();}};
VEShape.prototype.GetZIndex = function () {return this.Primitives[0].symbol.style_zIndex;};
VEShape.prototype.SetLineColor = function (a) {if (this.Primitives[0].type == VEShapeType.Pushpin) {return false;}if (typeof a == "object" && a != null) {VEValidator.ValidateObject(a, "_color", VEColor, "VEColor");var b = this.Primitives[0].symbol;if (b.id == MC_PROPERTY_PARK || b.id == MC_PROPERTY_PUSHPIN) {b = b.Clone();}b.stroke_color = VEColorToHexString(a.R, a.G, a.B, a.A);b.stroke_opacity = a.A;this.Primitives[0].symbol = b;if (this.GetVisibility()) {this.Show();}} else if (typeof a != "undefined") {throw new VEException("SetLineColor", "err_invalidargument", L_invalidargument_text.replace("%1", "color").replace("%2", "VEColor"));}};
VEShape.prototype.GetLineColor = function () {if (this.Primitives[0].type == VEShapeType.Pushpin) {return null;}var c = this.Primitives[0].symbol, e = new VEHexStringToColor, a = c.stroke_color;if (a.indexOf("#") == 0) {a = a.substring(1);}var b = e.Convert(a), d = c.stroke_opacity.toString();if (d.indexOf("%") > 0) {b.A = parseInt(d) / 100;} else {b.A = c.stroke_opacity;}return b;};
VEShape.prototype.SetFillColor = function (a) {if (this.Primitives[0].type == VEShapeType.Pushpin) {return false;}if (typeof a == "object" && a != null) {VEValidator.ValidateObject(a, "_color", VEColor, "VEColor");var b = this.Primitives[0].symbol;if (b.id == MC_PROPERTY_PARK || b.id == MC_PROPERTY_PUSHPIN) {b = b.Clone();}b.fill_color = VEColorToHexString(a.R, a.G, a.B, a.A);b.fill_opacity = a.A;this.Primitives[0].symbol = b;if (this.GetVisibility()) {this.Show();}} else if (typeof a != "undefined") {throw new VEException("SetFillColor", "err_invalidargument", L_invalidargument_text.replace("%1", "color").replace("%2", "VEColor"));}};
VEShape.prototype.GetFillColor = function () {if (this.Primitives[0].type == VEShapeType.Pushpin) {return null;}var c = this.Primitives[0].symbol, e = new VEHexStringToColor, a = c.fill_color;if (a.indexOf("#") == 0) {a = a.substring(1);}var b = e.Convert(a), d = c.fill_opacity.toString();if (d.indexOf("%") > 0) {b.A = parseInt(d) / 100;} else {b.A = c.fill_opacity;}return b;};
VEShape.prototype.SetLineWidth = function (c) {if (this.Primitives[0].type == VEShapeType.Pushpin) {throw new VEException("VEShape.SetLineWidth", "err_invalidlinewidth", L_Shp_IncorrectLineWidth);}var b = parseInt(c);if (isNaN(b) || b < 1) {throw new VEException("VEShape.SetLineWidth", "err_invalidlinewidth", L_Shp_IncorrectLineWidth);}var a = this.Primitives[0].symbol;if (a.id == MC_PROPERTY_PARK || a.id == MC_PROPERTY_PUSHPIN) {a = a.Clone();}a.stroke_weight = b;this.Primitives[0].symbol = a;if (this.GetVisibility()) {this.Show();}};
VEShape.prototype.GetLineWidth = function () {if (this.Primitives[0].type == VEShapeType.Pushpin) {return null;}var a = parseInt(this.Primitives[0].symbol.stroke_weight);if (isNaN(a)) {return 0;} else {return a;}};
VEShape.prototype.SetPhotoURL = function (a) {this.PhotoUrl = a;};
VEShape.prototype.GetPhotoURL = function () {return this.PhotoUrl;};
VEShape.prototype.SetMoreInfoURL = function (a) {this.Url = a;};
VEShape.prototype.GetMoreInfoURL = function () {return this.Url;};
VEShape.prototype.SetElevation = function (a) {if (typeof this.altitude == "undefined") {this.altitude = 0;}a = parseInt(a);if (isNaN(a)) {return;}this.altitude = a;if (this.GetVisibility()) {this.Show();}};
VEShape.prototype.GetElevation = function () {if (typeof this.altitude == "undefined") {return null;}return this.altitude;};
VEShapeLayer.prototype.GetBoundingRectangle = function () {var a = this.GetBoundingBox();return new VELatLongRectangle(new VELatLong(a.y2, a.x1), new VELatLong(a.y1, a.x2));};

function VECustomIconSpecification() {
    this.Image = null;
    this.TextContent = null;
    this.CustomHTML = null;
    this.textFont = "Arial";
    this.TextBold = false;
    this.TextItalics = false;
    this.TextUnderline = false;
    this.TextSize = 7;
    this.ImageOffset = null;
    this.TextOffset = null;
    this.ForeColor = null;
    this.BackColor = null;
    this.ImageWidth = -1;
    this.ImageHeight = -1;
}

VE_SetModuleStatus(VE_ModuleName.APILAYERS, "loaded");
VEMap.prototype.InitMapDrawing = function () {cssCursors = Msn.VE.Css.Cursors;if (VE_MapDispatch_SymbolLib == null) {VE_MapDispatch_SymbolLib = new VEShapeStyleLibrary;VEShapeStyle.prototype.imagedata_src = Msn.VE.API.Constants.iconurl;}if (this.m_velayermanager == null) {this.m_velayermanager = new VELayerManager(this);this._lm = this.m_velayermanager;}};
VEMap.prototype.InitTiles = function () {if (!this.m_vetilesourcemanager) {this.m_vetilesourcemanager = new VETileSourceManager(this);}};
VEMap.prototype.AddTileLayer = function (a, b, c) {VEMap.ValidateState();VEValidator.ValidateObject(a, "tileSourceSpec", VETileSourceSpecification, "VETileSourceSpecification");this.m_vetilesourcemanager.AddTileSource(a, c, b);$VE_A.LogAPI("VE | APIs", "VEMap - AddLayer");VEMap.ValidateState();};
VEMap.prototype.ShowTileLayer = function (a) {VEMap.ValidateState();this.m_vetilesourcemanager.ShowTileLayer(a);$VE_A.LogAPI("VE | APIs", "VEMap - ShowTileLayer");};
VEMap.prototype.ShowAllTileLayers = function () {VEMap.ValidateState();this.m_vetilesourcemanager.ShowAllTileLayers();$VE_A.LogAPI("VE | APIs", "VEMap - ShowAllTileLayers");};
VEMap.prototype.HideTileLayer = function (a) {VEMap.ValidateState();this.m_vetilesourcemanager.HideTileLayer(a);$VE_A.LogAPI("VE | APIs", "VEMap - HideTileLayer");};
VEMap.prototype.HideAllTileLayers = function () {VEMap.ValidateState();this.m_vetilesourcemanager.HideAllTileLayers();$VE_A.LogAPI("VE | APIs", "VEMap - HideAllTileLayers");};
VEMap.prototype.DeleteTileLayer = function (a) {VEMap.ValidateState();this.m_vetilesourcemanager.DeleteSourceById(a);$VE_A.LogAPI("VE | APIs", "VEMap - DeleteSource");};
VEMap.prototype.DeleteAllTileLayers = function () {VEMap.ValidateState();this.m_vetilesourcemanager.DeleteAllSources();$VE_A.LogAPI("VE | APIs", "VEMap - DeleteAllLayers");};

function VETileSourceSpecification(h, i, d, g, f, e, c, a, b) {
    this.ID = null;
    this.TileSource = null;
    this.NumServers = 1;
    this.Bounds = null;
    this.MinZoomLevel = 0;
    this.MaxZoomLevel = 1;
    this.GetTilePath = null;
    this.Opacity = null;
    this.ZIndex = null;
    this.SetsBestMapView = true;
    this.FnCallback = null;
    this.IsVisible = true;
    if (typeof h == "string") {
        this.ID = h;
    } else {
        throw new VEException("VETileSourceSpecification", "err_invalidargument", L_invalidargument_text.replace("%1", "ID").replace("%2", "string"));
    }
    if (typeof i == "string") {
        this.TileSource = i.replace(/%20/g, " ");
    } else {
        throw new VEException("VETileSourceSpecification", "err_invalidargument", L_invalidargument_text.replace("%1", "tileSource").replace("%2", "string"));
    }
    if (d != "undefined" && d != null) {
        this.NumServers = d;
    }
    if (g != "undefined" && g != null) {
        this.Bounds = g;
    }
    if (f != "undefined" && f != null) {
        this.MinZoomLevel = f;
    }
    if (e != "undefined" && e != null) {
        this.MaxZoomLevel = e;
    }
    if (c != "undefined" && c != null) {
        this.GetTilePath = c;
    }
    if (a != "undefined" && a != null) {
        VEValidator.ValidateFloat(a, "Opacity");
        if (a < 0 || a > 1) {
            throw new VEException("VEMap:AddTileLayer", "err_invalidOpacity", L_invalidopacity_text);
        }
        this.Opacity = a;
    }
    if (b != "undefined" && b != null) {
        VEValidator.ValidateInt(b, "ZIndex");
        this.ZIndex = b;
    }
}


function VETileSourceManager(a) {
    var b = this;
    VEValidator.ValidateNonNull(a, "vemap");
    this.m_vemap = a;
    this.m_vemapcontrol = this.m_vemap.vemapcontrol;
    this.m_vetilesources = [];
    this.AddTileSource = function (a, c, b) {VEValidator.ValidateObject(a, "tileSourceSpec", VETileSourceSpecification, "VETileSourceSpecification");VEValidator.ValidateNonNull(a.ID, "tileSourceSpec.ID");if (a.MinZoomLevel != null) {VEValidator.ValidateInt(a.MinZoomLevel, "tileSourceSpec.MinZoomLevel");}if (a.MaxZoomLevel != null) {VEValidator.ValidateInt(a.MaxZoomLevel, "tileSourceSpec.MaxZoomLevel");VEValidator.ValidateMaxZoom(a.MaxZoomLevel, "tileSourceSpec.MaxZoomLevel");}if (a.MinZoomLevel != null && a.MaxZoomLevel != null) {if (a.MinZoomLevel > a.MaxZoomLevel) {throw new VEException("VETileSourceManager:AddVETileSource", "err_invalidsourceid", L_invalidminmaxzoom_text);}}if (typeof c == "function") {a.FnCallback = c;}if (typeof b != "undefined" && (b == "false" || !b)) {a.IsVisible = false;}this.AddVETileSourceSpec(a);};
    this.AddVETileSourceSpec = function (b) {VEMap.ValidateState();try {var c = this.GetSourceById(b.ID);if (c != null && c != "undefined") {throw new VEException("VETileSourceManager:AddVETileSource", "err_invalidsourceid", L_invalidsourceid_text);}this.m_vetilesources.push(b);a.vemapcontrol.SetTileSource(b);if (b.IsVisible) {a.vemapcontrol.LoadTileLayer(b.ID, b.ID, b.Opacity, b.ZIndex);}if (b.FnCallback) {FnCallback(b);}} catch (d) {throw d;}};
    this.GetSourceById = function (c) {var b = this.m_vetilesources.length;for (var a = 0; a < b; ++a) {if (this.m_vetilesources[a].ID == c) {return this.m_vetilesources[a];}}return null;};
    this.ShowTileLayer = function (c) {try {if (this.m_vetilesources == null || this.m_vetilesources == "undefined") {throw new VEException("VEMap:RemoveSourcebyId", "err_GraphicsInitError", L_GraphicsInitError_Text);return;}var b = this.GetSourceById(c);if (b) {b.IsVisible = true;a.vemapcontrol.SetTileLayerVisibility(b.ID, true);a.vemapcontrol.LoadTileLayer(b.ID, b.ID, b.Opacity, b.ZIndex);} else {throw new VEException("VEMap:HideSourcebyId", "err_invalidsourceid", L_invalidsourceid_text);return;}} catch (d) {throw d;return;}};
    this.ShowAllTileLayers = function () {try {if (this.m_vetilesources == null || this.m_vetilesources == "undefined") {throw new VEException("VEMap:HideAllTileLayersbyId", "err_GraphicsInitError", L_GraphicsInitError_Text);return;}var b = this.m_vetilesources.length;for (var a = 0; a < b; ++a) {this.ShowTileLayer(this.m_vetilesources[a].ID);}} catch (c) {throw c;return;}};
    this.HideAllTileLayers = function () {try {if (this.m_vetilesources == null || this.m_vetilesources == "undefined") {throw new VEException("VEMap:HideAllTileLayersbyId", "err_GraphicsInitError", L_GraphicsInitError_Text);return;}var b = this.m_vetilesources.length;for (var a = 0; a < b; ++a) {this.HideTileLayer(this.m_vetilesources[a].ID);}} catch (c) {throw c;return;}};
    this.HideTileLayer = function (c) {try {if (this.m_vetilesources == null || this.m_vetilesources == "undefined") {throw new VEException("VEMap:RemoveSourcebyId", "err_GraphicsInitError", L_GraphicsInitError_Text);return;}var b = this.GetSourceById(c);if (b) {b.IsVisible = false;a.vemapcontrol.SetTileLayerVisibility(b.ID, false);a.vemapcontrol.LoadTileLayer(b.ID, b.ID, b.Opacity, b.ZIndex);} else {throw new VEException("VEMap:HideSourcebyId", "err_invalidsourceid", L_invalidsourceid_text);return;}} catch (d) {throw d;return;}};
    this.DeleteSourceById = function (b) {try {if (this.m_vetilesources == null || this.m_vetilesources == "undefined") {throw new VEException("VEMap:RemoveSourcebyId", "err_GraphicsInitError", L_GraphicsInitError_Text);return;}var c = this.m_vetilesources.length, a = 0;while (a < c && b != this.m_vetilesources[a].ID) {a++;}if (a < c) {this.m_vemapcontrol.ClearTileLayer(b);this.m_vemapcontrol.DeleteTileSource(b);this.m_vetilesources[a] = null;this.m_vetilesources.splice(a, 1);} else {throw new VEException("VEMap:RemoveSourcebyId", "err_invalidsourceid", L_invalidsourceid_text);return;}} catch (d) {throw d;return;}};
    this.Dispose = function () {this.DeleteAllSources();this.m_vetilesources = null;this.m_vemapcontrol = null;this.m_vemap = null;};
    this.DeleteAllSources = function () {try {if (this.m_vetilesources == null || this.m_vetilesources == "undefined") {throw new VEException("VEMap:RemoveSourcebyId", "err_GraphicsInitError", L_GraphicsInitError_Text);return;}var b = this.m_vetilesources.length;for (var a = 0; a < b; ++a) {if (this.m_vetilesources[a]) {this.m_vemapcontrol.ClearTileLayer(this.m_vetilesources[a].ID);this.m_vemapcontrol.DeleteTileSource(this.m_vetilesources[a].ID);this.m_vetilesources[a] = null;}}this.m_vetilesources = [];} catch (c) {throw c;return;}};
}

VE_SetModuleStatus(VE_ModuleName.APITILES, "loaded");
VEMap.prototype.InitSearch = function () {if (!this.m_vesearchmanager) {this.m_vesearchmanager = new VE_SearchManager(this);this.m_vesearchmanager.Initialize();this._sm = this.m_vesearchmanager;}};
VEMap.prototype.Find = function (l, j, i, f, g, b, e, d, a, c, h) {VEMap.ValidateState();this.InitSearch();var k = new VEFindSpec(l, j, i, f, g, b, e, d, a, c, h);this.m_vesearchmanager.Find(k);$VE_A.LogAPI("VE | APIs", "VEMap - Find");};
VEMap.prototype.CreateFindControl = function (b) {VEMap.ValidateState();VEValidator.ValidateNonNull(b, "findControlId");el = document.createElement("div");el.className = "VE_FindControl";el.id = b;el.style.zIndex = 199;el.style.position = "absolute";el.style.padding = "5px";
function a(a) {a = a ? a : window.event;a.cancelBubble = true;a.returnValue = false;return false;}
el.attachEvent("onmousedown", a);el.attachEvent("onmouseup", a);el.attachEvent("onmousemove", a);el.attachEvent("onmousewheel", a);el.attachEvent("ondblclick", a);el.attachEvent("oncontextmenu", a);el.attachEvent("onclick", a);var c = this.ID + "_vewhatinputcontainer", e = this.ID + "_vewhatinput", d = this.ID + "_vewhereinput";el.innerHTML = "<div class=VE_WhatControl id='" + c + "'>" + L_what_text + " " + "<input id=\"" + e + "\" type=\"text\" name=\"vewhatinput\" size=\"25\" onfocus=\"this.select()\" onblur=\"this.value = this.value\" />" + "</div>" + "<div class=VE_WhereControl>" + L_where_text + " " + "<input id=\"" + d + "\" type=\"text\" name=\"vewhereinput\" size=\"25\" style=\"color: #333333\"" + "ondrop=\"this.value='';this.style.color='black';SelectText(this,0,0);\" />" + "</div>" + "<div class=VE_FindButton>" + "<button id=\"searchbttn\" onclick=\"VEMap._GetMapFromGUID(" + this.GUID + ")._DoFind();\" type=\"submit\" name=\"submit\" value=\"Local Search\">" + L_find_text + "</button>" + "</div>";this.mapelement.appendChild(el);addIFrameShim(el);$VE_A.LogAPI("VE | APIs", "VEMap - CreateFindControl");return el;};
VEMap.prototype.ShowFindControl = function (c, b) {VEMap.ValidateState();if (typeof c != "undefined" || typeof b != "undefined") {VEValidator.ValidateInt(c, "top");VEValidator.ValidateInt(b, "left");}var d = this.ID + "_vefindcontrolinput", a = $ID(d);if (typeof a == "undefined" || a == null) {a = this.CreateFindControl(d);}if (isNaN(c)) {a.style.top = "5px";} else {a.style.top = c + "px";}if (isNaN(b)) {a.style.left = "195px";} else {a.style.left = b + "px";}a.style.display = "block";ShowShim(a);$VE_A.LogAPI("VE | APIs", "VEMap - ShowFindControl");};
VEMap.prototype.HideFindControl = function () {VEMap.ValidateState();var a = $ID(this.ID + "_vefindcontrolinput");if (a != null && a != "undefined") {a.style.display = "none";HideShim(a);}$VE_A.LogAPI("VE | APIs", "VEMap - HideFindControl");};
VEMap.prototype.SetFindResultsPanel = function (a) {VEMap.ValidateState();if (a == null || a == "undefined") {throw new VEException("VEMap:SetFindResultsPanel", "err_invalidelement", L_invalidelement_text);}var b = $ID(a);if (b == null || b == "undefined") {throw new VEException("VEMap:SetFindResultsPanel", "err_invalidelement", L_invalidelement_text);}this.searchelement = a;};

function VEPlace(c, b, a, d) {
    VEValidator.ValidateNonNull(c, "name");
    VEValidator.ValidateNonNull(b, "velatLong");
    this.Name = c;
    this.LatLong = b;
    if (typeof a != "undefined" && a != null) {
        this.LatLongRect = a;
    } else {
        this.LatLongRect = null;
    }
    this.Score = d;
}


function VEFindSpec(k, a, j, g, h, b, f, e, c, d, i) {
    this.What = "";
    if (k != null) {
        if (typeof k != "string") {
            throw new VEException("VEMap.Find", "err_invalidargument", L_invalidargument_text.replace("%1", "what").replace("%2", "string"));
        }
        this.What = k.replace(/#/g, "%23");
    }
    this.Where = "";
    this.WhereRect = null;
    this.WherePlace = null;
    this.WhereLatLong = null;
    if (a != null) {
        if (VELatLongRectangle.prototype.isPrototypeOf(a)) {
            this.WhereRect = a;
        } else if (VEPlace.prototype.isPrototypeOf(a)) {
            this.WhereLatLong = a.LatLong;
            this.WhereRect = a.LatLongRect;
            this.WherePlace = a;
        } else if (VELatLong.prototype.isPrototypeOf(a)) {
            this.WhereLatLong = a;
        } else if (typeof a == "string") {
            this.Where = a.replace(/#/g, "%23");
        } else {
            throw new VEException("VEMap.Find", "err_invalidargument", L_invalidwhere_text);
        }
        if (this.WhereLatLong && !this.WhereRect) {
            this.WhereRect = new VELatLongRectangle(new VELatLong(this.WhereLatLong.Latitude + 1, this.WhereLatLong.Longitude - 1), new VELatLong(this.WhereLatLong.Latitude - 1, this.WhereLatLong.Longitude + 1));
        } else {
            this.WhereLatLong = null;
        }
    }
    if (this.What == "" && this.Where == "") {
        throw new VEException("VEMap.Find", "err_invalidwhatwhere", L_invalidwhatwhere_text);
    }
    this.FindType = VEFindType.Businesses;
    if (j != null) {
        if (j == VEFindType.Businesses) {
            this.FindType = j;
        } else {
            throw new VEException("VEMap.Find", "err_invalidargument", L_invalidargument_text.replace("%1", "findType").replace("%2", "VEFindType"));
        }
    }
    this.ShapeLayer = null;
    if (g != null) {
        VEValidator.ValidateObject(g, "shapeLayer", VEShapeLayer, "VEShapeLayer");
        this.ShapeLayer = g;
    }
    this.StartIndex = 0;
    if (h != null) {
        VEValidator.ValidateNonNegativeInt(h, "startIndex");
        this.StartIndex = parseInt(h);
    }
    this.NumberOfResults = Msn.VE.API.Globals.vefindnumresultsdefault;
    if (b != null) {
        VEValidator.ValidateInt(b);
        b = parseInt(b);
        VEValidator.ValidateBetween(b, "numberOfResults", Msn.VE.API.Globals.vefindnumresultsmin, Msn.VE.API.Globals.vefindnumresultsmax);
        this.NumberOfResults = b;
    }
    this.ShowResults = true;
    if (f != null) {
        VEValidator.ValidateBoolean(f, "showResults");
        this.ShowResults = f;
    }
    this.CreateResults = true;
    if (e != null) {
        VEValidator.ValidateBoolean(e, "createResults");
        this.CreateResults = e;
    }
    this.UseDefaultDisambiguation = true;
    if (c != null) {
        VEValidator.ValidateBoolean(c, "useDefaultDisambiguation");
        this.UseDefaultDisambiguation = c;
    }
    this.SetBestMapView = true;
    if (d != null) {
        VEValidator.ValidateBoolean(d, "setBestMapView");
        this.SetBestMapView = d;
    }
    this.Callback = null;
    if (i != null) {
        if (typeof i == "function") {
            this.Callback = i;
        } else {
            throw new VEException("VEMap.Find", "err_invalidargument", L_invalidargument_text.replace("%1", "callback").replace("%2", "function"));
        }
    }
}


function VEFindResults(a, c, b) {
    this.ShapeLayer = a;
    this.Results = c;
    this.HasMore = b;
}


function VEFindResult(c, g, d, a, e, b, f) {
    VEValidator.ValidateNonNull(c, "findType");
    VEValidator.ValidateNonNull(d, "name");
    VEValidator.ValidateNonNull(a, "description");
    VEValidator.ValidateNonNull(b, "isSponsored");
    this.findType = c;
    this.shape = g;
    this.Name = d;
    this.Description = a;
    this.LatLong = e;
    this.IsSponsored = b;
    this.Phone = f;
}

VEFindType = new (function () {this.Businesses = "YellowPageSearch";});

function VE_SearchManager(h) {
    VEValidator.ValidateObject(h, "vemap", VEMap, "VEMap");
    this.m_vemap = h;
    var c = new VELatLongFactory(new VELatLongFactorySpecFromMap(this.m_vemap));
    this.m_showDisambigousDialog = true;
    this._DisambiguateCallback = "VEMap._GetMapFromGUID(" + h.GUID + ")._sm.FindAmbiguousListCallBack";
    var g = new VELatLongDecoder, j = 1, a = null, d = true, f = null, i = null, e = null, b = null;
    this.Initialize = function () {};
    this.Find = function (c) {var k = [];if (this.m_vemap.HasClientToken()) {k.push(new VEParameter(Msn.VE.API.Constants.clienttoken, this.m_vemap.ClientToken));}k.push(new VEParameter(Msn.VE.API.Constants.market, Msn.VE.API.Globals.locale));k.push(new VEParameter(Msn.VE.API.Constants.mapguid, this.m_vemap.GUID));var s = c.What;if (s.length > 0) {s += " -location:jp";}k.push(new VEParameter("a", s));k.push(new VEParameter("b", c.Where));k.push(new VEParameter("t", c.FindType));if (!c.SetBestMapView) {k.push(new VEParameter("smv", c.SetBestMapView));}var l = 0, m = 0, n = 0, o = 0;if (c.WhereRect) {var r = g.Decode(c.WhereRect.TopLeftLatLong), q = g.Decode(c.WhereRect.BottomRightLatLong);l = r.Latitude;m = q.Longitude;n = q.Latitude;o = r.Longitude;} else {var p = this.m_vemap.GetMapView();if (p && p.TopLeftLatLong && p.BottomRightLatLong) {var r = g.Decode(p.TopLeftLatLong), q = g.Decode(p.BottomRightLatLong);l = r.Latitude;m = q.Longitude;n = q.Latitude;o = r.Longitude;} else {return;}}if (l < n) {var v = l;l = n;n = v;}if (m < o) {var v = m;m = o;o = v;}k.push(new VEParameter("c", l));k.push(new VEParameter("d", m));k.push(new VEParameter("e", n));k.push(new VEParameter("ff", o));if (c.What.length > 0) {k.push(new VEParameter("g", c.StartIndex));k.push(new VEParameter("dc", c.NumberOfResults));var w = j++;k.push(new VEParameter("i", w));var x = 2;k.push(new VEParameter("r", x));}d = true;if (c.ShapeLayer == null) {c.ShapeLayer = h.GetShapeLayerByIndex(0);}f = null;i = null;e = null;b = null;a = c;if (c.What == "" && c.WhereLatLong != null) {var t = [];t.push(c.WhereLatLong);this.m_vemap.SetMapView(t);this.FireFindCallback();} else {var u = new VENetwork;u.ServiceUrl = Msn.VE.API.Constants.searchservice;u.BeginInvoke(null, k, null);}};
    this._HandleFailedWhereSearch = function (a) {VEMap.ValidateState();if (a != null) {b = a.replace(/%1/g, MapControl.Features.PlatformName);this.FireFindCallback();}};
    this._ApplyResults = function (s, h, g, r, n) {VEMap.ValidateState();if (Msn.VE.API.Globals.veiscommercialcontrol) {} else {var k = [], m = new Array, q = a.ShapeLayer;if (h != null) {for (var d = 0; d < h.length; d++) {var e = null, p = c.CreateVELatLong(h[d].latitude, h[d].longitude);if (a.CreateResults) {e = new VEShape(VEShapeType.Pushpin, p);e.SetTitle(h[d].name);e.SetDescription(h[d].description);if (!a.ShowResults) {e.SetVisibility(false);}q.AddShape(e);m.push(e);}var o = new VEFindResult(a.FindType, e, h[d].name, h[d].description, p, false, h[d].phone);k.push(o);}}if (g != null) {for (var d = 0; d < g.length; d++) {var j = null;if (g[d].latitude != null && typeof g[d].latitude != "undefined" && g[d].longitude != null && typeof g[d].longitude != "undefined" && g[d].latitude >= -85 && g[d].latitude <= 85 && g[d].longitude >= -180 && g[d].longitude <= 180) {j = c.CreateVELatLong(g[d].latitude, g[d].longitude);}var e = null;if (j != null && a.CreateResults) {e = new VEShape(VEShapeType.Pushpin, j);e.SetTitle(h[d].name);e.SetDescription(h[d].description);if (!a.ShowResults) {e.SetVisibility(false);}q.AddShape(e);m.push(e);}var o = new VEFindResult(a.FindType, e, g[d].title, g[d].description, j, true);k.push(o);}}f = new VEFindResults(a.ShapeLayer, k, r);i = m;if (typeof n != "undefined" && !b && n != null) {b = n;}if (a.SetBestMapView && a.WhereLatLong) {var l = [];for (var d = 0; d < f.Results.length; d++) {if (f.Results[d].LatLong) {l.push(f.Results[d].LatLong);}}if (l.length > 0) {this.m_vemap.SetMapView(l);}}this.FireFindCallback();}};
    this.ApplySuggestion = function (c, a) {VEMap.ValidateState();var b = $ID("vewhatinput");if (b) {b.value = a;}this.Find(a, this.m_vemap.lastwheresearch, null, "VEMap._GetMapFromGUID(" + this.m_vemap.GUID + ")._Disambiguate", 1);};
    this.CreateAdElement = function (a) {VEMap.ValidateState();if (a == null) {return null;}var b = document.createElement("div");b.id = "veadresults_" + a.id;b.className = "VE_AdResult";var c = document.createElement("a");c.className = "VE_AdResult_Title";c.innerHTML = a.title;c.href = a.url;b.appendChild(c);var d = document.createElement("div");d.className = "VE_AdResult_Description";d.innerHTML = a.description;b.appendChild(d);return b;};
    this.UpdateAmbiguousList = function (b) {VEMap.ValidateState();if (b != null && b.length > 0) {var g = [];for (var f = 0; f < b.length; f++) {var h = new VEPlace(b[f][0], c.CreateVELatLong(b[f][5], b[f][6]), new VELatLongRectangle(c.CreateVELatLong(b[f][1], b[f][2]), c.CreateVELatLong(b[f][3], b[f][4])));g.push(h);}e = g;if (a.UseDefaultDisambiguation) {d = false;this.m_vemap.m_veambiguouslist.Show(b, this._DisambiguateCallback, true);} else if (typeof this.m_vemap.DisambiguationCallback != "undefined" && this.m_vemap.DisambiguationCallback != null && typeof this.m_vemap.DisambiguationCallback == "function") {d = false;this.m_vemap.DisambiguationCallback(g);}}};
    this.FindAmbiguousListCallBack = function (o, h, k, j, l) {if (o == null) {d = true;this.FireFindCallback();} else {var n = $ID(this.m_vemap.ID + "_vewhereinput");if (n) {n.value = unescape(o);}if (a.SetBestMapView) {this.m_vemap.SetViewport(h, k, j, l);}var c = e, m = -1;if (c) {for (var b = 0; b < c.length; b++) {if (c[b].LatLongRect.TopLeftLatLong.Latitude == h && c[b].LatLongRect.TopLeftLatLong.Longitude == k && c[b].LatLongRect.BottomRightLatLong.Latitude == j && c[b].LatLongRect.BottomRightLatLong.Longitude == l) {m = b;if (a != null) {a.WherePlace = c[b];}break;}}}if (a.What.length > 0) {var c = e;if (m == 0) {d = true;this.FireFindCallback();} else {var p = a.ShapeLayer, f = i;if (f != null) {for (var b = 0; b < f.length; b++) {p.DeleteShape(f[b]);}}var g = a;g.Where = "";g.WhereRect = new VELatLongRectangle(new VELatLong(h, k), new VELatLong(j, l));this.Find(g);}} else {d = true;this.FireFindCallback();}}};
    this.FireFindCallback = function () {if (d) {if (typeof a.Callback != "undefined" && a.Callback != null) {var g = f, c = e;if (a.WherePlace != null) {c = [];c.push(a.WherePlace);}if (a.WhereLatLong) {c = [];c.push(new VEPlace("", a.WhereLatLong));}if (g) {var i = g.ShapeLayer, h = g.Results;if (!a.CreateResults) {i = null;}if (h.length == 0) {i = null;h = null;}a.Callback(i, h, c, g.HasMore, b);} else if (c && a.What.length == 0) {a.Callback(null, null, c, null, b);} else if (a.What.length == 0) {a.Callback(null, null, null, null, b);}} else if (typeof b != "undefined" && b != null && b.length != 0) {this.m_vemap.ShowMessage(b);}}};
    this.SearchCallback = function (b) {if (e == null) {var d = [];for (var a = 0; a < b.length; a++) {var f = new VEPlace(b[a][0], c.CreateVELatLong(b[a][1], b[a][2]), new VELatLongRectangle(c.CreateVELatLong(b[a][4], b[a][5]), c.CreateVELatLong(b[a][6], b[a][7])), b[a][3]);d.push(f);}e = d;}this.FireFindCallback();};
}

Msn.VE.Search = new Object;
Msn.VE.Search.strLastWhere = "";

function VE_SearchResult(r, p, g, o, n, q, k, i, m, b, j, l, d, a, f, e, h) {
    this.id = r;
    this.name = p;
    this.description = g;
    this.phone = o;
    this.rating = n;
    this.type = q;
    this.latitude = k;
    this.longitude = i;
    this.pushPin = null;
    this.pinId = null;
    this.keywords = j;
    this.infoUrl = m;
    this.photoUrl = typeof b != "undefined" ? b : "";
    this.country = l;
    var c = null;
    this.SetGeoRef = function (a) {c = a;};
    this.GetGeoRef = function () {return c;};
    this.insideBoundingBox = d;
    var a = a;
    this.GetDistanceFromCenter = function (b, c) {if (typeof a == "number" && Msn.VE.DistanceUnit.IsValidType(b)) {if (b == "mi") {if (a.toFixed) {return c ? a.toFixed(1) + L_DirectionsMi_Text : a.toFixed(1);}} else if (b == "km") {if (a.toFixed) {return c ? (a * 1.609344).toFixed(1) + L_DirectionsKm_Text : (a * 1.609344).toFixed(1);}}}};
    this.roofTopLatitude = f;
    this.roofTopLongitude = e;
    this.brandInfo = h;
}


function VE_WebSearchResult(h, g, i, j, k) {
    var c = a(h), d = a(g), e = a(i), b = a(j), f = a(k);
    this.GetCaptionUrl = function () {return c;};
    this.SetCaptionUrl = function (b) {c = a(b);};
    this.GetDescription = function () {return d;};
    this.SetDescription = function (b) {d = a(b);};
    this.GetDisplayUrl = function () {return e;};
    this.SetDisplayUrl = function (b) {e = a(b);};
    this.GetTitle = function () {return b;};
    this.SetTitle = function (c) {b = a(c);};
    this.GetUrl = function () {return f;};
    this.SetUrl = function (b) {f = a(b);};

    function a(a) {
        if (typeof a == "string" && a.length >= 0) {
            return a;
        }
        return null;
    }

}

VE_SearchResult.prototype.Equals = function (a) {if (a == null || a == "undefined") {return false;}try {var b = this.name == a.name && this.description == a.description && this.phone == a.phone && this.rating == a.rating && this.type == a.type && this.latitude == a.latitude && this.longitude == a.longitude;return b;} catch (c) {return false;}};
VE_WebSearchResult.prototype.Equals = function (a) {if (a instanceof VE_WebSearchResult) {var b = this.GetCaptionUrl() == a.GetCaptionUrl() && this.GetDescription() == a.GetDescription() && this.GetTitle() == a.GetTitle() && this.GetDisplayUrl() == a.GetDisplayUrl() && this.GetUrl() == a.GetUrl();return b;}return false;};
VE_SearchResult.prototype.GetSerializedId = function () {switch (this.type) {case "al":return "";case "adr":return "adr" + "." + this.name;case "aN":return VE_AnnotationData.SerializeAnnotation(this.pinId);default:return this.type + "." + this.id.toString();}};

function VE_SearchResultCategory(b, a) {
    this.id = b;
    this.name = a;
    this.IsValid = function () {return typeof parseInt(b) == "number" && typeof a == "string" && a.length > 0;};
    this.Destroy = function () {this.id = null;this.name = null;};
}

VE_SetModuleStatus(VE_ModuleName.APIFIND, "loaded");
VEMap.prototype.InitRouting = function () {if (!this.m_vedirectionsmanager) {this.m_vedirectionsmanager = new VEDirectionsManager(this);this.m_vedirectionsmanager.Initialize();this._dm = this.m_vedirectionsmanager;}};
VEMap.prototype.GetRoute = function (d, e, b, c, a) {VEMap.ValidateState();this.InitRouting();this.m_vedirectionsmanager.GetDrivingDirections(d, e, b, c, a);$VE_A.LogAPI("VE | APIs", "VEMap - GetRoute");};
VEMap.prototype.DeleteRoute = function () {VEMap.ValidateState();this.InitRouting();this.m_vedirectionsmanager.ClearRoute();$VE_A.LogAPI("VE | APIs", "VEMap - DeleteRoute");};
var L_cannotrenderroute_text = "The route could not be drawn because this web browser does not support SVG and VML.";
VEDistanceUnit = new (function () {this.Miles = "m";this.Kilometers = "k";});
VERouteType = new (function () {this.Shortest = "s";this.Quickest = "q";});

function VERoute(b, c, a) {
    VEValidator.ValidateObject(b, "startLocation", VERouteLocation, "VERouteLocation");
    VEValidator.ValidateObject(c, "endLocation", VERouteLocation, "VERouteLocation");
    VEValidator.ValidateObject(a, "veRouteItinerary", VERouteItinerary, "VERouteItinerary");
    this.StartLocation = b;
    this.EndLocation = c;
    this.Itinerary = a;
}


function VERouteLocation(b, a) {
    VEValidator.ValidateNonNull(b, "address");
    VEValidator.ValidateObject(a, "veLatLong", VELatLong, "VELatLong");
    this.Address = b;
    this.LatLong = a;
}


function VERouteItinerary(c, a, d, b) {
    this.Distance = c;
    this.DistanceUnit = a;
    this.Time = d;
    this.RouteType = b;
    this.Segments = [];
    this.AddSegment = function (a) {VEValidator.ValidateObject(a, "segment", VERouteSegment, "VERouteSegment");this.Segments.push(a);};
}


function VERouteSegment(b, c, a) {
    VEValidator.ValidateObject(a, "veLatLong", VELatLong, "VELatLong");
    this.Instruction = b;
    this.Distance = c;
    this.LatLong = a;
}


function VEDirectionsManager(vemap) {
    VEValidator.ValidateObject(vemap, "vemap", VEMap, "VEMap");
    this.m_vemap = vemap;
    var self = this;
    this.lastStartString = "";
    this.lastEndString = "";
    this.laststart = "";
    this.lastend = "";
    this.lastcallback = null;
    this.disambigwhat = "";
    this.veroutecache = [];
    var m_veLatLongFactory = new VELatLongFactory(new VELatLongFactorySpecFromMap(this.m_vemap)), m_veLatLongDecoder = new VELatLongDecoder;
    this.m_showDisambigousDialog = true;
    this.Initialize = function () {if (this.veroutecache == null || this.veroutecache == "undefined") {this.veroutecache = [];} else {this.RemoveRoutePins();}};
    this.GetDrivingDirections = function (b, c, e, f, l) {VEMap.ValidateState();this.ClearRoute();var h = "", i = "", j = "m", k = "q";try {if (b == null || b == "undefined" || b.length <= 0) {throw new VEException("VEDirectionsManager:GetDrivingDirections", "err_invaliddirections", L_invaliddirections_text);}if (c == null || c == "undefined" || c.length <= 0) {throw new VEException("VEDirectionsManager:GetDrivingDirections", "err_invaliddirections", L_invaliddirections_text);}if (e != null && e != "undefined") {this.lastdist = e;if (e == VEDistanceUnit.Kilometers) {j = "k";}} else {this.lastdist = VEDistanceUnit.Miles;}if (f != null && f != "undefined") {this.lasttype = f;if (f == VERouteType.Shortest) {k = "s";}} else {this.lastdist = VERouteType.Quickest;}var a = [];if (this.m_vemap.HasClientToken()) {a.push(new VEParameter(Msn.VE.API.Constants.clienttoken, this.m_vemap.ClientToken));}a.push(new VEParameter(Msn.VE.API.Constants.market, Msn.VE.API.Globals.locale));this.laststart = b;if (typeof b == "object") {var d = m_veLatLongDecoder.Decode(b);a.push(new VEParameter("startlat", d.Latitude));a.push(new VEParameter("startlon", d.Longitude));} else {h = b.replace(/#/g, "%23");a.push(new VEParameter("start", h));}this.lastend = c;if (typeof c == "object") {var d = m_veLatLongDecoder.Decode(c);a.push(new VEParameter("endlat", d.Latitude));a.push(new VEParameter("endlon", d.Longitude));} else {i = c.replace(/#/g, "%23");a.push(new VEParameter("end", i));}a.push(new VEParameter("units", j));a.push(new VEParameter("type", k));a.push(new VEParameter(Msn.VE.API.Constants.mapguid, this.m_vemap.GUID));this.vedirectionscallback = l;this.vedddisambiguatecallback = "VEMap._GetMapFromGUID(" + this.m_vemap.GUID + ")._dm.DisambiguateDirections";this.disambiguateDone = false;var g = new VENetwork;g.ServiceUrl = Msn.VE.API.Constants.directionsservice;g.BeginInvoke(null, a, null);} catch (m) {throw m;}};
    this.Populate = function (f, d, e, b, j, k, l, q, i, z, s, u, n, m) {try {if (d == null || b == null || j == null || k == null || l == null || q == null || i == null || s == null || u == null || n == null || m == null) {throw new VEException("VEDirectionsManager:GetDrivingDirections", "err_noroute", L_noroute_text);}if (f == null || f == "undefined" || f.length == 0) {f = this.lastStartString;}if (e == null || e == "undefined" || e.length == 0) {e = this.lastEndString;}var v = new VERouteLocation(f, m_veLatLongFactory.CreateVELatLong(d[0], d[1])), x = new VERouteLocation(e, m_veLatLongFactory.CreateVELatLong(b[0], b[1])), p = new Msn.VE.DirectionsDecoder;k = p.DecodeCoordinatesString(k);l = p.DecodeCoordinatesString(l);var o = i;if (i == null || i.length == 0) {o = "mi";}var h = new VERouteItinerary(q, o, s, z), w = new VERouteSegment(L_startat_text + " " + f, 0, m_veLatLongFactory.CreateVELatLong(d[0], d[1]));h.AddSegment(w);var r = true, c = null;if (j != null) {var t = j.length;for (var g = 0; g < t; g++) {var a = j[g], A = new VERouteSegment(a.name, a.distance, m_veLatLongFactory.CreateVELatLong(a.latitude, a.longitude));h.AddSegment(A);if (r) {c = new VEPushpin(VENetwork.GetExecutionID(), m_veLatLongFactory.CreateVELatLong(a.latitude, a.longitude), Msn.VE.API.Constants.vedirectionsstarticon, L_Start_Text, a.name);this.m_vemap.AddPushpin(c);this.veroutecache.push(c);r = false;} else {c = new VEPushpin(VENetwork.GetExecutionID(), m_veLatLongFactory.CreateVELatLong(a.latitude, a.longitude), Msn.VE.API.Constants.vedirectionsstepicon.replace("%1", g).replace("%2", t), L_DirectionsStep_Text + " " + g, a.name);this.m_vemap.AddPushpin(c);this.veroutecache.push(c);}}var y = new VERouteSegment(L_arriveat_text + " " + e, 0, m_veLatLongFactory.CreateVELatLong(b[0], b[1]));h.AddSegment(y);c = new VEPushpin(VENetwork.GetExecutionID(), m_veLatLongFactory.CreateVELatLong(b[0], b[1]), Msn.VE.API.Constants.vedirectionsendicon, L_End_Text, L_arriveat_text + " " + e);this.m_vemap.AddPushpin(c);this.veroutecache.push(c);this.m_vemap.vemapcontrol.SetViewport(d[0], d[1], b[0], b[1]);var B = new VERoute(v, x, h);}this.CreateRouteHighLight("veDDHighlight", k, l, n, m);if (this.vedirectionscallback != null && this.vedirectionscallback != "undefined") {this.vedirectionscallback(B);}} catch (C) {throw C;}};
    this.CreateRouteHighLight = function (h, f, g, e, a) {VEMap.ValidateState();if (this.verenderingdisabled) {this.ShowMessage(L_cannotrenderroute_text);return;}var b = 6, d = "#11DD11", c = 4;if (this.verouteHighlight != null) {this.RemoveRouteHighLight();}this.verouteHighlight = this.m_vemap.vemapcontrol.AddLine(h, f, g, b, d, c, e, a);};
    this.ClearRoute = function () {this.RemoveRoutePins();this.RemoveRouteHighLight();VEPushpin.Hide();this.m_vemap.m_veambiguouslist.Hide();};
    this.RemoveRoutePins = function () {try {VEMap.ValidateState();var b = null;if (this.veroutecache != null) {var c = this.veroutecache.length;for (var a = 0; a < c; a++) {b = this.veroutecache[a];if (b == null || b == "undefined") {continue;}this.m_vemap.DeletePushpin(b.ID);}for (var a = 0; a < c; a++) {this.veroutecache.pop();}}} catch (d) {}};
    this.RemoveRouteHighLight = function () {VEMap.ValidateState();if (this.verouteHighlight == null) {return;}this.m_vemap.vemapcontrol.RemoveLine(this.verouteHighlight.id);};
    this.ShowMessage = function (b, a) {this.m_vemap.ShowMessage(a);};
    this.ShowNotFoundMessage = function () {};
    this.HandleFailedGetDirections = function (a) {if (a != null && a != "undefined") {window.setTimeout("VEMap._GetMapFromGUID('" + this.m_vemap.GUID + "')._dm.ClearRoute()", 10);if (this.vedirectionscallback != null && this.vedirectionscallback != "undefined") {if (typeof this.vedirectionscallback == "function") {this.vedirectionscallback(null, a.replace(/%1/g, MapControl.Features.PlatformName));this.vedirectionscallback = "";}} else {this.m_vemap.ShowMessage(a.replace(/%1/g, MapControl.Features.PlatformName));}} else if (this.vedirectionscallback != null && this.vedirectionscallback != "undefined" && typeof this.vedirectionscallback == "function") {this.vedirectionscallback();this.vedirectionscallback = "";}};
    this.Disambiguate = function (a, b) {if (this.m_showDisambigousDialog) {if (!this.m_vemap.m_veambiguouslist.IsVisible()) {this.disambigwhat = a;this.m_vemap.m_veambiguouslist.Show(b, this.vedddisambiguatecallback);}} else if (!this.disambiguateDone) {this.disambiguateDone = true;try {this.disambigwhat = a;eval(this.vedddisambiguatecallback + "('" + b[0].name + "', " + b[0].latitude + ", " + b[0].longitude + ");");} catch (a) {}}};
    this.DisambiguateDirections = function (e, a, b) {var c = "", d = "";if (this.disambigwhat == "end") {c = this.laststart;this.lastEndString = e;if (a != null && a != "undefined" && b != null && b != "undefined") {d = m_veLatLongFactory.CreateVELatLong(a, b);} else {d = e;}} else {d = this.lastend;this.lastStartString = e;if (a != null && a != "undefined" && b != null && b != "undefined") {c = new VELatLong(a, b);} else {c = e;}}this.GetDrivingDirections(c, d, this.lastdist, this.lasttype, this.vedirectionscallback);};
}


function VE_Directions() {
}


function VE_RouteInstruction(d, c, a, b) {
    this.name = d;
    this.distance = b;
    this.latitude = c;
    this.longitude = a;
    this.permanentPin = false;
}


function VE_Location(c, b, a) {
    this.name = c;
    this.latitude = b;
    this.longitude = a;
}

VE_SetModuleStatus(VE_ModuleName.APIROUTING, "loaded");
VEMap.prototype.InitTraffic = function () {if (!this.m_vetrafficmanager) {this.m_vetrafficmanager = new VE_TrafficManager(this);}};
VEMap.prototype.LoadTraffic = function (c, b, a) {this.InitTraffic();VEMap.ValidateState();VE_TrafficManager.m_vemap = this;VE_TrafficManager.turnedOn = true;VE_TrafficManager.showTrafficFlow = c;VE_TrafficManager.showIncidents = b;VE_TrafficManager.showConstructionIncidents = a;VE_TrafficManager.markets = [];VE_TrafficManager.incidents = [];window.setTimeout(VE_TrafficManager.GetMarkets, 100);$VE_A.LogAPI("VE | APIs", "VEMap - LoadTraffic");};
VEMap.prototype.ClearTraffic = function () {VEMap.ValidateState();if (VE_TrafficManager.markets[0] != null) {VE_TrafficManager.ClearTraffic();}$VE_A.LogAPI("VE | APIs", "VEMap - ClearTraffic");};

function VE_TrafficManager(a) {
    VEValidator.ValidateObject(a, "vemap", VEMap, "VEMap");
}

VE_TrafficManager.m_vemap = null;
VE_TrafficManager.markets = [];
VE_TrafficManager.incidents = [];
VE_TrafficManager.incidentJSFiles = [];
VE_TrafficManager.showingMarkets = [];
VE_TrafficManager.showConstructionIncidents = false;
VE_TrafficManager.incidentsAvailable = false;
VE_TrafficManager.flowAvailable = false;
VE_TrafficManager.turnedOn = false;
VE_TrafficManager.showIncidents = false;
VE_TrafficManager.showTrafficFlow = false;
VE_TrafficManager.prevZoomLevel = 0;
VE_TrafficManager.prevMapStyle = "";
VE_TrafficManager.isViewDirty = false;
VE_TrafficManager.masterTimer = null;
VE_TrafficManager.slaveTimer = null;
VE_TrafficManager.Severity = {Serious:L_TrafficManagerSerious_Text, Moderate:L_TrafficManagerModerate_Text, Minor:L_TrafficManagerMinor_Text};
VE_TrafficManager.GetMarkets = function () {try {VENetwork.DownloadScript(VE_TrafficManager.m_vemap.vemapcontrol.GetMarketsFile(), VE_TrafficManager.GetTrafficInfo);} catch (a) {}};
VE_TrafficManager._ProcessMarkets = function (a) {if (VE_TrafficManager.markets[0] == null) {VE_TrafficManager.markets[0] = [];}if (a != null && a.length > 0) {var c = a.length;for (var b = 0; b < c; b++) {if (a[b] != null) {VE_TrafficManager.markets[0].push(a[b]);}}}};
VE_TrafficManager._GetIncidents = function (b) {VE_TrafficManager.showingMarkets = VE_TrafficManager._GetIncidentMarkets();if (b) {if (VE_TrafficManager.showingMarkets.length > 0) {VE_TrafficManager.incidentsAvailable = true;for (var a = 0; a < VE_TrafficManager.showingMarkets.length; a++) {try {var c = VENetwork.DownloadScript(VE_TrafficManager.m_vemap.vemapcontrol.GetIncidentsFile() + "-" + VE_TrafficManager.showingMarkets[a] + ".js", null);VE_TrafficManager.incidentJSFiles.push(c);} catch (d) {}}}}};
VE_TrafficManager._ProcessIncidents = function (a) {if (a == null || a.length <= 0) {return;}var b = a[0].MarketId;if (VE_TrafficManager.incidents[b] == null) {VE_TrafficManager.incidents[b] = [];} else {VE_TrafficManager._ClearPins(b);var d = VE_TrafficManager.incidents[b].length;for (var c = 0; c < d; c++) {VE_TrafficManager.incidents[b].pop();}}if (a != null && a.length > 0) {var d = a.length;for (var c = 0; c < d; c++) {if (a[c] != null) {VE_TrafficManager.incidents[b].push(a[c]);}}}VE_TrafficManager._DisplayIncidents();};
VE_TrafficManager._GetIncidentMarkets = function () {var b = [], h = VE_TrafficManager.m_vemap.vemapcontrol.PixelToLatLong(new VEPixel(0, 0)), g = VE_TrafficManager.m_vemap.vemapcontrol.PixelToLatLong(new VEPixel(VE_TrafficManager.m_vemap.GetWidth(), VE_TrafficManager.m_vemap.GetHeight()));if (h == null || g == null) {return b;}var c = h.latitude, d = g.longitude, e = g.latitude, f = h.longitude;if (c < e) {var i = c;c = e;e = i;}if (d < f) {var i = d;d = f;f = i;}if (VE_TrafficManager.markets.length == 0) {return b;}var k = new VELatLongRectangle(new VELatLong(c, f), new VELatLong(e, d)), l = VE_TrafficManager.markets[0].length;for (var a = 0; a < l; a++) {var j = new VELatLongRectangle(new VELatLong(VE_TrafficManager.markets[0][a].NELatitude, VE_TrafficManager.markets[0][a].SWLongitude), new VELatLong(VE_TrafficManager.markets[0][a].SWLatitude, VE_TrafficManager.markets[0][a].NELongitude));if (VE_TrafficManager._isBBOverlap(k, j)) {if (VE_TrafficManager.markets[0][a].Incident == "Incidents") {b.push(VE_TrafficManager.markets[0][a].Id);}if (VE_TrafficManager.markets[0][a].Flow == "Flow") {VE_TrafficManager.flowAvailable = true;}}}return b;};
VE_TrafficManager._isBBOverlap = function (b, a) {return VE_TrafficManager._IsRectInBoundingBox(b, a) || VE_TrafficManager._IsRectInBoundingBox(a, b);};
VE_TrafficManager._IsRectInBoundingBox = function (a, b) {return !(a.BottomRightLatLong.Latitude > b.TopLeftLatLong.Latitude || a.BottomRightLatLong.Longitude < b.TopLeftLatLong.Longitude || a.TopLeftLatLong.Latitude < b.BottomRightLatLong.Latitude || a.TopLeftLatLong.Longitude > b.BottomRightLatLong.Longitude);};
VE_TrafficManager.GetTrafficInfo = function () {if (!VE_TrafficManager.turnedOn) {return;}try {if (VE_TrafficManager.m_vemap.vemapcontrol.IsModeEnabled(Msn.VE.MapActionMode.Mode3D)) {if (VE_TrafficManager.showTrafficFlow) {VE_TrafficManager.m_vemap.vemapcontrol.Show3DTraffic(false);} else {VE_TrafficManager.m_vemap.vemapcontrol.Remove3DTraffic();}}var a = VE_TrafficManager.m_vemap.GetZoomLevel();if (VE_TrafficManager.m_vemap.GetMapStyle() == Msn.VE.MapStyle.Oblique) {return;}VE_TrafficManager.prevZoomLevel = a;VE_TrafficManager.prevMapStyle = VE_TrafficManager.m_vemap.GetMapStyle();VE_TrafficManager.incidentsAvailable = false;VE_TrafficManager.flowAvailable = false;VE_TrafficManager._ClearPins();VE_TrafficManager.m_vemap.vemapcontrol.HideTrafficLegend();if (a >= 9) {VE_TrafficManager._GetIncidents(VE_TrafficManager.showIncidents);if (VE_TrafficManager.showTrafficFlow && VE_TrafficManager.flowAvailable && a <= 15) {VE_TrafficManager.m_vemap.vemapcontrol.ClearTileLayer("Traffic");VE_TrafficManager.m_vemap.vemapcontrol.SetTrafficView();}}if (a < 9 || a > 15) {VE_TrafficManager.m_vemap.vemapcontrol.ShowTrafficLegend("");}VE_TrafficManager.RenewAutoRefresh();} catch (b) {} finally {}};
VE_TrafficManager._DisplayIncidents = function () {if (VE_TrafficManager.showingMarkets != null && VE_TrafficManager.showingMarkets.length > 0) {var d = VE_TrafficManager.showingMarkets.length;for (var b = 0; b < d; b++) {var a = VE_TrafficManager.showingMarkets[b];if (VE_TrafficManager.incidents[a] != null && VE_TrafficManager.incidents[a].length > 0) {VE_TrafficManager._RemoveDuplicates(a);VE_TrafficManager._RenderTrafficInfo(a);}}var c = "", a = VE_TrafficManager.showingMarkets[0];if (VE_TrafficManager.incidents[a] != null && VE_TrafficManager.incidents[a].length > 0) {c = VETime.FormatPanelTime(VE_TrafficManager.incidents[a][0].Timestamp, false);}VE_TrafficManager.m_vemap.vemapcontrol.ShowTrafficLegend(c);}};
VE_TrafficManager._RenderTrafficInfo = function (c) {if (c) {VE_TrafficManager._ClearPins(c);} else {VE_TrafficManager._ClearPins();}var e = VE_TrafficManager.m_vemap.GetZoomLevel();if (e > 8) {if (c == null) {return;}if (VE_TrafficManager.incidents[c] != null) {var b = VE_TrafficManager.incidents[c], f = VE_TrafficManager.incidents[c].length;for (var a = 0; a < f; a++) {if (b[a].Type != VE_TrafficIncidentType.Weather && b[a].Type != VE_TrafficIncidentType.MassTransit) {if (!VE_TrafficManager.showConstructionIncidents) {if (b[a].Type == VE_TrafficIncidentType.UnscheduledConstruction || b[a].Type == VE_TrafficIncidentType.ScheduledConstruction) {continue;}}if (VE_TrafficManager.flowAvailable && b[a].Type == VE_TrafficIncidentType.Congestion) {continue;}var d = new VEPushpin("pin_traffic_incident_" + c + "_" + b[a].Id, new VELatLong(b[a].Latitude, b[a].Longitude), Msn.VE.API.Constants.trafficiconurl.replace("%1", VE_TrafficManager.GetColor(b[a].Criticality)), "", VE_TrafficManager.CreatePopupContent(b[a]));b[a].pushPin = d;VE_TrafficManager.m_vemap.AddPushpin(d);}}}}};
VE_TrafficManager.GetColor = function (a) {switch (a) {case 0:return Msn.VE.UI.Color.Red;break;case 1:return Msn.VE.UI.Color.Orange;break;case 2:return Msn.VE.UI.Color.Yellow;break;default:return Msn.VE.UI.Color.Yellow;}};
VE_TrafficManager.CreatePopupContent = function (a) {var b = "<div class = \"traffictitle\">" + (a.Type ? IOSec.EncodeHtml(a.Type.replace(/&amp;/gi, "&")) : "") + "</div>" + "<div class = \"trafficheader\">" + L_TrafficPopupSeverity_Text + ":</div> " + "<div class = \"trafficdata\">" + VE_TrafficManager._GetSeverity(a.Criticality) + "</div>" + "<div class = \"trafficheader\">" + L_TrafficPopupLocation_Text + ":</div> " + "<div class = \"trafficdata\">" + (a.Location ? IOSec.EncodeHtml(a.Location.replace(/&amp;/gi, "&")) : "") + "</div>" + "<div class = \"trafficheader\">" + L_TrafficPopupDescription_Text + ":</div> " + "<div class = \"trafficdata\">" + (a.Description ? IOSec.EncodeHtml(a.Description.replace(/&amp;/gi, "&")) : "") + "</div>" + "<BR><div>" + "<div class = \"trafficlabel\">" + L_TrafficPopupStartTime_Text + ":</div>" + "<div class = \"trafficdata\">" + (a.Starttime ? IOSec.EncodeHtml(VETime.FormatTime(a.Starttime, true)) : "") + "</div>" + "</div>" + "<div>" + "<div class = \"trafficlabel\">" + L_TrafficPopupEstEndTime_Text + ":</div>" + "<div class = \"trafficdata\">" + (a.Endtime ? IOSec.EncodeHtml(VETime.FormatTime(a.Endtime, true)) : "") + "</div>" + "</div>";return b;};
VE_TrafficManager._GetSeverity = function (a) {switch (a) {case 0:return VE_TrafficManager.Severity.Serious;break;case 1:return VE_TrafficManager.Severity.Moderate;break;case 2:return VE_TrafficManager.Severity.Minor;break;default:return VE_TrafficManager.Severity.Minor;}};
VE_TrafficManager._RemoveDuplicates = function (c) {if (c == null || c == "undefined") {return;}var a = VE_TrafficManager.incidents[c];if (a == null) {return;}for (var b = 0; b < a.length; b++) {for (var d = b + 1; d < a.length; d++) {if (a[b].Id == a[d].Id) {a.splice(b, 1);}}}};
VE_TrafficManager.ClearTraffic = function () {VE_TrafficManager._ClearPins();if (VE_TrafficManager.m_vemap != null && VE_TrafficManager.m_vemap.vemapcontrol != null) {VE_TrafficManager.m_vemap.vemapcontrol.ClearTileLayer("Traffic");VE_TrafficManager.m_vemap.vemapcontrol.HideTrafficLegend();if (VE_TrafficManager.m_vemap.vemapcontrol.IsModeEnabled(Msn.VE.MapActionMode.Mode3D)) {VE_TrafficManager.m_vemap.vemapcontrol.Remove3DTraffic();}}VE_TrafficManager.turnedOn = false;VE_TrafficManager.ExpireAutoRefresh();};
VE_TrafficManager.Destroy = function () {VE_TrafficManager.ClearTraffic();VE_TrafficManager.incidentsAvailable = false;VE_TrafficManager.flowAvailable = false;if (VE_TrafficManager.incidents != null) {if (VE_TrafficManager.markets[0] != null) {for (var c = 0; c < VE_TrafficManager.markets[0].length; c++) {var b = VE_TrafficManager.markets[0][c].Id, i = VE_TrafficManager.incidents[b];if (i == null) {continue;}var a = VE_TrafficManager.incidents[b].pop();if (a == null) {continue;}for (var e = 0; e < a.length; e++) {var f = a.pop();f = null;}a = null;}}VE_TrafficManager.incidents[b] = null;}if (VE_TrafficManager.markets != null && VE_TrafficManager.markets[0] != null && VE_TrafficManager.markets[0].length > 0) {var h = VE_TrafficManager.markets[0].length;for (var d = 0; d < h; d++) {var g = VE_TrafficManager.markets[0].pop();g = null;}VE_TrafficManager.markets[0] = null;}};
VE_TrafficManager._ClearPins = function (e) {if (VE_TrafficManager.markets == null || VE_TrafficManager.markets.length <= 0) {return;}var c = VE_TrafficManager.markets[0];if (c != null && c.length > 0) {for (var a = 0; a < c.length; a++) {if (c[a].pushPin) {VE_TrafficManager.m_vemap.DeletePushpin(c[a].pushPin.ID);c[a].pushPin = null;}}}if (VE_TrafficManager.incidents == null || VE_TrafficManager.incidents.length <= 0) {return;}if (e) {var b = VE_TrafficManager.incidents[e];if (b == null) {return;}for (var a = 0; a < b.length; a++) {if (b[a].pushPin) {VE_TrafficManager.m_vemap.DeletePushpin(b[a].pushPin.ID);b[a].pushPin = null;}}} else if (c != null && c.length > 0) {for (var d = 0; d < VE_TrafficManager.markets[0].length; d++) {var f = VE_TrafficManager.markets[0][d].Id, b = VE_TrafficManager.incidents[f];if (b == null) {continue;}for (var a = 0; a < b.length; a++) {if (b[a].pushPin) {VE_TrafficManager.m_vemap.DeletePushpin(b[a].pushPin.ID);b[a].pushPin = null;}}b = null;}}};
VE_TrafficManager._ViewChangeNotification = function () {if (VE_TrafficManager.m_vemap.GetMapStyle() == Msn.VE.MapStyle.Oblique) {return;}if (!VE_TrafficManager.turnedOn) {return;}var a = VE_TrafficManager.m_vemap.GetZoomLevel();if (VE_TrafficManager.prevZoomLevel <= 8 && a > 8) {VE_TrafficManager.isViewDirty = true;} else if (VE_TrafficManager.prevZoomLevel > 8 && a <= 8) {VE_TrafficManager.isViewDirty = true;} else if (VE_TrafficManager.prevZoomLevel <= 15 && a > 15) {VE_TrafficManager.isViewDirty = true;} else if (VE_TrafficManager.prevZoomLevel > 15 && a <= 15) {VE_TrafficManager.isViewDirty = true;} else if (VE_TrafficManager.prevMapStyle == Msn.VE.MapStyle.Oblique) {VE_TrafficManager.isViewDirty = true;} else {var b = VE_TrafficManager._GetIncidentMarkets();if (b != null && b.length > 0) {for (var c = 0; c < b.length; c++) {var e = false;for (var d = 0; d < VE_TrafficManager.showingMarkets.length; d++) {if (b[c] == VE_TrafficManager.showingMarkets[d]) {e = true;break;}}if (!e) {VE_TrafficManager.isViewDirty = true;break;} else {VE_TrafficManager.isViewDirty = false;}}} else {VE_TrafficManager.isViewDirty = true;}}VE_TrafficManager.prevZoomLevel = a;VE_TrafficManager.prevMapStyle = VE_TrafficManager.m_vemap.GetMapStyle();if (VE_TrafficManager.isViewDirty) {window.setTimeout("VE_TrafficManager.GetTrafficInfo()", 1);}VE_TrafficManager.RenewAutoRefresh();};
VE_TrafficManager.ExpireAutoRefresh = function () {if (VE_TrafficManager.masterTimer != null) {window.clearInterval(VE_TrafficManager.masterTimer);}if (VE_TrafficManager.slaveTimer != null) {window.clearInterval(VE_TrafficManager.slaveTimer);}};
VE_TrafficManager.RenewAutoRefresh = function () {if (!VE_TrafficManager.turnedOn) {return;}VE_TrafficManager.ExpireAutoRefresh();VE_TrafficManager.masterTimer = window.setInterval("VE_TrafficManager.ExpireAutoRefresh()", VE_TrafficManager.m_vemap.vemapcontrol.GetSlidingExpirationForAutoRefresh());VE_TrafficManager.slaveTimer = window.setInterval(VE_TrafficManager.AutoRefresh, VE_TrafficManager.m_vemap.vemapcontrol.GetAutoRefreshRate());};
VE_TrafficManager.AutoRefresh = function () {try {var a = VE_TrafficManager.m_vemap.GetZoomLevel();if (a >= 9) {VE_TrafficManager.GetTrafficInfo();}} catch (b) {}};
VE_TrafficIncidentType = new (function () {this.ScheduledConstruction = "SCHEDULED CONSTRUCTION";this.OtherNews = "OTHER NEWS";this.Congestion = "CONGESTION";this.Accident = "ACCIDENT";this.DisabledVehicle = "DISABLED VEHICILE";this.RoadHazard = "ROAD HAZARD";this.UnscheduledConstruction = "UNSCHEDULED CONSTRUCTION";this.PlannedEvent = "PLANNED EVENT";this.MassTransit = "MASS TRANSIT";this.Weather = "WEATHER";this.Miscellaneous = "MISCELLANEOUS";});

function VE_Market(h, g, f, e, c, d, b, a) {
    this.Id = h;
    this.Name = g;
    this.GMTOffset = f;
    this.SWLatitude = e;
    this.SWLongitude = c;
    this.NELatitude = d;
    this.NELongitude = b;
    if (a.indexOf("Flow") == 0) {
        this.Flow = "Flow";
    }
    if (a.indexOf("Incidents") != -1) {
        this.Incident = "Incidents";
    }
}


function VE_Incident(e, h, k, b, g, j, f, c, a, d, i) {
    this.Timestamp = e;
    this.MarketId = h;
    this.Id = k;
    this.Description = b;
    this.Location = g;
    this.Type = j;
    this.Latitude = f;
    this.Longitude = c;
    this.Criticality = a;
    this.Starttime = d;
    this.Endtime = i;
}


function VETime() {
}

VETime.FormatTime = function (a) {if (a == null || a == "" || a == "undefined") {return "";}var c = false, d = a.substr(0, 10), e = a.substr(11, 5), b = "";if (a.indexOf("AM") > -1) {b = "AM";c = true;} else {b = "PM";}return d + " " + VETime.ConvertTo12HourFormat(e, c) + " " + b;};
VETime.ConvertTo12HourFormat = function (d, c) {var a = d;try {var b = parseFloat(a.replace(":", "."));if (b > 12) {if (b < 13 && c != true) {} else {b = b - 12;}}a = b.toFixed(2);a = a.replace(".", ":");} catch (e) {a = "";}return a;};
VETime.FormatPanelTime = function (a, g) {if (a == null || a == "" || a == "undefined") {return "";}try {var b = 0, d = false, i = a.substr(4, 8), h = a.indexOf(":"), f = a.substr(h - 2, 5), c = "";if (a.indexOf("AM") > -1) {c = "AM";d = true;b = a.indexOf("AM");} else {c = "PM";b = a.indexOf("PM");}var e = "";if (b > 0) {e = a.substr(b + 3, 3);}if (g) {return i + " " + VETime.ConvertTo12HourFormat(f, d) + " " + c + " " + e;} else {return VETime.ConvertTo12HourFormat(f, d) + " " + c + " " + e;}} catch (j) {}};
VETime.getMonth = function (a) {switch (a) {case "01":return " Jan";break;case "02":return " Feb";break;case "03":return " Mar";break;case "04":return " Apr";break;case "05":return " May";break;case "06":return " Jun";break;case "07":return " Jul";break;case "08":return " Aug";break;case "09":return " Sep";break;case "10":return " Oct";break;case "11":return " Nov";break;case "12":return " Dec";break;default:;}};
VE_SetModuleStatus(VE_ModuleName.APITRAFFIC, "loaded");
VEMap.prototype.SetAltitude = function (a) {try {VEValidator.ValidateFloat(a, "level");var b = parseFloat(a);this._QueueRequest(this.vemapcontrol.SetAltitude, b);} catch (c) {throw c;return;}};
VEMap.prototype.SetPitch = function (b) {try {VEValidator.ValidateFloat(b, "pitch");var a = parseFloat(b);a = a % 360;if (a > 0) {a = a < 1 ? 0 : -90;}if (a < -90) {a = -90;}this._QueueRequest(this.vemapcontrol.SetTilt, a);} catch (c) {throw c;return;}};
VEMap.prototype.SetHeading = function (b) {try {VEValidator.ValidateFloat(b, "heading");var a = parseFloat(b);a = a % 360;if (a < 0) {a = 360 + a;}this._QueueRequest(this.vemapcontrol.SetDirection, a);} catch (c) {throw c;return;}};
VEMap.prototype.GetAltitude = function () {return this.vemapcontrol.GetAltitude();};
VEMap.prototype.GetPitch = function () {return this.vemapcontrol.GetTilt();};
VEMap.prototype.GetHeading = function () {return this.vemapcontrol.GetDirection();};
VEMap.prototype._Toggle3DNavigationControl = function (b) {if (this.GetMapMode() == VEMapMode.Mode3D) {var a = this.vemapcontrol.Get3DControl();if (a != null) {a.ShowNavigationControl = b;}}};
VEMap.prototype.Show3DNavigationControl = function () {this._Toggle3DNavigationControl(true);};
VEMap.prototype.Hide3DNavigationControl = function () {this._Toggle3DNavigationControl(false);};

function MVC_Init_AbstractView_Shared() {
    Msn.MVC.AbstractView.prototype.GetMoveMenuOptionAsHtml = function (a) {return a;};
}


function MVC_Init_View3D_Shared() {
    Msn.MVC.View3D.prototype.GetMoveMenuOptionAsHtml = function (d, c) {var e = c.GetPrimitiveCount();for (var a = 0; a < e; a++) {var b = c.GetPrimitive(a).type;if (b == VEShapeType.Polyline || b == VEShapeType.Polygon) {return "";}}return d;};
}


function MVC_Init_ViewFacade_Shared() {
    Msn.MVC.ViewFacade.prototype.GetMoveMenuOptionAsHtml = function (a, b) {if (this._curMvcView == null) {return "";}return this._curMvcView.GetMoveMenuOptionAsHtml(a, b);};
}


function MVC_Init_AbstractView_Drawing() {
    Msn.MVC.AbstractView.prototype.OnAfterViewChanged = function () {};
    Msn.MVC.AbstractView.prototype.OnAllCollectionLayersRepaint = function () {this._DrawAllCollectionLayers();};
    Msn.MVC.AbstractView.prototype.OnAllCollectionLayersClear = function () {this._ClearAllCollectionLayers();};
    Msn.MVC.AbstractView.prototype.OnCollectionLayerRepaint = function (a) {this._DrawCollectionLayer(a);};
    Msn.MVC.AbstractView.prototype.OnCollectionLayerClear = function (a) {this._ClearCollectionLayer(a);};
    Msn.MVC.AbstractView.prototype.OnEntityRepaint = function (b, a, c) {this._DrawEntity(b, a, c);};
    Msn.MVC.AbstractView.prototype.OnEntityClear = function (a) {this._ClearEntity(a);};
    Msn.MVC.AbstractView.prototype.OnEntityPrimitiveRepaint = function (c, a, b) {this._DrawEntityPrimitive(c, a, b);};
    Msn.MVC.AbstractView.prototype.OnEntityPrimitiveClear = function (a) {this._ClearEntityPrimitive(a);};
    Msn.MVC.AbstractView.prototype.OnContextMenuRemoveContextPin = function () {map.RemovePushpin("context_pin");this._contextPin = null;};
    Msn.MVC.AbstractView.prototype.OnContextMenuPlaceContextPin = function (b, a, c) {this._contextPin = map.AddPushpin("context_pin", b, a, 7, 7, "VE_Pushpin VE_Pushpin_" + c, "", VE_ScratchpadManager.pinZIndex, Msn.VE.PushPinTypes.Context);};
    Msn.MVC.AbstractView.prototype.GetDefaultMapCoordinatesToPutPushpin = function () {var a = this._contextPin, c = a.vePushpin.GetLatitude(), b = a.vePushpin.GetLongitude();return [b, c];};
}


function MVC_Init_FlatlandView_Drawing() {
    Msn.MVC.FlatlandView.prototype.OnAfterViewChanged = function () {VE_EditControl.DrawUnfinishedGeometry();this._DrawAllCollectionLayers();};
    Msn.MVC.FlatlandView.prototype._DrawAllCollectionLayers = function () {this._GetMapDrawingView().DrawAll();};
    Msn.MVC.FlatlandView.prototype._ClearAllCollectionLayers = function () {this._GetMapDrawingView().ClearAll();};
    Msn.MVC.FlatlandView.prototype._DrawCollectionLayer = function (a) {this._GetMapDrawingView().DrawLayer(a);};
    Msn.MVC.FlatlandView.prototype._ClearCollectionLayer = function (a) {this._GetMapDrawingView().ClearLayerDom(a);};
    Msn.MVC.FlatlandView.prototype._DrawEntity = function (b, a, c) {this._GetMapDrawingView().DrawEntity(b, a, c);};
    Msn.MVC.FlatlandView.prototype._ClearEntity = function (a) {this._GetMapDrawingView().ClearEntityDom(a);};
    Msn.MVC.FlatlandView.prototype._DrawEntityPrimitive = function (c, a, b) {this._GetMapDrawingView().DrawPrimitive(c, a, b);};
    Msn.MVC.FlatlandView.prototype._ClearEntityPrimitive = function (a) {this._GetMapDrawingView().ClearPrimitiveDom(a);};
    Msn.MVC.FlatlandView.prototype._GetMapDrawingView = function () {if (this._mapDrawingView == null) {this._mapDrawingView = new Msn.Drawing.MapFlatlandView;}return this._mapDrawingView;};
}


function MVC_Init_View3D_Drawing() {
    Msn.MVC.View3D.prototype._DrawAllCollectionLayers = function () {var c = VE_MapManager.GetCollectionCount();for (var a = 0; a < c; a++) {var b = VE_MapManager.GetCollectionByIndex(a);b._index = a;this._DrawCollectionLayer(b);}};
    Msn.MVC.View3D.prototype._ClearAllCollectionLayers = function () {};
    Msn.MVC.View3D.prototype._DrawCollectionLayer = function (a) {this._ClearCollectionLayer(a);if (a.GetVisibility()) {var d = false;if (a.GetType() == MC_COL_TYPE_FAVORITE) {d = true;}var e = a.GetShapeCount();for (var b = 0; b < e; b++) {var c = a.Annotations[b];c.SetIndex(b);if (c.GetVisibility()) {this._DrawEntity(c, null, false, d, a);}}}};
    Msn.MVC.View3D.prototype._ClearCollectionLayer = function (b) {var c = b.GetShapeCount();for (var a = 0; a < c; a++) {this._ClearEntity(b.Annotations[a]);}};
    Msn.MVC.View3D.prototype._DrawEntity = function (a, x, y, m, u) {if (a == null) {return;}var f = a.GetId();if (!a.GetVisibility()) {this._spacecontrol.DeleteGeometry(this._hackUniqueLayerId, l);return;}var w = typeof u != "object" ? null : u, g = this._GetZIndex(w, a), v = a.GetPrimitiveCount();for (var n = 0; n < v; n++) {var b = a.GetPrimitive(n);if (!b) {continue;}var d = "text=\"" + (a.GetIndex() + 1) + "\"" + " zindex='" + g + "'";if (b.type == VEShapeType.Polygon) {var h = this._hackUniqueLayerId, t = this._ConvertPointArrayToView3DParameter(b.points), c = this._GetPrimitiveSymbolOrDefault(b), q = this._ConvertStrokeWeightToView3DParameter(c.stroke_weight), r = "Linecolor='" + c.stroke_color + "'" + " Lineweight='" + q + "'" + " zindex='" + g + "'" + " Dashstyle='" + c.stroke_dashstyle + "'" + " Fillcolor='" + c.fill_color + "'" + " Fillopacity='" + c.fill_opacity + "'" + " minLOD='" + a.minZoomLevel + "'" + " maxLOD='" + a.maxZoomLevel + "'" + " Lineopacity='" + c.stroke_opacity + "'", l = f, p = f + this._entityIdShapePostfix;this._spacecontrol.AddPolygonWithProperties(h, p, t, r);var i = b.labelPosX, j = b.labelPosY, k = "title_search3";if (m) {k = "shared";}var e = PushpinURL(Msn.VE.PushPinTypes.SearchResult, k), o = f;if (typeof Msn.VE.API != "undefined" && Msn.VE.API != null) {d = "text=\"\"";d = d.concat("minLOD =\"", a.minZoomLevel, "\" ", "maxLOD =\"", a.maxZoomLevel, "\" ");e = c.imagedata_src;if (c.isOn) {d = this._GetStyleProperties(a, g);}}if (b.isLabel) {this._spacecontrol.AddPointWithProperties(h, o, j, i, e, d);}} else if (b.type == VEShapeType.Polyline) {var h = this._hackUniqueLayerId, t = this._ConvertPointArrayToView3DParameter(b.points), c = this._GetPrimitiveSymbolOrDefault(b), q = this._ConvertStrokeWeightToView3DParameter(c.stroke_weight), r = "Linecolor='" + c.stroke_color + "'" + " Lineweight='" + q + "'" + " zindex='" + g + "'" + " Dashstyle='" + c.stroke_dashstyle + "'" + " minLOD='" + a.minZoomLevel + "'" + " maxLOD='" + a.maxZoomLevel + "'" + " Lineopacity='" + c.stroke_opacity + "'", p = f + this._entityIdShapePostfix;this._spacecontrol.AddPolylineWithProperties(h, p, t, r);var i = b.labelPosX, j = b.labelPosY, k = "title_search3";if (m) {k = "shared";}var e = PushpinURL(Msn.VE.PushPinTypes.SearchResult, k), o = f;if (typeof Msn.VE.API != "undefined" && Msn.VE.API != null) {d = "text=\"\"";d = d.concat("minLOD =\"", a.minZoomLevel, "\" ", "maxLOD =\"", a.maxZoomLevel, "\" ");e = c.imagedata_src;if (c.isOn) {d = this._GetStyleProperties(a, g);}}if (b.isLabel) {this._spacecontrol.AddPointWithProperties(h, o, j, i, e, d);}} else {var i = b.points[0], j = b.points[1], h = this._hackUniqueLayerId, s = a.GetBusinessListingId(), e;if (m) {e = PushpinURL(Msn.VE.PushPinTypes.Annotation, "shared");} else if (typeof s != "undefined" && parseInt(s) != 0) {e = PushpinURL(Msn.VE.PushPinTypes.Annotation, "business");} else {e = PushpinURL(Msn.VE.PushPinTypes.Annotation);}var l = f, c = b.symbol;if (c == null) {b.symbol = VE_MapDispatch_SymbolLib.GetMapSymbolByID(MC_PROPERTY_PUSHPIN);c = b.symbol;}if (typeof Msn.VE.API != "undefined" && Msn.VE.API != null) {d = "text=\"\"";d = d.concat("minLOD =\"", a.minZoomLevel, "\" ", "maxLOD =\"", a.maxZoomLevel, "\" ");e = c.imagedata_src;if (c.isOn) {d = this._GetStyleProperties(a, g);if (typeof a.altitude != "undefined") {this._spacecontrol.AddPointWithAltitudeAndProperties(h, l, j, i, a.altitude, e, d);return;}}}this._spacecontrol.AddPointWithProperties(h, l, j, i, e, d);}}};
    Msn.MVC.View3D.prototype._GetStyleProperties = function (c, g) {var f = "", e = "", d = c.GetPrimitive(0), b = d.symbol;if (d.name) {e = d.name;}var a = [];a.push("text=\"" + e + "\" ");a.push("width=\"" + b.img_width + "\" ");a.push("height=\"" + b.img_height + "\" ");a.push("textbold =\"" + b.textbox_bold + "\" ");a.push("textfont=\"" + b.textbox_font + "\" ");a.push("textitalics=\"" + b.textbox_italic + "\" ");a.push("textunderline =\"" + b.textbox_underscore + "\" ");a.push("textsize =\"" + b.textbox_size + "\" ");a.push("minLOD =\"" + c.minZoomLevel + "\" ");a.push("maxLOD =\"" + c.maxZoomLevel + "\" ");a.push("imageoffset =\"" + b.img_offsetX + "," + b.img_offsetY + "\" ");a.push("textoffset  =\"" + b.textbox_OffsetX + "," + b.textbox_OffsetY + "\" ");var i = b.textbox_color.replace("#", "#" + parseInt(b.textbox_color_opacity * 255).toString(16)), h = b.textbox_backcolor.replace("#", "#" + parseInt(b.textbox_backcolor_opacity * 255).toString(16));a.push("forecolor=\"" + i + "\" ");a.push("backcolor =\"" + h + "\" ");a.push("zindex =\"" + g + "\" ");f = a.join(" ");return f;};
    Msn.MVC.View3D.prototype._GetZIndex = function (a, b) {var c = 60;if (a == null) {if (typeof Msn.VE.API == "undefined" || Msn.VE.API == null) {a = VE_MapManager.GetCollectionByAnId(b.GetId());if (a != null) {var d = VE_MapManager.GetCollectionCount();c = (d - a._index) * MC_MAX_COL_SIZE + b.GetIndex();}} else {a = b._shplayer;if (a != null) {c = (a._index + 1) * MC_MAX_COL_SIZE + b.GetIndex();}}}return c;};
    Msn.MVC.View3D.prototype._ClearEntity = function (a) {var c = a.GetId();this._spacecontrol.DeleteGeometry(this._hackUniqueLayerId, c);var b = a.GetPrimitive(0);if (b == null || b.type != VEShapeType.Pushpin) {var d = c + this._entityIdShapePostfix;this._spacecontrol.DeleteGeometry(this._hackUniqueLayerId, d);}};
    Msn.MVC.View3D.prototype._DrawEntityPrimitive = function () {};
    Msn.MVC.View3D.prototype._ClearEntityPrimitive = function () {};
    Msn.MVC.View3D.prototype._ConvertPointArrayToView3DParameter = function (a) {var b = "", c = a.length;for (i = 0; i < c; i += 2) {var d = a[i], e = a[i + 1];b += d + "," + e + " ";}return b;};
    Msn.MVC.View3D.prototype._ConvertStrokeWeightToView3DParameter = function (a) {if (a == null) {return "2px";}var b = parseInt(a);if (isNaN(b)) {return "2px";} else {return b + "px";}};
    Msn.MVC.View3D.prototype._GetPrimitiveSymbolOrDefault = function (b) {var a = b.symbol;if (a == null) {return VE_MapDispatch_SymbolLib.GetCurrentDefaultSymbol();}return a;};
}


function MVC_Init_ViewFacade_Drawing() {
}

VE_SetModuleStatus(VE_ModuleName.API3D, "loaded");
VEMap.prototype.Init3D = function () {MVC_Init_AbstractView_Shared();MVC_Init_ViewFacade_Shared();MVC_Init_View3D_Shared();MVC_Init_AbstractView_Drawing();MVC_Init_ViewFacade_Drawing();MVC_Init_FlatlandView_Drawing();MVC_Init_View3D_Drawing();};
